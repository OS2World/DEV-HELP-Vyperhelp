/***************************************************************************
 * File...... Generator.hpp
 * Author.... Mat
 * Date...... 9/21/95
 *
 * Generator is the base class for all generators (IPFGenerator, etc).
 * It provides default (null) behavior.
 *
 * Copyright (C) 1995 MekTek
 ***************************************************************************/
#ifndef GENERATOR_HPP
#define GENERATOR_HPP

// Standard C++
class ostream;

// Generator
#include "CodePage.hpp"
#include "Registration.hpp"
#include "CurrentDate.hpp"
#include "WindowDef.hpp"
#include "ArtDef.hpp"
#include "Gin.hpp"
class Symbol;
class WindowSet;
class ArtSet;


/***************************************************************************
 * Procedure.. Generator
 * Author..... Mat
 * Date....... 9/26/95
 *
 * Generator is the abstract base class of all generators.  Subclassed
 * generators will respond to the stream operators to produce hypertext
 * output in a certain format. "Gin"s are generator-input objects that
 * have special meaning to the generator.
 *
 * NOTE: default is to IGNORE all document info settings and Gins!
 * The subclass can then implement what it needs.
 ***************************************************************************/
class _Export Generator
{
  public:
    // constructor
    Generator( Boolean allowNag = true );
    virtual ~Generator();

    // version
    static IString version();

    // credits ("Generated by VyperHelp...")
    IString credits() const;

    // registration
    static Registration & registration();
    void setInputFilename( const IString & filename );
    void nag();

    // document info
    enum Language
    {
      english
    };
    virtual Generator & setTitle( const IString & title );
    virtual Generator & setSubject( const IString & subject );
    virtual Generator & setVersion( const IString & version );
    virtual Generator & setCopyright( const IString & copyright );
    virtual Generator & setAuthor( const IString & author );
    virtual Generator & setLanguage( Language language );
    virtual Generator & setCodePage( CodePage cp );
    virtual Generator & addKeyword( const IString & keyword );
    virtual Generator & defineWindow( const WindowDef & window );
    virtual Generator & defineArt( const ArtDef & art );

    // stream operators
    // allow direct streaming of Gins, strings and symbols
    Generator & operator<<( const Gin & );
    Generator & operator<<( const IString & );
    Generator & operator<<( const Symbol & );

    // Gin handlers
    virtual void handleSection( const SectionGin & );
    virtual void handleKeyword( const KeywordGin & );
    virtual void handleLabel( const LabelGin & );
    virtual void handleRow( const RowGin & );
    virtual void handleColumn( const ColumnGin & );
    virtual void handleItem( const ItemGin & );
    virtual void handlePara( const ParaGin & );
    virtual void handleLine( const LineGin & );
    virtual void handlePush( const PushGin & );
    virtual void handlePop( const PopGin & );
    virtual void handleRightMargin( const RightMarginGin & );
    virtual void handleLeftMargin( const LeftMarginGin & );
    virtual void handleBorder( const BorderGin & );
    virtual void handleAlign( const AlignGin & );
    virtual void handleSpacing( const SpacingGin & );
    virtual void handleRuler( const RulerGin & );
    virtual void handleOutline( const OutlineGin & );
    virtual void handleDivider( const DividerGin & );
    virtual void handleFont( const FontGin & );
    virtual void handleSize( const SizeGin & );
    virtual void handleColor( const ColorGin & );
    virtual void handleBackColor( const BackColorGin & );
    virtual void handleBold( const BoldGin & );
    virtual void handleItalic( const ItalicGin & );
    virtual void handleUnderline( const UnderlineGin & );
    virtual void handleComment( const CommentGin & );
    virtual void handleLink( const LinkGin & );
    virtual void handleHide( const HideGin & );
    virtual void handleArt( const ArtGin & );
    virtual void handleText( const TextGin & );
    virtual void handleSymbol( const SymbolGin & );

    // done indicator
    virtual void finish();

  protected:
    // window support
    Boolean           hasWindowWithId( int id ) const;
    const WindowDef & windowWithId( int id ) const;
    INumber           numberOfWindows() const;
    const WindowDef & window( IPosition index ) const;

    // art support
    Boolean        hasArtWithId( const IString & id ) const;
    const ArtDef & artWithId( const IString & id ) const;
    INumber        numberOfArts() const;
    const ArtDef & art( IPosition index ) const;

    // text output support
    static unsigned char delimiter;
    enum OutputMode
    {
      text,   // normal text output
      ipf,    // IPF output
      rtf,    // RTF output
      html    // HTML output
    };
    enum OutputFlag
    {
      breakBefore     = 0x00000001,  // force line break before this text
      breakAfter      = 0x00000002,  // force line break after this text
      noWrap          = 0x00000004,  // don't allow wrapping in this text
      noLeadingPeriod = 0x00000008,  // (IPF) replace leading period on line with &per.
      hasContent      = 0x00000010   // (IPF,HTML) this text has CONTENT (not tag or control info)
    };
    void setOutput( ostream & output, unsigned maxLineLength = 80, OutputMode mode = text );
    void outputText( const IString & text, unsigned flags );
    void outputLine( Boolean force = true );
    void closeOutput();
    void checkOutput();

  private:
    // helpers
    unsigned wrapIndex( const IString & string, unsigned startPos = (unsigned) UINT_MAX );
    void     appendText( const IString & string, Boolean isContent );
    Boolean  keepWrapChar( unsigned index, unsigned char ch );

    // registration
    static Registration _registration;
    static CurrentDate  _date;

    // collections
    WindowSet * _windows;
    ArtSet *    _arts;

    // text output
    ostream *  _output;
    unsigned   _maxLineLength;
    OutputMode _mode;
    IString    _line;
    IString    _wrapChars;
    unsigned   _lineWrapIndex;
    unsigned   _minContentIndex;  // lowest index of content on line (0 if none)
    unsigned   _maxContentIndex;  // highest index of content on line (0 if none)

    // "nag" output
    Boolean  _allowNag;
    unsigned _nagCount;
};


// inline functions
#include "Generator.ipp"


#endif

