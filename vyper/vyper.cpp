/*******************************************************************************
* FILE NAME: Vyper.cpp                                                         *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     Vyper- Vyper main window                                                 *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _IMENUBAR_
#include <imenubar.hpp>
#endif

#ifndef _IINFOA_
#include <iinfoa.hpp>
#endif

#ifndef _ISPLITCV_
#include <isplitcv.hpp>
#endif

#ifndef _IFONT_
#include <ifont.hpp>
#endif

#ifndef _IVPORT_
#include <ivport.hpp>
#endif

#ifndef _ICOLOR_
#include <icolor.hpp>
#endif

#ifndef _IHELP_
#include <ihelp.hpp>
#endif

#ifndef _IVBFILED_
#include <ivbfiled.hpp>
#endif

#ifndef _VYSECTION_
#include "VySection.hpp"
#endif

#ifndef _VYDOC_
#include "VyDoc.hpp"
#endif

#ifndef _VYDOCPROPERTIES_
#include "VyDocProperties.hpp"
#endif

#ifndef _VYSECTIONPROPERTIES_
#include "VySectionProperties.hpp"
#endif

#ifndef EDITOR_HPP
#include "Editor.hpp"
#endif

#ifndef _IVBFONTD_
#include <ivbfontd.hpp>
#endif

#ifndef _VYSYMBOLSELECTOR_
#include "VySymbolSelector.hpp"
#endif

#ifndef _VYLINKPROPERTIES_
#include "VyLinkProperties.hpp"
#endif

#ifndef _VYFONT_
#include "VyFont.hpp"
#endif

#ifndef _CONFIRMATION_
#include "Confirmation.hpp"
#endif

#ifndef _LOGICALNOT_
#include "LogicalNot.hpp"
#endif

#ifndef _ITITLE_
#include <ititle.hpp>
#endif

#ifndef _IIBASE_
#include <ibase.hpp>
#endif

#ifndef _IVSEQ_H_
#include <ivseq.h>
#endif

#ifndef _VYSYMBOL_
#include "VySymbol.hpp"
#endif

#ifndef _CLOSEHANDLER_
#include "CloseHandler.hpp"
#endif

#ifndef _VYINFO_
#include "VyInfo.hpp"
#endif

#ifndef _EXCEPTIONNOTIFICATION_
#include "ExceptionNotification.hpp"
#endif

#ifndef _VYREGISTRATION_
#include "VyRegistration.hpp"
#endif

#ifndef _VYSETTINGS_
#include "VySettings.hpp"
#endif

#ifndef _VYWAIT_
#include "VyWait.hpp"
#endif

#ifndef _VYARTPROPERTIES_
#include "VyArtProperties.hpp"
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _VYPER_
#include "Vyper.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for VyperConn11
//*****************************************************************************
class VyperConn11 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn11(unsigned long tid) {id = tid;};

   virtual  ~VyperConn11(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IHelpWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_HelpIndexChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HelpIndexChoice(commandEvent) to HelpWindow(showIndexHelp))");
         try {target->show(IHelpWindow::index);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IHelpWindow * target;
   unsigned long id;


};   //VyperConn11


//*****************************************************************************
// Class definition for VyperConn12
//*****************************************************************************
class VyperConn12 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn12(unsigned long tid) {id = tid;};

   virtual  ~VyperConn12(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IHelpWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_HelpGeneralChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HelpGeneralChoice(commandEvent) to HelpWindow(showGeneralHelp))");
         try {target->show(IHelpWindow::general);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IHelpWindow * target;
   unsigned long id;


};   //VyperConn12


//*****************************************************************************
// Class definition for VyperConn13
//*****************************************************************************
class VyperConn13 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn13(unsigned long tid) {id = tid;};

   virtual  ~VyperConn13(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IHelpWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_HelpUsingChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HelpUsingChoice(commandEvent) to HelpWindow(showUsingHelp))");
         try {target->show(IHelpWindow::using);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IHelpWindow * target;
   unsigned long id;


};   //VyperConn13


//*****************************************************************************
// Class definition for VyperConn15
//*****************************************************************************
class VyperConn15 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn15(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Confirmation * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Confirmation::confirmedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ConfirmFileOpen(confirmed) to FileOpenDialog(showModally))");
         try {target->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Confirmation * source;
   IVBFileDialog * target;


};   //VyperConn15


//*****************************************************************************
// Class definition for VyperConn337
//*****************************************************************************
class VyperConn337 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn337(unsigned long tid) {id = tid;};

   virtual  ~VyperConn337(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, VyperWaitFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_FileSaveChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileSaveChoice(commandEvent) to WaitFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   VyperWaitFactoryFactory * target;
   unsigned long id;


};   //VyperConn337


//*****************************************************************************
// Class definition for VyperConn19
//*****************************************************************************
class VyperConn19 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn19(unsigned long tid) {id = tid;};

   virtual  ~VyperConn19(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_FileSaveChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileSaveChoice(commandEvent) to File(save))");
         try {target->save();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   VyDoc * target;
   unsigned long id;


};   //VyperConn19

const INotificationId VyperConn19::exceptionId = "VyperConn19::exceptionId";

//*****************************************************************************
// Class definition for VyperConn22
//*****************************************************************************
class VyperConn22 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn22(unsigned long tid) {id = tid;};

   virtual  ~VyperConn22(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_FileSaveAsChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileSaveAsChoice(commandEvent) to FileSaveDialog(showModally))");
         try {target->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBFileDialog * target;
   unsigned long id;


};   //VyperConn22


//*****************************************************************************
// Class definition for VyperConn354
//*****************************************************************************
class VyperConn354 : public IObserver {
public:
   virtual  ~VyperConn354(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(saveMask) to FileSaveDialog(fileName))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setSaveMask(target->fileName());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(saveMask) to FileSaveDialog(fileName))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFileName(source->saveMask());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySettings::saveMaskId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBFileDialog::pressedOkId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   IVBFileDialog * target;
   Boolean aligning;


};   //VyperConn354


//*****************************************************************************
// Class definition for VyperConn406
//*****************************************************************************
class VyperConn406 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn406(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyperWaitFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileSaveDialog(pressedOkEvent) to WaitFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyperWaitFactoryFactory * target;


};   //VyperConn406


//*****************************************************************************
// Class definition for VyperConn23
//*****************************************************************************
class VyperConn23 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn23(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn23 & setFilename(IVBFileDialog * aSelf) {iFilename = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileSaveDialog(pressedOkEvent) to File(saveAs))");
         try {target->saveAs(iFilename->fileName());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyDoc * target;
   IVBFileDialog * iFilename;


};   //VyperConn23

const INotificationId VyperConn23::exceptionId = "VyperConn23::exceptionId";

//*****************************************************************************
// Class definition for VyperConn397
//*****************************************************************************
class VyperConn397 : public IObserver {
public:
   virtual  ~VyperConn397(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(openMask) to FileOpenDialog(fileName))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setOpenMask(target->fileName());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(openMask) to FileOpenDialog(fileName))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFileName(source->openMask());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySettings::openMaskId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBFileDialog::pressedOkId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   IVBFileDialog * target;
   Boolean aligning;


};   //VyperConn397


//*****************************************************************************
// Class definition for VyperConn315
//*****************************************************************************
class VyperConn315 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn315(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyperWaitFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileOpenDialog(pressedOkEvent) to WaitFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyperWaitFactoryFactory * target;


};   //VyperConn315


//*****************************************************************************
// Class definition for VyperConn17
//*****************************************************************************
class VyperConn17 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn17(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn17 & setAFilename(IVBFileDialog * aSelf) {iAFilename = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileOpenDialog(pressedOkEvent) to File(filename))");
         try {target->setFilename(iAFilename->fileName());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyDoc * target;
   IVBFileDialog * iAFilename;


};   //VyperConn17


//*****************************************************************************
// Class definition for VyperConn25
//*****************************************************************************
class VyperConn25 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn25(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileOpenDialog(pressedOkEvent) to File(load))");
         try {target->load();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyDoc * target;


};   //VyperConn25

const INotificationId VyperConn25::exceptionId = "VyperConn25::exceptionId";

//*****************************************************************************
// Class definition for VyperConn27
//*****************************************************************************
class VyperConn27 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn27(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::createdId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileSaveDialog(createdEvent) to FileSaveDialog(setSaveAsDialog))");
         try {target->setSaveAsDialog();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   IVBFileDialog * target;


};   //VyperConn27


//*****************************************************************************
// Class definition for VyperConn16
//*****************************************************************************
class VyperConn16 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn16(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Confirmation * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Confirmation::confirmedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ConfirmFileNew(confirmed) to File(create))");
         try {target->create();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Confirmation * source;
   VyDoc * target;


};   //VyperConn16

const INotificationId VyperConn16::exceptionId = "VyperConn16::exceptionId";

//*****************************************************************************
// Class definition for VyperConn32
//*****************************************************************************
class VyperConn32 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn32(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Confirmation * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Confirmation::confirmedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ComfirmFileClose(confirmed) to File(close))");
         try {target->close();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Confirmation * source;
   VyDoc * target;


};   //VyperConn32

const INotificationId VyperConn32::exceptionId = "VyperConn32::exceptionId";

//*****************************************************************************
// Class definition for VyperConn44
//*****************************************************************************
class VyperConn44 : public IObserver {
public:
   virtual  ~VyperConn44(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyDoc * aSource, IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(sections) to SectionContainer(items))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItems(source->getSections());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::sections) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj >::itemsId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyDoc * source;
   IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * target;
   Boolean aligning;


};   //VyperConn44


//*****************************************************************************
// Class definition for VyperConn59
//*****************************************************************************
class VyperConn59 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn59(unsigned long tid) {id = tid;};

   virtual  ~VyperConn59(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, VyperSectionFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VySection * actionResult() const { return iActionResult; };
   VyperConn59 & setActionResult(VySection * aSelf) {
      iActionResult = aSelf;
      notifyObservers(INotificationEvent(actionResultId, *this));
      return *this;
      };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId actionResultId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_SectionNewChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionNewChoice(commandEvent) to SectionFactory(new))");
         try {setActionResult(target->create());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   VyperSectionFactoryFactory * target;
   VySection * iActionResult;
   unsigned long id;


};   //VyperConn59

const INotificationId VyperConn59::actionResultId = "VyperConn59::actionResult";

//*****************************************************************************
// Class definition for VyperConn35
//*****************************************************************************
class VyperConn35 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn35(unsigned long tid) {id = tid;};

   virtual  ~VyperConn35(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn35 & setVySection(VyperConn59 * aSelf) {iVySection = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_SectionNewChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionNewChoice(commandEvent) to File(createSection))");
         try {target->createSection(iVySection->actionResult());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   VyDoc * target;
   VyperConn59 * iVySection;
   unsigned long id;


};   //VyperConn35

const INotificationId VyperConn35::exceptionId = "VyperConn35::exceptionId";

//*****************************************************************************
// Class definition for VyperConn38
//*****************************************************************************
class VyperConn38 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn38(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Confirmation * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Confirmation::confirmedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ConfirmSectionDelete(confirmed) to File(removeSection))");
         try {target->removeSection();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Confirmation * source;
   VyDoc * target;


};   //VyperConn38

const INotificationId VyperConn38::exceptionId = "VyperConn38::exceptionId";

//*****************************************************************************
// Class definition for VyperConn46
//*****************************************************************************
class VyperConn46 : public IObserver {
public:
   virtual  ~VyperConn46(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyDoc * aSource, IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(selection) to SectionContainer(selectedCollectionPosition))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setSelection(target->selectedCollectionPosition());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(selection) to SectionContainer(selectedCollectionPosition))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->select(source->selection());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::selectionId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj >::selectId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyDoc * source;
   IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * target;
   Boolean aligning;


};   //VyperConn46


//*****************************************************************************
// Class definition for VyperConn55
//*****************************************************************************
class VyperConn55 : public IObserver {
public:
   virtual  ~VyperConn55(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionContainer(this) to File(view))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setView(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::viewId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * source;
   VyDoc * target;
   Boolean aligning;


};   //VyperConn55


//*****************************************************************************
// Class definition for VyperConn66
//*****************************************************************************
class VyperConn66 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn66(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn66 & setIViewPort(IViewPort * aSelf) {iIViewPort = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj >::enterId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionContainer(enterEvent) to File(openSection))");
         try {target->openSection(iIViewPort);}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * source;
   VyDoc * target;
   IViewPort * iIViewPort;


};   //VyperConn66

const INotificationId VyperConn66::exceptionId = "VyperConn66::exceptionId";

//*****************************************************************************
// Class definition for VyperConn49
//*****************************************************************************
class VyperConn49 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn49(unsigned long tid) {id = tid;};

   virtual  ~VyperConn49(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn49 & setIViewPort(IViewPort * aSelf) {iIViewPort = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_SectionOpenChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionOpenChoice(commandEvent) to File(openSection))");
         try {target->openSection(iIViewPort);}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   VyDoc * target;
   IViewPort * iIViewPort;
   unsigned long id;


};   //VyperConn49

const INotificationId VyperConn49::exceptionId = "VyperConn49::exceptionId";

//*****************************************************************************
// Class definition for VyperConn69
//*****************************************************************************
class VyperConn69 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn69(unsigned long tid) {id = tid;};

   virtual  ~VyperConn69(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_SectionCloseChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionCloseChoice(commandEvent) to File(closeSection))");
         try {target->closeSection();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   VyDoc * target;
   unsigned long id;


};   //VyperConn69

const INotificationId VyperConn69::exceptionId = "VyperConn69::exceptionId";

//*****************************************************************************
// Class definition for VyperConn346
//*****************************************************************************
class VyperConn346 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn346(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Vyper * aSource, VyperWaitFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Vyper::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to WaitFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Vyper * source;
   VyperWaitFactoryFactory * target;


};   //VyperConn346


//*****************************************************************************
// Class definition for VyperConn58
//*****************************************************************************
class VyperConn58 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn58(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Vyper * aSource, IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Vyper::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to SectionContainer(customLogic, \"Initialize tree view\"))");
         try {codeSnippet(&anEvent);}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member functions
   //---------------------------------------------------------------------------
   void codeSnippet(const INotificationEvent* event)
      {
      target->setTreeViewIndent( 20 );
      target->showMiniIcons();
      };

   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Vyper * source;
   IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * target;


};   //VyperConn58

const INotificationId VyperConn58::exceptionId = "VyperConn58::exceptionId";

//*****************************************************************************
// Class definition for VyperConn79
//*****************************************************************************
class VyperConn79 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn79(unsigned long tid) {id = tid;};

   virtual  ~VyperConn79(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_ImportTextChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ImportTextChoice(commandEvent) to ConfirmImportText(show))");
         try {target->show();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   Confirmation * target;
   unsigned long id;


};   //VyperConn79


//*****************************************************************************
// Class definition for VyperConn379
//*****************************************************************************
class VyperConn379 : public IObserver {
public:
   virtual  ~VyperConn379(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(importTextMask) to ImportTextDialog(fileName))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setImportTextMask(target->fileName());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(importTextMask) to ImportTextDialog(fileName))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFileName(source->importTextMask());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySettings::importTextMaskId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBFileDialog::pressedOkId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   IVBFileDialog * target;
   Boolean aligning;


};   //VyperConn379


//*****************************************************************************
// Class definition for VyperConn326
//*****************************************************************************
class VyperConn326 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn326(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyperWaitFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ImportTextDialog(pressedOkEvent) to WaitFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyperWaitFactoryFactory * target;


};   //VyperConn326


//*****************************************************************************
// Class definition for VyperConn60
//*****************************************************************************
class VyperConn60 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn60(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn60 & setIString(IVBFileDialog * aSelf) {iIString = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ImportTextDialog(pressedOkEvent) to File(importText))");
         try {target->importText(iIString->fileName());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyDoc * target;
   IVBFileDialog * iIString;


};   //VyperConn60

const INotificationId VyperConn60::exceptionId = "VyperConn60::exceptionId";

//*****************************************************************************
// Class definition for VyperConn52
//*****************************************************************************
class VyperConn52 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn52(unsigned long tid) {id = tid;};

   virtual  ~VyperConn52(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_ImportWinHelpChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ImportWinHelpChoice(commandEvent) to ConfirmImportWinHelp(show))");
         try {target->show();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   Confirmation * target;
   unsigned long id;


};   //VyperConn52


//*****************************************************************************
// Class definition for VyperConn400
//*****************************************************************************
class VyperConn400 : public IObserver {
public:
   virtual  ~VyperConn400(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(importWinHelpMask) to ImportWinHelpDialog(fileName))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setImportWinHelpMask(target->fileName());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(importWinHelpMask) to ImportWinHelpDialog(fileName))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFileName(source->importWinHelpMask());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySettings::importWinHelpMaskId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBFileDialog::pressedOkId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   IVBFileDialog * target;
   Boolean aligning;


};   //VyperConn400


//*****************************************************************************
// Class definition for VyperConn336
//*****************************************************************************
class VyperConn336 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn336(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyperWaitFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ImportWinHelpDialog(pressedOkEvent) to WaitFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyperWaitFactoryFactory * target;


};   //VyperConn336


//*****************************************************************************
// Class definition for VyperConn53
//*****************************************************************************
class VyperConn53 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn53(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn53 & setIString(IVBFileDialog * aSelf) {iIString = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ImportWinHelpDialog(pressedOkEvent) to File(importWinHelp))");
         try {target->importWinHelp(iIString->fileName());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyDoc * target;
   IVBFileDialog * iIString;


};   //VyperConn53

const INotificationId VyperConn53::exceptionId = "VyperConn53::exceptionId";

//*****************************************************************************
// Class definition for VyperConn65
//*****************************************************************************
class VyperConn65 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn65(unsigned long tid) {id = tid;};

   virtual  ~VyperConn65(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_ExportIpfChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportIpfChoice(commandEvent) to ExportIPFDialog(showModally))");
         try {target->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBFileDialog * target;
   unsigned long id;


};   //VyperConn65


//*****************************************************************************
// Class definition for VyperConn375
//*****************************************************************************
class VyperConn375 : public IObserver {
public:
   virtual  ~VyperConn375(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(exportIpfMask) to ExportIPFDialog(fileName))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setExportIpfMask(target->fileName());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(exportIpfMask) to ExportIPFDialog(fileName))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFileName(source->exportIpfMask());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySettings::exportIpfMaskId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBFileDialog::pressedOkId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   IVBFileDialog * target;
   Boolean aligning;


};   //VyperConn375


//*****************************************************************************
// Class definition for VyperConn56
//*****************************************************************************
class VyperConn56 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn56(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::createdId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportIPFDialog(createdEvent) to ExportIPFDialog(setSaveAsDialog))");
         try {target->setSaveAsDialog();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   IVBFileDialog * target;


};   //VyperConn56


//*****************************************************************************
// Class definition for VyperConn57
//*****************************************************************************
class VyperConn57 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn57(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::createdId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportTraceDialog(createdEvent) to ExportTraceDialog(setSaveAsDialog))");
         try {target->setSaveAsDialog();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   IVBFileDialog * target;


};   //VyperConn57


//*****************************************************************************
// Class definition for VyperConn386
//*****************************************************************************
class VyperConn386 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn386(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyperWaitFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportIPFDialog(pressedOkEvent) to WaitFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyperWaitFactoryFactory * target;


};   //VyperConn386


//*****************************************************************************
// Class definition for VyperConn68
//*****************************************************************************
class VyperConn68 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn68(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn68 & setIString(IVBFileDialog * aSelf) {iIString = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportIPFDialog(pressedOkEvent) to File(exportIPF))");
         try {target->exportIPF(iIString->fileName());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyDoc * target;
   IVBFileDialog * iIString;


};   //VyperConn68

const INotificationId VyperConn68::exceptionId = "VyperConn68::exceptionId";

//*****************************************************************************
// Class definition for VyperConn376
//*****************************************************************************
class VyperConn376 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn376(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyperWaitFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportTraceDialog(pressedOkEvent) to WaitFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyperWaitFactoryFactory * target;


};   //VyperConn376


//*****************************************************************************
// Class definition for VyperConn70
//*****************************************************************************
class VyperConn70 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn70(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn70 & setIString(IVBFileDialog * aSelf) {iIString = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportTraceDialog(pressedOkEvent) to File(exportTrace))");
         try {target->exportTrace(iIString->fileName());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyDoc * target;
   IVBFileDialog * iIString;


};   //VyperConn70

const INotificationId VyperConn70::exceptionId = "VyperConn70::exceptionId";

//*****************************************************************************
// Class definition for VyperConn62
//*****************************************************************************
class VyperConn62 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn62(unsigned long tid) {id = tid;};

   virtual  ~VyperConn62(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_ExportTestChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportTestChoice(commandEvent) to ExportTraceDialog(showModally))");
         try {target->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBFileDialog * target;
   unsigned long id;


};   //VyperConn62


//*****************************************************************************
// Class definition for VyperConn75
//*****************************************************************************
class VyperConn75 : public IObserver {
public:
   virtual  ~VyperConn75(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyDoc * aSource, IVBVariablePartPointer<VyDocProperties *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(this) to DocProperties(document))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->target()->getDocument()->setTarget(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDocProperties::document) && (target->target() == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyDoc * source;
   IVBVariablePartPointer<VyDocProperties *> * target;
   Boolean aligning;


};   //VyperConn75


//*****************************************************************************
// Class definition for VyperConn67
//*****************************************************************************
class VyperConn67 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn67(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperDocPropertiesFactoryFactory * aSource, IVBVariablePartPointer<VyDocProperties *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target) return(*this);
      if (anEvent.notificationId() == VyperDocPropertiesFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : DocPropertiesFactory(newEvent) to DocProperties(this))");
         try {target->setTarget((VyDocProperties *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperDocPropertiesFactoryFactory * source;
   IVBVariablePartPointer<VyDocProperties *> * target;


};   //VyperConn67


//*****************************************************************************
// Class definition for VyperConn78
//*****************************************************************************
class VyperConn78 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn78(unsigned long tid) {id = tid;};

   virtual  ~VyperConn78(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, VyperDocPropertiesFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_FilePropertiesChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FilePropertiesChoice(commandEvent) to DocPropertiesFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   VyperDocPropertiesFactoryFactory * target;
   unsigned long id;


};   //VyperConn78


//*****************************************************************************
// Class definition for VyperConn91
//*****************************************************************************
class VyperConn91 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn91(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperDocPropertiesFactoryFactory * aSource, IVBVariablePartPointer<VyDocProperties *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VyperDocPropertiesFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : DocPropertiesFactory(newEvent) to DocProperties(showModally))");
         try {target->target()->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperDocPropertiesFactoryFactory * source;
   IVBVariablePartPointer<VyDocProperties *> * target;


};   //VyperConn91


//*****************************************************************************
// Class definition for VyperConn101
//*****************************************************************************
class VyperConn101 : public IObserver {
public:
   virtual  ~VyperConn101(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, IVBVariablePartPointer<VyDocProperties *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to DocProperties(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->target()->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   IVBVariablePartPointer<VyDocProperties *> * target;
   Boolean aligning;


};   //VyperConn101


//*****************************************************************************
// Class definition for VyperConn72
//*****************************************************************************
class VyperConn72 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn72(unsigned long tid) {id = tid;};

   virtual  ~VyperConn72(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, VyperSectionPropertiesFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_SectionPropertiesChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionPropertiesChoice(commandEvent) to SectionPropertiesFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   VyperSectionPropertiesFactoryFactory * target;
   unsigned long id;


};   //VyperConn72


//*****************************************************************************
// Class definition for VyperConn73
//*****************************************************************************
class VyperConn73 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn73(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperSectionPropertiesFactoryFactory * aSource, IVBVariablePartPointer<VySectionProperties *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target) return(*this);
      if (anEvent.notificationId() == VyperSectionPropertiesFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionPropertiesFactory(newEvent) to SectionProperties(this))");
         try {target->setTarget((VySectionProperties *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperSectionPropertiesFactoryFactory * source;
   IVBVariablePartPointer<VySectionProperties *> * target;


};   //VyperConn73


//*****************************************************************************
// Class definition for VyperConn74
//*****************************************************************************
class VyperConn74 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn74(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperSectionPropertiesFactoryFactory * aSource, IVBVariablePartPointer<VySectionProperties *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VyperSectionPropertiesFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionPropertiesFactory(newEvent) to SectionProperties(showModally))");
         try {target->target()->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperSectionPropertiesFactoryFactory * source;
   IVBVariablePartPointer<VySectionProperties *> * target;


};   //VyperConn74


//*****************************************************************************
// Class definition for VyperConn85
//*****************************************************************************
class VyperConn85 : public IObserver {
public:
   virtual  ~VyperConn85(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VySection *> * aSource, IVBVariablePartPointer<VySectionProperties *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (!source) return;
      if (!target->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SelectedSection(this) to SectionProperties(section))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setTarget(target->target()->getSection()->target());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (!source) return;
      if (!target->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SelectedSection(this) to SectionProperties(section))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->target()->getSection()->setTarget(source->target());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source) return(*this);
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IVBVariablePartPointer<VySection *>::targetId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == VySectionProperties::section) && (target->target() == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VySection *> * source;
   IVBVariablePartPointer<VySectionProperties *> * target;
   Boolean aligning;


};   //VyperConn85


//*****************************************************************************
// Class definition for VyperConn76
//*****************************************************************************
class VyperConn76 : public IObserver {
public:
   virtual  ~VyperConn76(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, IVBVariablePartPointer<VySectionProperties *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to SectionProperties(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->target()->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   IVBVariablePartPointer<VySectionProperties *> * target;
   Boolean aligning;


};   //VyperConn76


//*****************************************************************************
// Class definition for VyperConn407
//*****************************************************************************
class VyperConn407 : public IObserver {
public:
   virtual  ~VyperConn407(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(exportTextMask) to ExportTextDialog(fileName))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setExportTextMask(target->fileName());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(exportTextMask) to ExportTextDialog(fileName))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFileName(source->exportTextMask());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySettings::exportTextMaskId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBFileDialog::pressedOkId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   IVBFileDialog * target;
   Boolean aligning;


};   //VyperConn407


//*****************************************************************************
// Class definition for VyperConn77
//*****************************************************************************
class VyperConn77 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn77(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::createdId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportTextDialog(createdEvent) to ExportTextDialog(setSaveAsDialog))");
         try {target->setSaveAsDialog();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   IVBFileDialog * target;


};   //VyperConn77


//*****************************************************************************
// Class definition for VyperConn396
//*****************************************************************************
class VyperConn396 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn396(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyperWaitFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportTextDialog(pressedOkEvent) to WaitFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyperWaitFactoryFactory * target;


};   //VyperConn396


//*****************************************************************************
// Class definition for VyperConn88
//*****************************************************************************
class VyperConn88 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn88(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn88 & setIString(IVBFileDialog * aSelf) {iIString = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportTextDialog(pressedOkEvent) to File(exportText))");
         try {target->exportText(iIString->fileName());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyDoc * target;
   IVBFileDialog * iIString;


};   //VyperConn88

const INotificationId VyperConn88::exceptionId = "VyperConn88::exceptionId";

//*****************************************************************************
// Class definition for VyperConn111
//*****************************************************************************
class VyperConn111 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn111(unsigned long tid) {id = tid;};

   virtual  ~VyperConn111(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_ExportTextChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportTextChoice(commandEvent) to ExportTextDialog(showModally))");
         try {target->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBFileDialog * target;
   unsigned long id;


};   //VyperConn111


//*****************************************************************************
// Class definition for VyperConn82
//*****************************************************************************
class VyperConn82 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn82(unsigned long tid) {id = tid;};

   virtual  ~VyperConn82(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_SectionUpChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionUpChoice(commandEvent) to File(moveSectionUp))");
         try {target->moveSectionUp();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   VyDoc * target;
   unsigned long id;


};   //VyperConn82

const INotificationId VyperConn82::exceptionId = "VyperConn82::exceptionId";

//*****************************************************************************
// Class definition for VyperConn83
//*****************************************************************************
class VyperConn83 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn83(unsigned long tid) {id = tid;};

   virtual  ~VyperConn83(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_SectionDownChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionDownChoice(commandEvent) to File(moveSectionDown))");
         try {target->moveSectionDown();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   VyDoc * target;
   unsigned long id;


};   //VyperConn83

const INotificationId VyperConn83::exceptionId = "VyperConn83::exceptionId";

//*****************************************************************************
// Class definition for VyperConn84
//*****************************************************************************
class VyperConn84 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn84(unsigned long tid) {id = tid;};

   virtual  ~VyperConn84(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_SectionPromoteChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionPromoteChoice(commandEvent) to File(promoteSection))");
         try {target->promoteSection();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   VyDoc * target;
   unsigned long id;


};   //VyperConn84

const INotificationId VyperConn84::exceptionId = "VyperConn84::exceptionId";

//*****************************************************************************
// Class definition for VyperConn95
//*****************************************************************************
class VyperConn95 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn95(unsigned long tid) {id = tid;};

   virtual  ~VyperConn95(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_SectionDemote)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionDemote(commandEvent) to File(demoteSection))");
         try {target->demoteSection();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   VyDoc * target;
   unsigned long id;


};   //VyperConn95

const INotificationId VyperConn95::exceptionId = "VyperConn95::exceptionId";

//*****************************************************************************
// Class definition for VyperConn86
//*****************************************************************************
class VyperConn86 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn86(unsigned long tid) {id = tid;};

   virtual  ~VyperConn86(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_FileExpandChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileExpandChoice(commandEvent) to SectionContainer(expandTree))");
         try {target->expandTree();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * target;
   unsigned long id;


};   //VyperConn86

const INotificationId VyperConn86::exceptionId = "VyperConn86::exceptionId";

//*****************************************************************************
// Class definition for VyperConn87
//*****************************************************************************
class VyperConn87 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn87(unsigned long tid) {id = tid;};

   virtual  ~VyperConn87(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_FileCollapseChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileCollapseChoice(commandEvent) to SectionContainer(collapseTree))");
         try {target->collapseTree();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * target;
   unsigned long id;


};   //VyperConn87

const INotificationId VyperConn87::exceptionId = "VyperConn87::exceptionId";

//*****************************************************************************
// Class definition for VyperConn98
//*****************************************************************************
class VyperConn98 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn98(unsigned long tid) {id = tid;};

   virtual  ~VyperConn98(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn98 & setObject(IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * aSelf) {iObject = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_SectionExpandChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionExpandChoice(commandEvent) to SectionContainer(expand))");
         try {target->expand(iObject->cursoredObject());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * target;
   IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * iObject;
   unsigned long id;


};   //VyperConn98

const INotificationId VyperConn98::exceptionId = "VyperConn98::exceptionId";

//*****************************************************************************
// Class definition for VyperConn100
//*****************************************************************************
class VyperConn100 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn100(unsigned long tid) {id = tid;};

   virtual  ~VyperConn100(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn100 & setObject(IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * aSelf) {iObject = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_SectionCollapseChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionCollapseChoice(commandEvent) to SectionContainer(collapse))");
         try {target->collapse(iObject->cursoredObject());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * target;
   IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * iObject;
   unsigned long id;


};   //VyperConn100

const INotificationId VyperConn100::exceptionId = "VyperConn100::exceptionId";

//*****************************************************************************
// Class definition for VyperConn92
//*****************************************************************************
class VyperConn92 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn92(unsigned long tid) {id = tid;};

   virtual  ~VyperConn92(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_SectionCopyChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionCopyChoice(commandEvent) to SelectedSection(copy))");
         try {target->target()->copy();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<VySection *> * target;
   unsigned long id;


};   //VyperConn92

const INotificationId VyperConn92::exceptionId = "VyperConn92::exceptionId";

//*****************************************************************************
// Class definition for VyperConn94
//*****************************************************************************
class VyperConn94 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn94(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Confirmation * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == Confirmation::confirmedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ConfirmSectionPaste(confirmed) to SelectedSection(paste))");
         try {target->target()->paste();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Confirmation * source;
   IVBVariablePartPointer<VySection *> * target;


};   //VyperConn94

const INotificationId VyperConn94::exceptionId = "VyperConn94::exceptionId";

//*****************************************************************************
// Class definition for VyperConn96
//*****************************************************************************
class VyperConn96 : public IObserver {
public:
   virtual  ~VyperConn96(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyDoc * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(selectedSection) to SelectedSection(this))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setTarget(source->selectedSection());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::selectedSectionId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBVariablePartPointer<VySection *>::targetId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyDoc * source;
   IVBVariablePartPointer<VySection *> * target;
   Boolean aligning;


};   //VyperConn96


//*****************************************************************************
// Class definition for VyperConn97
//*****************************************************************************
class VyperConn97 : public IObserver {
public:
   virtual  ~VyperConn97(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyDoc * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(openedSection) to OpenedSection(this))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setTarget(source->openedSection());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::openedSectionId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBVariablePartPointer<VySection *>::targetId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyDoc * source;
   IVBVariablePartPointer<VySection *> * target;
   Boolean aligning;


};   //VyperConn97


//*****************************************************************************
// Class definition for VyperConn108
//*****************************************************************************
class VyperConn108 : public IObserver {
public:
   virtual  ~VyperConn108(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VySection *> * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!source->target()) return;
      if (!target) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : OpenedSection(editor) to Editor(this))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setTarget(source->target()->editor());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (!target) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySection::editorId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBVariablePartPointer<Editor *>::targetId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VySection *> * source;
   IVBVariablePartPointer<Editor *> * target;
   Boolean aligning;


};   //VyperConn108


//*****************************************************************************
// Class definition for VyperConn119
//*****************************************************************************
class VyperConn119 : public IObserver {
public:
   virtual  ~VyperConn119(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to SelectedSection(frame))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->target()->setFrame(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySection::frameId) && (target->target() == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   IVBVariablePartPointer<VySection *> * target;
   Boolean aligning;


};   //VyperConn119


//*****************************************************************************
// Class definition for VyperConn110
//*****************************************************************************
class VyperConn110 : public IObserver {
public:
   virtual  ~VyperConn110(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to OpenedSection(frame))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->target()->setFrame(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySection::frameId) && (target->target() == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   IVBVariablePartPointer<VySection *> * target;
   Boolean aligning;


};   //VyperConn110


//*****************************************************************************
// Class definition for VyperConn129
//*****************************************************************************
class VyperConn129 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn129(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IViewPort * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IViewPort::sizeId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperPort(size) to Editor(resize))");
         try {target->target()->resize();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IViewPort * source;
   IVBVariablePartPointer<Editor *> * target;


};   //VyperConn129


//*****************************************************************************
// Class definition for VyperConn120
//*****************************************************************************
class VyperConn120 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn120(unsigned long tid) {id = tid;};

   virtual  ~VyperConn120(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_EditDeleteChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : EditDeleteChoice(commandEvent) to Editor(deleteItems))");
         try {target->target()->deleteItems();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<Editor *> * target;
   unsigned long id;


};   //VyperConn120

const INotificationId VyperConn120::exceptionId = "VyperConn120::exceptionId";

//*****************************************************************************
// Class definition for VyperConn131
//*****************************************************************************
class VyperConn131 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn131(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Vyper * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Vyper::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to Editor(autoDeleteTarget))");
         try {target->setAutoDeleteTarget(false);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Vyper * source;
   IVBVariablePartPointer<Editor *> * target;


};   //VyperConn131


//*****************************************************************************
// Class definition for VyperConn102
//*****************************************************************************
class VyperConn102 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn102(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VySection *> * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VySection::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : OpenedSection(ready) to OpenedSection(autoDeleteTarget))");
         try {target->setAutoDeleteTarget(false);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VySection *> * source;
   IVBVariablePartPointer<VySection *> * target;


};   //VyperConn102


//*****************************************************************************
// Class definition for VyperConn103
//*****************************************************************************
class VyperConn103 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn103(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VySection *> * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VySection::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SelectedSection(ready) to SelectedSection(autoDeleteTarget))");
         try {target->setAutoDeleteTarget(false);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VySection *> * source;
   IVBVariablePartPointer<VySection *> * target;


};   //VyperConn103


//*****************************************************************************
// Class definition for VyperConn104
//*****************************************************************************
class VyperConn104 : public IObserver {
public:
   virtual  ~VyperConn104(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<Editor *> * aSource, IInfoArea * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Editor(info) to InfoArea1(inactiveText))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setInactiveText(source->target()->info());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Editor::infoId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IInfoArea::inactiveTextId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<Editor *> * source;
   IInfoArea * target;
   Boolean aligning;


};   //VyperConn104


//*****************************************************************************
// Class definition for VyperConn105
//*****************************************************************************
class VyperConn105 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn105(unsigned long tid) {id = tid;};

   virtual  ~VyperConn105(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_EditCutChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : EditCutChoice(commandEvent) to OpenedSection(cutSelection))");
         try {target->target()->cutSelection();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<VySection *> * target;
   unsigned long id;


};   //VyperConn105

const INotificationId VyperConn105::exceptionId = "VyperConn105::exceptionId";

//*****************************************************************************
// Class definition for VyperConn106
//*****************************************************************************
class VyperConn106 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn106(unsigned long tid) {id = tid;};

   virtual  ~VyperConn106(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_EditCopyChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : EditCopyChoice(commandEvent) to OpenedSection(copySelection))");
         try {target->target()->copySelection();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<VySection *> * target;
   unsigned long id;


};   //VyperConn106

const INotificationId VyperConn106::exceptionId = "VyperConn106::exceptionId";

//*****************************************************************************
// Class definition for VyperConn107
//*****************************************************************************
class VyperConn107 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn107(unsigned long tid) {id = tid;};

   virtual  ~VyperConn107(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_EditPasteChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : EditPasteChoice(commandEvent) to OpenedSection(pasteToEditor))");
         try {target->target()->pasteToEditor();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<VySection *> * target;
   unsigned long id;


};   //VyperConn107

const INotificationId VyperConn107::exceptionId = "VyperConn107::exceptionId";

//*****************************************************************************
// Class definition for VyperConn118
//*****************************************************************************
class VyperConn118 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn118(unsigned long tid) {id = tid;};

   virtual  ~VyperConn118(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_BoldOnChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : BoldOnChoice(commandEvent) to Editor(insertBold))");
         try {target->target()->insertBold();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<Editor *> * target;
   unsigned long id;


};   //VyperConn118

const INotificationId VyperConn118::exceptionId = "VyperConn118::exceptionId";

//*****************************************************************************
// Class definition for VyperConn139
//*****************************************************************************
class VyperConn139 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn139(unsigned long tid) {id = tid;};

   virtual  ~VyperConn139(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_BoldOffChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : BoldOffChoice(commandEvent) to Editor(insertBold))");
         try {target->target()->insertBold(false);}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<Editor *> * target;
   unsigned long id;


};   //VyperConn139

const INotificationId VyperConn139::exceptionId = "VyperConn139::exceptionId";

//*****************************************************************************
// Class definition for VyperConn130
//*****************************************************************************
class VyperConn130 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn130(unsigned long tid) {id = tid;};

   virtual  ~VyperConn130(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_ItalicOnChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ItalicOnChoice(commandEvent) to Editor(insertItalic))");
         try {target->target()->insertItalic();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<Editor *> * target;
   unsigned long id;


};   //VyperConn130

const INotificationId VyperConn130::exceptionId = "VyperConn130::exceptionId";

//*****************************************************************************
// Class definition for VyperConn141
//*****************************************************************************
class VyperConn141 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn141(unsigned long tid) {id = tid;};

   virtual  ~VyperConn141(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_ItalicOffChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ItalicOffChoice(commandEvent) to Editor(insertItalic))");
         try {target->target()->insertItalic(false);}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<Editor *> * target;
   unsigned long id;


};   //VyperConn141

const INotificationId VyperConn141::exceptionId = "VyperConn141::exceptionId";

//*****************************************************************************
// Class definition for VyperConn112
//*****************************************************************************
class VyperConn112 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn112(unsigned long tid) {id = tid;};

   virtual  ~VyperConn112(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_UnderlineOnChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : UnderlineOnChoice(commandEvent) to Editor(insertUnderline))");
         try {target->target()->insertUnderline(true);}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<Editor *> * target;
   unsigned long id;


};   //VyperConn112

const INotificationId VyperConn112::exceptionId = "VyperConn112::exceptionId";

//*****************************************************************************
// Class definition for VyperConn113
//*****************************************************************************
class VyperConn113 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn113(unsigned long tid) {id = tid;};

   virtual  ~VyperConn113(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_UnderlineOffChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : UnderlineOffChoice(commandEvent) to Editor(insertUnderline))");
         try {target->target()->insertUnderline(false);}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<Editor *> * target;
   unsigned long id;


};   //VyperConn113

const INotificationId VyperConn113::exceptionId = "VyperConn113::exceptionId";

//*****************************************************************************
// Class definition for VyperConn114
//*****************************************************************************
class VyperConn114 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn114(unsigned long tid) {id = tid;};

   virtual  ~VyperConn114(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_InsertParagraphChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertParagraphChoice(commandEvent) to Editor(insertParagraph))");
         try {target->target()->insertParagraph();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<Editor *> * target;
   unsigned long id;


};   //VyperConn114

const INotificationId VyperConn114::exceptionId = "VyperConn114::exceptionId";

//*****************************************************************************
// Class definition for VyperConn115
//*****************************************************************************
class VyperConn115 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn115(unsigned long tid) {id = tid;};

   virtual  ~VyperConn115(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_InsertLineChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertLineChoice(commandEvent) to Editor(insertNewLine))");
         try {target->target()->insertNewLine();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<Editor *> * target;
   unsigned long id;


};   //VyperConn115

const INotificationId VyperConn115::exceptionId = "VyperConn115::exceptionId";

//*****************************************************************************
// Class definition for VyperConn116
//*****************************************************************************
class VyperConn116 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn116(unsigned long tid) {id = tid;};

   virtual  ~VyperConn116(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBFontDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_InsertFontChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertFontChoice(commandEvent) to InsertFont(showModally))");
         try {target->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBFontDialog * target;
   unsigned long id;


};   //VyperConn116


//*****************************************************************************
// Class definition for VyperConn117
//*****************************************************************************
class VyperConn117 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn117(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFontDialog * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn117 & setInfo(IVBFontDialog * aSelf) {iInfo = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IVBFontDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertFont(pressedOkEvent) to Editor(insertFont))");
         try {target->target()->insertFont(iInfo->font());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFontDialog * source;
   IVBVariablePartPointer<Editor *> * target;
   IVBFontDialog * iInfo;


};   //VyperConn117

const INotificationId VyperConn117::exceptionId = "VyperConn117::exceptionId";

//*****************************************************************************
// Class definition for VyperConn240
//*****************************************************************************
class VyperConn240 : public IObserver {
public:
   virtual  ~VyperConn240(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVSequence< VySymbol* > * aSource, IVBVariablePartPointer<VySymbolSelector *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : AllSymbols(this) to SymbolSelector(containerItems))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->target()->getSymbols()->setItems(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySymbolSelector::containerItems) && (target->target() == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVSequence< VySymbol* > * source;
   IVBVariablePartPointer<VySymbolSelector *> * target;
   Boolean aligning;


};   //VyperConn240


//*****************************************************************************
// Class definition for VyperConn151
//*****************************************************************************
class VyperConn151 : public IObserver {
public:
   virtual  ~VyperConn151(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, IVBVariablePartPointer<VySymbolSelector *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to SymbolSelector(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->target()->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   IVBVariablePartPointer<VySymbolSelector *> * target;
   Boolean aligning;


};   //VyperConn151


//*****************************************************************************
// Class definition for VyperConn213
//*****************************************************************************
class VyperConn213 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn213(unsigned long tid) {id = tid;};

   virtual  ~VyperConn213(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, Vyper * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_InsertSymbolChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertSymbolChoice(commandEvent) to (loadSymbols))");
         try {target->loadSymbols();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   Vyper * target;
   unsigned long id;


};   //VyperConn213


//*****************************************************************************
// Class definition for VyperConn124
//*****************************************************************************
class VyperConn124 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn124(unsigned long tid) {id = tid;};

   virtual  ~VyperConn124(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, VyperSymbolSelectorFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_InsertSymbolChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertSymbolChoice(commandEvent) to SymbolSelectorFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   VyperSymbolSelectorFactoryFactory * target;
   unsigned long id;


};   //VyperConn124


//*****************************************************************************
// Class definition for VyperConn125
//*****************************************************************************
class VyperConn125 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn125(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperSymbolSelectorFactoryFactory * aSource, IVBVariablePartPointer<VySymbolSelector *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target) return(*this);
      if (anEvent.notificationId() == VyperSymbolSelectorFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SymbolSelectorFactory(newEvent) to SymbolSelector(this))");
         try {target->setTarget((VySymbolSelector *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperSymbolSelectorFactoryFactory * source;
   IVBVariablePartPointer<VySymbolSelector *> * target;


};   //VyperConn125


//*****************************************************************************
// Class definition for VyperConn137
//*****************************************************************************
class VyperConn137 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn137(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Vyper * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Vyper::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to VyperFrame(setFocus))");
         try {target->setFocus();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Vyper * source;
   IFrameWindow * target;


};   //VyperConn137


//*****************************************************************************
// Class definition for VyperConn148
//*****************************************************************************
class VyperConn148 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn148(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Vyper * aSource, IVBFontDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Vyper::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to InsertFont(font))");
         try {target->setFont(IFont());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Vyper * source;
   IVBFontDialog * target;


};   //VyperConn148


//*****************************************************************************
// Class definition for VyperConn149
//*****************************************************************************
class VyperConn149 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn149(unsigned long tid) {id = tid;};

   virtual  ~VyperConn149(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, VyperInsertLinkFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_InsertLinkChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertLinkChoice(commandEvent) to InsertLinkFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   VyperInsertLinkFactoryFactory * target;
   unsigned long id;


};   //VyperConn149


//*****************************************************************************
// Class definition for VyperConn140
//*****************************************************************************
class VyperConn140 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn140(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyLinkProperties *> * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn140 & setLink(IVBVariablePartPointer<VyLinkProperties *> * aSelf) {iLink = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VyLinkProperties::insertLinkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertLink(insertLink) to Editor(insertLink))");
         try {target->target()->insertLink(iLink->target()->getLink()->gin());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyLinkProperties *> * source;
   IVBVariablePartPointer<Editor *> * target;
   IVBVariablePartPointer<VyLinkProperties *> * iLink;


};   //VyperConn140

const INotificationId VyperConn140::exceptionId = "VyperConn140::exceptionId";

//*****************************************************************************
// Class definition for VyperConn143
//*****************************************************************************
class VyperConn143 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn143(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperInsertLinkFactoryFactory * aSource, IVBVariablePartPointer<VyLinkProperties *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target) return(*this);
      if (anEvent.notificationId() == VyperInsertLinkFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertLinkFactory(newEvent) to InsertLink(this))");
         try {target->setTarget((VyLinkProperties *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperInsertLinkFactoryFactory * source;
   IVBVariablePartPointer<VyLinkProperties *> * target;


};   //VyperConn143


//*****************************************************************************
// Class definition for VyperConn136
//*****************************************************************************
class VyperConn136 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn136(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperInsertLinkFactoryFactory * aSource, IVBVariablePartPointer<VyLinkProperties *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn136 & setThis(VyDoc * aSelf) {iThis = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VyperInsertLinkFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertLinkFactory(newEvent) to InsertLink(document))");
         try {target->target()->getDocument()->setTarget(iThis);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperInsertLinkFactoryFactory * source;
   IVBVariablePartPointer<VyLinkProperties *> * target;
   VyDoc * iThis;


};   //VyperConn136


//*****************************************************************************
// Class definition for VyperConn134
//*****************************************************************************
class VyperConn134 : public IObserver {
public:
   virtual  ~VyperConn134(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, IVBVariablePartPointer<VyLinkProperties *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to InsertLink(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->target()->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   IVBVariablePartPointer<VyLinkProperties *> * target;
   Boolean aligning;


};   //VyperConn134


//*****************************************************************************
// Class definition for VyperConn157
//*****************************************************************************
class VyperConn157 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn157(unsigned long tid) {id = tid;};

   virtual  ~VyperConn157(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_EditPropertiesChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : EditPropertiesChoice(commandEvent) to Editor(editProperties))");
         try {target->target()->editProperties();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<Editor *> * target;
   unsigned long id;


};   //VyperConn157

const INotificationId VyperConn157::exceptionId = "VyperConn157::exceptionId";

//*****************************************************************************
// Class definition for VyperConn150
//*****************************************************************************
class VyperConn150 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn150(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<Editor *> * aSource, VyFont * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == Editor::editFontId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Editor(editFont) to Font(item))");
         try {target->setItem((FontItem*) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<Editor *> * source;
   VyFont * target;


};   //VyperConn150


//*****************************************************************************
// Class definition for VyperConn171
//*****************************************************************************
class VyperConn171 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn171(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<Editor *> * aSource, IVBFontDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == Editor::editFontId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Editor(editFont) to EditFont(showModally))");
         try {target->showModally(0);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<Editor *> * source;
   IVBFontDialog * target;


};   //VyperConn171


//*****************************************************************************
// Class definition for VyperConn158
//*****************************************************************************
class VyperConn158 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn158(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<Editor *> * aSource, VyperInsertLinkFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == Editor::editLinkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Editor(editLink) to InsertLinkFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<Editor *> * source;
   VyperInsertLinkFactoryFactory * target;


};   //VyperConn158


//*****************************************************************************
// Class definition for VyperConn142
//*****************************************************************************
class VyperConn142 : public IObserver {
public:
   virtual  ~VyperConn142(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyFont * aSource, IVBFontDialog * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Font(font) to EditFont(font))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setFont(target->font());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Font(font) to EditFont(font))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFont(source->font());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyFont::fontId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBFontDialog::pressedOkId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyFont * source;
   IVBFontDialog * target;
   Boolean aligning;


};   //VyperConn142


//*****************************************************************************
// Class definition for VyperConn153
//*****************************************************************************
class VyperConn153 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn153(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFontDialog * aSource, VyFont * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn153 & setAFont(IVBFontDialog * aSelf) {iAFont = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFontDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : EditFont(pressedOkEvent) to Font(font))");
         try {target->setFont(iAFont->font());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFontDialog * source;
   VyFont * target;
   IVBFontDialog * iAFont;


};   //VyperConn153


//*****************************************************************************
// Class definition for VyperConn145
//*****************************************************************************
class VyperConn145 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn145(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<Editor *> * aSource, IVBVariablePartPointer<VyLinkProperties *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == Editor::editLinkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Editor(editLink) to InsertLink(linkItem))");
         try {target->target()->setLinkItem((LinkItem*) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<Editor *> * source;
   IVBVariablePartPointer<VyLinkProperties *> * target;


};   //VyperConn145


//*****************************************************************************
// Class definition for VyperConn133
//*****************************************************************************
class VyperConn133 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn133(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<Editor *> * aSource, IVBVariablePartPointer<VyLinkProperties *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == Editor::editLinkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Editor(editLink) to InsertLink(showModally))");
         try {target->target()->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<Editor *> * source;
   IVBVariablePartPointer<VyLinkProperties *> * target;


};   //VyperConn133


//*****************************************************************************
// Class definition for VyperConn155
//*****************************************************************************
class VyperConn155 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn155(unsigned long tid) {id = tid;};

   virtual  ~VyperConn155(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<VyLinkProperties *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_InsertLinkChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertLinkChoice(commandEvent) to InsertLink(showModally))");
         try {target->target()->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<VyLinkProperties *> * target;
   unsigned long id;


};   //VyperConn155


//*****************************************************************************
// Class definition for VyperConn167
//*****************************************************************************
class VyperConn167 : public IObserver {
public:
   virtual  ~VyperConn167(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to ConfirmSectionDelete(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Confirmation::ownerId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   Confirmation * target;
   Boolean aligning;


};   //VyperConn167


//*****************************************************************************
// Class definition for VyperConn168
//*****************************************************************************
class VyperConn168 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn168(unsigned long tid) {id = tid;};

   virtual  ~VyperConn168(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_SectionDeleteChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionDeleteChoice(commandEvent) to ConfirmSectionDelete(show))");
         try {target->show();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   Confirmation * target;
   unsigned long id;


};   //VyperConn168


//*****************************************************************************
// Class definition for VyperConn159
//*****************************************************************************
class VyperConn159 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn159(unsigned long tid) {id = tid;};

   virtual  ~VyperConn159(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_SectionPasteChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionPasteChoice(commandEvent) to ConfirmSectionPaste(show))");
         try {target->show();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   Confirmation * target;
   unsigned long id;


};   //VyperConn159


//*****************************************************************************
// Class definition for VyperConn160
//*****************************************************************************
class VyperConn160 : public IObserver {
public:
   virtual  ~VyperConn160(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to ConfirmSectionPaste(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Confirmation::ownerId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   Confirmation * target;
   Boolean aligning;


};   //VyperConn160


//*****************************************************************************
// Class definition for VyperConn154
//*****************************************************************************
class VyperConn154 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn154(unsigned long tid) {id = tid;};

   virtual  ~VyperConn154(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(LogicalNot * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : NotOpen(output) to FileExportChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_FileExportChoice).setDisabled(source->output()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == LogicalNot::outputId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   LogicalNot * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn154


//*****************************************************************************
// Class definition for VyperConn178
//*****************************************************************************
class VyperConn178 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn178(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VySection *> * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn178 & setSection(IVBVariablePartPointer<VySection *> * aSelf) {iSection = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VySection::modifiedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SelectedSection(modified) to File(checkSection))");
         try {target->checkSection(iSection->target());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VySection *> * source;
   VyDoc * target;
   IVBVariablePartPointer<VySection *> * iSection;


};   //VyperConn178


//*****************************************************************************
// Class definition for VyperConn169
//*****************************************************************************
class VyperConn169 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn169(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VySection *> * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn169 & setSection(IVBVariablePartPointer<VySection *> * aSelf) {iSection = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VySection::modifiedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : OpenedSection(modified) to File(checkSection))");
         try {target->checkSection(iSection->target());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VySection *> * source;
   VyDoc * target;
   IVBVariablePartPointer<VySection *> * iSection;


};   //VyperConn169


//*****************************************************************************
// Class definition for VyperConn162
//*****************************************************************************
class VyperConn162 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn162(unsigned long tid) {id = tid;};

   virtual  ~VyperConn162(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(LogicalNot * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : NotOpen(output) to SectionChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_SectionChoice).setDisabled(source->output()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == LogicalNot::outputId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   LogicalNot * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn162


//*****************************************************************************
// Class definition for VyperConn190
//*****************************************************************************
class VyperConn190 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn190(unsigned long tid) {id = tid;};

   virtual  ~VyperConn190(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(LogicalNot * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : NotOpen(output) to FileSaveAsChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_FileSaveAsChoice).setDisabled(source->output()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == LogicalNot::outputId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   LogicalNot * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn190


//*****************************************************************************
// Class definition for VyperConn181
//*****************************************************************************
class VyperConn181 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn181(unsigned long tid) {id = tid;};

   virtual  ~VyperConn181(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(LogicalNot * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : NotOpen(output) to FileCloseChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_FileCloseChoice).setDisabled(source->output()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == LogicalNot::outputId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   LogicalNot * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn181


//*****************************************************************************
// Class definition for VyperConn152
//*****************************************************************************
class VyperConn152 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn152(unsigned long tid) {id = tid;};

   virtual  ~VyperConn152(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(LogicalNot * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : NotOpen(output) to FilePropertiesChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_FilePropertiesChoice).setDisabled(source->output()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == LogicalNot::outputId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   LogicalNot * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn152


//*****************************************************************************
// Class definition for VyperConn163
//*****************************************************************************
class VyperConn163 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn163(unsigned long tid) {id = tid;};

   virtual  ~VyperConn163(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_FileNewChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileNewChoice(commandEvent) to ConfirmFileNew(show))");
         try {target->show();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   Confirmation * target;
   unsigned long id;


};   //VyperConn163


//*****************************************************************************
// Class definition for VyperConn174
//*****************************************************************************
class VyperConn174 : public IObserver {
public:
   virtual  ~VyperConn174(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to ConfirmFileNew(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Confirmation::ownerId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   Confirmation * target;
   Boolean aligning;


};   //VyperConn174


//*****************************************************************************
// Class definition for VyperConn165
//*****************************************************************************
class VyperConn165 : public IObserver {
public:
   virtual  ~VyperConn165(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyDoc * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(modified) to ConfirmFileNew(enabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setEnabled(source->isModified());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::modifiedId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == Confirmation::enabledId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyDoc * source;
   Confirmation * target;
   Boolean aligning;


};   //VyperConn165


//*****************************************************************************
// Class definition for VyperConn156
//*****************************************************************************
class VyperConn156 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn156(unsigned long tid) {id = tid;};

   virtual  ~VyperConn156(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_FileOpenChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileOpenChoice(commandEvent) to ConfirmFileOpen(show))");
         try {target->show();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   Confirmation * target;
   unsigned long id;


};   //VyperConn156


//*****************************************************************************
// Class definition for VyperConn177
//*****************************************************************************
class VyperConn177 : public IObserver {
public:
   virtual  ~VyperConn177(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to ConfirmFileOpen(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Confirmation::ownerId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   Confirmation * target;
   Boolean aligning;


};   //VyperConn177


//*****************************************************************************
// Class definition for VyperConn188
//*****************************************************************************
class VyperConn188 : public IObserver {
public:
   virtual  ~VyperConn188(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyDoc * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(modified) to ConfirmFileOpen(enabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setEnabled(source->isModified());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::modifiedId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == Confirmation::enabledId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyDoc * source;
   Confirmation * target;
   Boolean aligning;


};   //VyperConn188


//*****************************************************************************
// Class definition for VyperConn189
//*****************************************************************************
class VyperConn189 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn189(unsigned long tid) {id = tid;};

   virtual  ~VyperConn189(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_FileCloseChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileCloseChoice(commandEvent) to ComfirmFileClose(show))");
         try {target->show();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   Confirmation * target;
   unsigned long id;


};   //VyperConn189


//*****************************************************************************
// Class definition for VyperConn200
//*****************************************************************************
class VyperConn200 : public IObserver {
public:
   virtual  ~VyperConn200(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyDoc * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(modified) to ComfirmFileClose(enabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setEnabled(source->isModified());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::modifiedId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == Confirmation::enabledId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyDoc * source;
   Confirmation * target;
   Boolean aligning;


};   //VyperConn200


//*****************************************************************************
// Class definition for VyperConn201
//*****************************************************************************
class VyperConn201 : public IObserver {
public:
   virtual  ~VyperConn201(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to ComfirmFileClose(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Confirmation::ownerId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   Confirmation * target;
   Boolean aligning;


};   //VyperConn201


//*****************************************************************************
// Class definition for VyperConn172
//*****************************************************************************
class VyperConn172 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn172(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Confirmation * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Confirmation::confirmedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ConfirmImportText(confirmed) to ImportTextDialog(showModally))");
         try {target->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Confirmation * source;
   IVBFileDialog * target;


};   //VyperConn172


//*****************************************************************************
// Class definition for VyperConn183
//*****************************************************************************
class VyperConn183 : public IObserver {
public:
   virtual  ~VyperConn183(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to ConfirmImportText(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Confirmation::ownerId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   Confirmation * target;
   Boolean aligning;


};   //VyperConn183


//*****************************************************************************
// Class definition for VyperConn184
//*****************************************************************************
class VyperConn184 : public IObserver {
public:
   virtual  ~VyperConn184(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyDoc * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(modified) to ConfirmImportText(enabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setEnabled(source->isModified());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::modifiedId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == Confirmation::enabledId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyDoc * source;
   Confirmation * target;
   Boolean aligning;


};   //VyperConn184


//*****************************************************************************
// Class definition for VyperConn175
//*****************************************************************************
class VyperConn175 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn175(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Confirmation * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Confirmation::confirmedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ConfirmImportWinHelp(confirmed) to ImportWinHelpDialog(showModally))");
         try {target->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Confirmation * source;
   IVBFileDialog * target;


};   //VyperConn175


//*****************************************************************************
// Class definition for VyperConn166
//*****************************************************************************
class VyperConn166 : public IObserver {
public:
   virtual  ~VyperConn166(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to ConfirmImportWinHelp(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Confirmation::ownerId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   Confirmation * target;
   Boolean aligning;


};   //VyperConn166


//*****************************************************************************
// Class definition for VyperConn187
//*****************************************************************************
class VyperConn187 : public IObserver {
public:
   virtual  ~VyperConn187(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyDoc * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(modified) to ConfirmImportWinHelp(enabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setEnabled(source->isModified());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::modifiedId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == Confirmation::enabledId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyDoc * source;
   Confirmation * target;
   Boolean aligning;


};   //VyperConn187


//*****************************************************************************
// Class definition for VyperConn197
//*****************************************************************************
class VyperConn197 : public IObserver {
public:
   virtual  ~VyperConn197(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyDoc * aSource, LogicalNot * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(opened) to NotOpen(input))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setInput(source->isOpened());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::openedId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == LogicalNot::inputId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyDoc * source;
   LogicalNot * target;
   Boolean aligning;


};   //VyperConn197


//*****************************************************************************
// Class definition for VyperConn207
//*****************************************************************************
class VyperConn207 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn207(unsigned long tid) {id = tid;};

   virtual  ~VyperConn207(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyDoc * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(unnamed) to FileSaveChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_FileSaveChoice).setDisabled(source->isUnnamed()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::unnamedId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyDoc * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn207


//*****************************************************************************
// Class definition for VyperConn217
//*****************************************************************************
class VyperConn217 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn217(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Vyper * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Vyper::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to File(loadStartup))");
         try {target->loadStartup();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Vyper * source;
   VyDoc * target;


};   //VyperConn217


//*****************************************************************************
// Class definition for VyperConn198
//*****************************************************************************
class VyperConn198 : public IObserver {
public:
   virtual  ~VyperConn198(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, ITitle * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to TitleBar(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   ITitle * target;
   Boolean aligning;


};   //VyperConn198


//*****************************************************************************
// Class definition for VyperConn179
//*****************************************************************************
class VyperConn179 : public IObserver {
public:
   virtual  ~VyperConn179(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyDoc * aSource, ITitle * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(windowTitle) to TitleBar(viewText))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setViewText(source->windowTitle());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::windowTitleId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == ITitle::viewTextId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyDoc * source;
   ITitle * target;
   Boolean aligning;


};   //VyperConn179


//*****************************************************************************
// Class definition for VyperConn170
//*****************************************************************************
class VyperConn170 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn170(unsigned long tid) {id = tid;};

   virtual  ~VyperConn170(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VySection *> * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : OpenedSection(closed) to EditChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_EditChoice).setDisabled(source->target()->isClosed()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySection::closedId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VySection *> * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn170


//*****************************************************************************
// Class definition for VyperConn210
//*****************************************************************************
class VyperConn210 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn210(unsigned long tid) {id = tid;};

   virtual  ~VyperConn210(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VySection *> * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : OpenedSection(closed) to InsertChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_InsertChoice).setDisabled(source->target()->isClosed()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySection::closedId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VySection *> * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn210


//*****************************************************************************
// Class definition for VyperConn220
//*****************************************************************************
class VyperConn220 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn220(unsigned long tid) {id = tid;};

   virtual  ~VyperConn220(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VySection *> * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : OpenedSection(closed) to SectionCloseChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_SectionCloseChoice).setDisabled(source->target()->isClosed()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySection::closedId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VySection *> * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn220


//*****************************************************************************
// Class definition for VyperConn211
//*****************************************************************************
class VyperConn211 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn211(unsigned long tid) {id = tid;};

   virtual  ~VyperConn211(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariableClass<Boolean> * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionOpenChoice(disabled))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setTarget(target->menuItem(id+WNDOFFSET_Vyper_SectionOpenChoice).isDisabled());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionOpenChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_SectionOpenChoice).setDisabled(source->target()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IVBVariableClass<Boolean>::targetId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariableClass<Boolean> * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn211


//*****************************************************************************
// Class definition for VyperConn182
//*****************************************************************************
class VyperConn182 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn182(unsigned long tid) {id = tid;};

   virtual  ~VyperConn182(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariableClass<Boolean> * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionCopyChoice(disabled))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setTarget(target->menuItem(id+WNDOFFSET_Vyper_SectionCopyChoice).isDisabled());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionCopyChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_SectionCopyChoice).setDisabled(source->target()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IVBVariableClass<Boolean>::targetId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariableClass<Boolean> * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn182


//*****************************************************************************
// Class definition for VyperConn173
//*****************************************************************************
class VyperConn173 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn173(unsigned long tid) {id = tid;};

   virtual  ~VyperConn173(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariableClass<Boolean> * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionPasteChoice(disabled))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setTarget(target->menuItem(id+WNDOFFSET_Vyper_SectionPasteChoice).isDisabled());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionPasteChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_SectionPasteChoice).setDisabled(source->target()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IVBVariableClass<Boolean>::targetId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariableClass<Boolean> * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn173


//*****************************************************************************
// Class definition for VyperConn194
//*****************************************************************************
class VyperConn194 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn194(unsigned long tid) {id = tid;};

   virtual  ~VyperConn194(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariableClass<Boolean> * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionDeleteChoice(disabled))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setTarget(target->menuItem(id+WNDOFFSET_Vyper_SectionDeleteChoice).isDisabled());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionDeleteChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_SectionDeleteChoice).setDisabled(source->target()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IVBVariableClass<Boolean>::targetId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariableClass<Boolean> * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn194


//*****************************************************************************
// Class definition for VyperConn185
//*****************************************************************************
class VyperConn185 : public IObserver {
public:
   virtual  ~VyperConn185(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyDoc * aSource, IVBVariableClass<Boolean> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(empty) to FileEmpty(this))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setTarget(source->isEmpty());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::emptyId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBVariableClass<Boolean>::targetId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyDoc * source;
   IVBVariableClass<Boolean> * target;
   Boolean aligning;


};   //VyperConn185


//*****************************************************************************
// Class definition for VyperConn176
//*****************************************************************************
class VyperConn176 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn176(unsigned long tid) {id = tid;};

   virtual  ~VyperConn176(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariableClass<Boolean> * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionPromoteChoice(disabled))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setTarget(target->menuItem(id+WNDOFFSET_Vyper_SectionPromoteChoice).isDisabled());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionPromoteChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_SectionPromoteChoice).setDisabled(source->target()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IVBVariableClass<Boolean>::targetId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariableClass<Boolean> * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn176


//*****************************************************************************
// Class definition for VyperConn227
//*****************************************************************************
class VyperConn227 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn227(unsigned long tid) {id = tid;};

   virtual  ~VyperConn227(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariableClass<Boolean> * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionDemote(disabled))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setTarget(target->menuItem(id+WNDOFFSET_Vyper_SectionDemote).isDisabled());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionDemote(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_SectionDemote).setDisabled(source->target()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IVBVariableClass<Boolean>::targetId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariableClass<Boolean> * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn227


//*****************************************************************************
// Class definition for VyperConn208
//*****************************************************************************
class VyperConn208 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn208(unsigned long tid) {id = tid;};

   virtual  ~VyperConn208(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariableClass<Boolean> * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionUpChoice(disabled))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setTarget(target->menuItem(id+WNDOFFSET_Vyper_SectionUpChoice).isDisabled());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionUpChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_SectionUpChoice).setDisabled(source->target()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IVBVariableClass<Boolean>::targetId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariableClass<Boolean> * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn208


//*****************************************************************************
// Class definition for VyperConn199
//*****************************************************************************
class VyperConn199 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn199(unsigned long tid) {id = tid;};

   virtual  ~VyperConn199(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariableClass<Boolean> * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionDownChoice(disabled))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setTarget(target->menuItem(id+WNDOFFSET_Vyper_SectionDownChoice).isDisabled());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionDownChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_SectionDownChoice).setDisabled(source->target()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IVBVariableClass<Boolean>::targetId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariableClass<Boolean> * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn199


//*****************************************************************************
// Class definition for VyperConn230
//*****************************************************************************
class VyperConn230 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn230(unsigned long tid) {id = tid;};

   virtual  ~VyperConn230(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariableClass<Boolean> * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionExpandChoice(disabled))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setTarget(target->menuItem(id+WNDOFFSET_Vyper_SectionExpandChoice).isDisabled());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionExpandChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_SectionExpandChoice).setDisabled(source->target()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IVBVariableClass<Boolean>::targetId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariableClass<Boolean> * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn230


//*****************************************************************************
// Class definition for VyperConn221
//*****************************************************************************
class VyperConn221 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn221(unsigned long tid) {id = tid;};

   virtual  ~VyperConn221(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariableClass<Boolean> * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionCollapseChoice(disabled))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setTarget(target->menuItem(id+WNDOFFSET_Vyper_SectionCollapseChoice).isDisabled());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionCollapseChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_SectionCollapseChoice).setDisabled(source->target()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IVBVariableClass<Boolean>::targetId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariableClass<Boolean> * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn221


//*****************************************************************************
// Class definition for VyperConn192
//*****************************************************************************
class VyperConn192 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn192(unsigned long tid) {id = tid;};

   virtual  ~VyperConn192(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariableClass<Boolean> * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionPropertiesChoice(disabled))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setTarget(target->menuItem(id+WNDOFFSET_Vyper_SectionPropertiesChoice).isDisabled());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileEmpty(this) to SectionPropertiesChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_SectionPropertiesChoice).setDisabled(source->target()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IVBVariableClass<Boolean>::targetId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariableClass<Boolean> * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn192


//*****************************************************************************
// Class definition for VyperConn193
//*****************************************************************************
class VyperConn193 : public IObserver {
public:
   virtual  ~VyperConn193(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<Editor *> * aSource, LogicalNot * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Editor(properties) to NoProperties(input))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setInput(source->target()->canEditProperties());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Editor::propertiesId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == LogicalNot::inputId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<Editor *> * source;
   LogicalNot * target;
   Boolean aligning;


};   //VyperConn193


//*****************************************************************************
// Class definition for VyperConn204
//*****************************************************************************
class VyperConn204 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn204(unsigned long tid) {id = tid;};

   virtual  ~VyperConn204(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(LogicalNot * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : NoProperties(output) to EditPropertiesChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_EditPropertiesChoice).setDisabled(source->output()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == LogicalNot::outputId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   LogicalNot * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn204


//*****************************************************************************
// Class definition for VyperConn195
//*****************************************************************************
class VyperConn195 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn195(unsigned long tid) {id = tid;};

   virtual  ~VyperConn195(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyDoc * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(empty) to FileExpandChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_FileExpandChoice).setDisabled(source->isEmpty()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::emptyId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyDoc * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn195


//*****************************************************************************
// Class definition for VyperConn186
//*****************************************************************************
class VyperConn186 : public IObserver {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn186(unsigned long tid) {id = tid;};

   virtual  ~VyperConn186(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyDoc * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(empty) to FileCollapseChoice(disabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItem(target->menuItem(id+WNDOFFSET_Vyper_FileCollapseChoice).setDisabled(source->isEmpty()));}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::emptyId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyDoc * source;
   IMenuBar * target;
   Boolean aligning;
   unsigned long id;


};   //VyperConn186


//*****************************************************************************
// Class definition for VyperConn237
//*****************************************************************************
class VyperConn237 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn237(unsigned long tid) {id = tid;};

   virtual  ~VyperConn237(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_InsertBoldMenu)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertBoldMenu(commandEvent) to Editor(insertBold))");
         try {target->target()->insertBold(true);}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<Editor *> * target;
   unsigned long id;


};   //VyperConn237

const INotificationId VyperConn237::exceptionId = "VyperConn237::exceptionId";

//*****************************************************************************
// Class definition for VyperConn218
//*****************************************************************************
class VyperConn218 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn218(unsigned long tid) {id = tid;};

   virtual  ~VyperConn218(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_InsertItalicMenu)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertItalicMenu(commandEvent) to Editor(insertItalic))");
         try {target->target()->insertItalic(true);}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<Editor *> * target;
   unsigned long id;


};   //VyperConn218

const INotificationId VyperConn218::exceptionId = "VyperConn218::exceptionId";

//*****************************************************************************
// Class definition for VyperConn209
//*****************************************************************************
class VyperConn209 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn209(unsigned long tid) {id = tid;};

   virtual  ~VyperConn209(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_InsertUnderlineMenu)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertUnderlineMenu(commandEvent) to Editor(insertUnderline))");
         try {target->target()->insertUnderline(true);}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<Editor *> * target;
   unsigned long id;


};   //VyperConn209

const INotificationId VyperConn209::exceptionId = "VyperConn209::exceptionId";

//*****************************************************************************
// Class definition for VyperConn219
//*****************************************************************************
class VyperConn219 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn219(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperSymbolSelectorFactoryFactory * aSource, IVBVariablePartPointer<VySymbolSelector *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VyperSymbolSelectorFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SymbolSelectorFactory(newEvent) to SymbolSelector(showModally))");
         try {target->target()->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperSymbolSelectorFactoryFactory * source;
   IVBVariablePartPointer<VySymbolSelector *> * target;


};   //VyperConn219


//*****************************************************************************
// Class definition for VyperConn247
//*****************************************************************************
class VyperConn247 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn247(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VySymbolSelector *> * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn247 & setSymbol(IVBVariablePartPointer<VySymbol *> * aSelf) {iSymbol = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VySymbolSelector::enterEvent)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SymbolSelector(enterEvent) to Editor(insertSymbol))");
         try {target->target()->insertSymbol(iSymbol->target()->symbol());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VySymbolSelector *> * source;
   IVBVariablePartPointer<Editor *> * target;
   IVBVariablePartPointer<VySymbol *> * iSymbol;


};   //VyperConn247

const INotificationId VyperConn247::exceptionId = "VyperConn247::exceptionId";

//*****************************************************************************
// Class definition for VyperConn229
//*****************************************************************************
class VyperConn229 : public IObserver {
public:
   virtual  ~VyperConn229(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VySymbolSelector *> * aSource, IVBVariablePartPointer<VySymbol *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!source->target()) return;
      if (!target) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SymbolSelector(selectedSymbol) to SelectedSymbol(this))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setTarget(source->target()->getSymbols()->selectedElement());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (!target) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySymbolSelector::selectedSymbol) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBVariablePartPointer<VySymbol *>::targetId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VySymbolSelector *> * source;
   IVBVariablePartPointer<VySymbol *> * target;
   Boolean aligning;


};   //VyperConn229


//*****************************************************************************
// Class definition for VyperConn250
//*****************************************************************************
class VyperConn250 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn250(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Vyper * aSource, CloseHandler * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn250 & setWindow(IFrameWindow * aSelf) {iWindow = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Vyper::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to InterceptClose(start))");
         try {target->handleEventsFor(iWindow);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Vyper * source;
   CloseHandler * target;
   IFrameWindow * iWindow;


};   //VyperConn250


//*****************************************************************************
// Class definition for VyperConn202
//*****************************************************************************
class VyperConn202 : public IObserver {
public:
   virtual  ~VyperConn202(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to ConfirmClose(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Confirmation::ownerId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   Confirmation * target;
   Boolean aligning;


};   //VyperConn202


//*****************************************************************************
// Class definition for VyperConn203
//*****************************************************************************
class VyperConn203 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn203(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Vyper * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Vyper::closeRequestedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (closeRequested) to ConfirmClose(show))");
         try {target->show();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Vyper * source;
   Confirmation * target;


};   //VyperConn203


//*****************************************************************************
// Class definition for VyperConn214
//*****************************************************************************
class VyperConn214 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn214(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Confirmation * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Confirmation::confirmedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ConfirmClose(confirmed) to VyperFrame(close))");
         try {target->close();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Confirmation * source;
   IFrameWindow * target;


};   //VyperConn214

const INotificationId VyperConn214::exceptionId = "VyperConn214::exceptionId";

//*****************************************************************************
// Class definition for VyperConn205
//*****************************************************************************
class VyperConn205 : public IObserver {
public:
   virtual  ~VyperConn205(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyDoc * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(modified) to ConfirmClose(enabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setEnabled(source->isModified());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::modifiedId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == Confirmation::enabledId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyDoc * source;
   Confirmation * target;
   Boolean aligning;


};   //VyperConn205


//*****************************************************************************
// Class definition for VyperConn215
//*****************************************************************************
class VyperConn215 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn215(unsigned long tid) {id = tid;};

   virtual  ~VyperConn215(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_EditRefreshChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : EditRefreshChoice(commandEvent) to Editor(resize))");
         try {target->target()->resize();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<Editor *> * target;
   unsigned long id;


};   //VyperConn215

const INotificationId VyperConn215::exceptionId = "VyperConn215::exceptionId";

//*****************************************************************************
// Class definition for VyperConn196
//*****************************************************************************
class VyperConn196 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn196(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<Editor *> * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == Editor::modifiedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Editor(modified) to OpenedSection(customLogic, \"Set section modified\"))");
         try {codeSnippet(&anEvent);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member functions
   //---------------------------------------------------------------------------
   void codeSnippet(const INotificationEvent* event)
      {
      if ( source->target()->isModified() )
        target->target()->enableModified();
      };

   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<Editor *> * source;
   IVBVariablePartPointer<VySection *> * target;


};   //VyperConn196


//*****************************************************************************
// Class definition for VyperConn257
//*****************************************************************************
class VyperConn257 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn257(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<Editor *> * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == Editor::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Editor(exception) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<Editor *> * source;
   ExceptionNotification * target;


};   //VyperConn257


//*****************************************************************************
// Class definition for VyperConn238
//*****************************************************************************
class VyperConn238 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn238(unsigned long tid) {id = tid;};

   virtual  ~VyperConn238(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, VyperInfoFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_HelpInfoChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HelpInfoChoice(commandEvent) to InfoFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   VyperInfoFactoryFactory * target;
   unsigned long id;


};   //VyperConn238


//*****************************************************************************
// Class definition for VyperConn239
//*****************************************************************************
class VyperConn239 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn239(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperInfoFactoryFactory * aSource, IVBVariablePartPointer<VyInfo *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target) return(*this);
      if (anEvent.notificationId() == VyperInfoFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InfoFactory(newEvent) to Info(this))");
         try {target->setTarget((VyInfo *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperInfoFactoryFactory * source;
   IVBVariablePartPointer<VyInfo *> * target;


};   //VyperConn239


//*****************************************************************************
// Class definition for VyperConn260
//*****************************************************************************
class VyperConn260 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn260(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperInfoFactoryFactory * aSource, IVBVariablePartPointer<VyInfo *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VyperInfoFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InfoFactory(newEvent) to Info(showModally))");
         try {target->target()->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperInfoFactoryFactory * source;
   IVBVariablePartPointer<VyInfo *> * target;


};   //VyperConn260


//*****************************************************************************
// Class definition for VyperConn241
//*****************************************************************************
class VyperConn241 : public IObserver {
public:
   virtual  ~VyperConn241(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, IVBVariablePartPointer<VyInfo *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to Info(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->target()->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   IVBVariablePartPointer<VyInfo *> * target;
   Boolean aligning;


};   //VyperConn241


//*****************************************************************************
// Class definition for VyperConn212
//*****************************************************************************
class VyperConn212 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn212(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::closeId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(closeEvent) to File(close))");
         try {target->close();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   VyDoc * target;


};   //VyperConn212


//*****************************************************************************
// Class definition for VyperConn224
//*****************************************************************************
class VyperConn224 : public IObserver {
public:
   virtual  ~VyperConn224(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to ExceptionNotification(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == ExceptionNotification::ownerId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   ExceptionNotification * target;
   Boolean aligning;


};   //VyperConn224


//*****************************************************************************
// Class definition for VyperConn225
//*****************************************************************************
class VyperConn225 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn225(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn16 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn16::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn16(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn16 * source;
   ExceptionNotification * target;


};   //VyperConn225


//*****************************************************************************
// Class definition for VyperConn248
//*****************************************************************************
class VyperConn248 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn248(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn32 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn32::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn32(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn32 * source;
   ExceptionNotification * target;


};   //VyperConn248


//*****************************************************************************
// Class definition for VyperConn234
//*****************************************************************************
class VyperConn234 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn234(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn35 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn35::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn35(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn35 * source;
   ExceptionNotification * target;


};   //VyperConn234


//*****************************************************************************
// Class definition for VyperConn235
//*****************************************************************************
class VyperConn235 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn235(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn49 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn49::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn49(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn49 * source;
   ExceptionNotification * target;


};   //VyperConn235


//*****************************************************************************
// Class definition for VyperConn216
//*****************************************************************************
class VyperConn216 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn216(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn69 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn69::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn69(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn69 * source;
   ExceptionNotification * target;


};   //VyperConn216


//*****************************************************************************
// Class definition for VyperConn277
//*****************************************************************************
class VyperConn277 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn277(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn92 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn92::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn92(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn92 * source;
   ExceptionNotification * target;


};   //VyperConn277


//*****************************************************************************
// Class definition for VyperConn258
//*****************************************************************************
class VyperConn258 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn258(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn94 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn94::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn94(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn94 * source;
   ExceptionNotification * target;


};   //VyperConn258


//*****************************************************************************
// Class definition for VyperConn259
//*****************************************************************************
class VyperConn259 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn259(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn38 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn38::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn38(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn38 * source;
   ExceptionNotification * target;


};   //VyperConn259


//*****************************************************************************
// Class definition for VyperConn280
//*****************************************************************************
class VyperConn280 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn280(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn84 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn84::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn84(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn84 * source;
   ExceptionNotification * target;


};   //VyperConn280


//*****************************************************************************
// Class definition for VyperConn261
//*****************************************************************************
class VyperConn261 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn261(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn95 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn95::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn95(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn95 * source;
   ExceptionNotification * target;


};   //VyperConn261


//*****************************************************************************
// Class definition for VyperConn232
//*****************************************************************************
class VyperConn232 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn232(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn82 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn82::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn82(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn82 * source;
   ExceptionNotification * target;


};   //VyperConn232


//*****************************************************************************
// Class definition for VyperConn243
//*****************************************************************************
class VyperConn243 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn243(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn83 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn83::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn83(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn83 * source;
   ExceptionNotification * target;


};   //VyperConn243


//*****************************************************************************
// Class definition for VyperConn244
//*****************************************************************************
class VyperConn244 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn244(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn105 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn105::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn105(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn105 * source;
   ExceptionNotification * target;


};   //VyperConn244


//*****************************************************************************
// Class definition for VyperConn245
//*****************************************************************************
class VyperConn245 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn245(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn106 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn106::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn106(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn106 * source;
   ExceptionNotification * target;


};   //VyperConn245


//*****************************************************************************
// Class definition for VyperConn226
//*****************************************************************************
class VyperConn226 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn226(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn107 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn107::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn107(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn107 * source;
   ExceptionNotification * target;


};   //VyperConn226


//*****************************************************************************
// Class definition for VyperConn287
//*****************************************************************************
class VyperConn287 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn287(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn120 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn120::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn120(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn120 * source;
   ExceptionNotification * target;


};   //VyperConn287


//*****************************************************************************
// Class definition for VyperConn268
//*****************************************************************************
class VyperConn268 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn268(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn215 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn215::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn215(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn215 * source;
   ExceptionNotification * target;


};   //VyperConn268


//*****************************************************************************
// Class definition for VyperConn269
//*****************************************************************************
class VyperConn269 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn269(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn157 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn157::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn157(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn157 * source;
   ExceptionNotification * target;


};   //VyperConn269


//*****************************************************************************
// Class definition for VyperConn290
//*****************************************************************************
class VyperConn290 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn290(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn117 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn117::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn117(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn117 * source;
   ExceptionNotification * target;


};   //VyperConn290


//*****************************************************************************
// Class definition for VyperConn271
//*****************************************************************************
class VyperConn271 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn271(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn118 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn118::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn118(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn118 * source;
   ExceptionNotification * target;


};   //VyperConn271


//*****************************************************************************
// Class definition for VyperConn242
//*****************************************************************************
class VyperConn242 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn242(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn139 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn139::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn139(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn139 * source;
   ExceptionNotification * target;


};   //VyperConn242


//*****************************************************************************
// Class definition for VyperConn253
//*****************************************************************************
class VyperConn253 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn253(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn130 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn130::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn130(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn130 * source;
   ExceptionNotification * target;


};   //VyperConn253


//*****************************************************************************
// Class definition for VyperConn254
//*****************************************************************************
class VyperConn254 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn254(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn141 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn141::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn141(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn141 * source;
   ExceptionNotification * target;


};   //VyperConn254


//*****************************************************************************
// Class definition for VyperConn255
//*****************************************************************************
class VyperConn255 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn255(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn112 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn112::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn112(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn112 * source;
   ExceptionNotification * target;


};   //VyperConn255


//*****************************************************************************
// Class definition for VyperConn236
//*****************************************************************************
class VyperConn236 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn236(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn113 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn113::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn113(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn113 * source;
   ExceptionNotification * target;


};   //VyperConn236


//*****************************************************************************
// Class definition for VyperConn297
//*****************************************************************************
class VyperConn297 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn297(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn237 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn237::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn237(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn237 * source;
   ExceptionNotification * target;


};   //VyperConn297


//*****************************************************************************
// Class definition for VyperConn278
//*****************************************************************************
class VyperConn278 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn278(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn218 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn218::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn218(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn218 * source;
   ExceptionNotification * target;


};   //VyperConn278


//*****************************************************************************
// Class definition for VyperConn279
//*****************************************************************************
class VyperConn279 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn279(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn209 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn209::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn209(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn209 * source;
   ExceptionNotification * target;


};   //VyperConn279


//*****************************************************************************
// Class definition for VyperConn300
//*****************************************************************************
class VyperConn300 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn300(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn114 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn114::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn114(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn114 * source;
   ExceptionNotification * target;


};   //VyperConn300


//*****************************************************************************
// Class definition for VyperConn281
//*****************************************************************************
class VyperConn281 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn281(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn115 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn115::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn115(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn115 * source;
   ExceptionNotification * target;


};   //VyperConn281


//*****************************************************************************
// Class definition for VyperConn252
//*****************************************************************************
class VyperConn252 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn252(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn140 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn140::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn140(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn140 * source;
   ExceptionNotification * target;


};   //VyperConn252


//*****************************************************************************
// Class definition for VyperConn263
//*****************************************************************************
class VyperConn263 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn263(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn247 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn247::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn247(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn247 * source;
   ExceptionNotification * target;


};   //VyperConn263


//*****************************************************************************
// Class definition for VyperConn264
//*****************************************************************************
class VyperConn264 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn264(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn87 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn87::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn87(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn87 * source;
   ExceptionNotification * target;


};   //VyperConn264


//*****************************************************************************
// Class definition for VyperConn265
//*****************************************************************************
class VyperConn265 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn265(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn86 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn86::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn86(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn86 * source;
   ExceptionNotification * target;


};   //VyperConn265


//*****************************************************************************
// Class definition for VyperConn246
//*****************************************************************************
class VyperConn246 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn246(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn66 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn66::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn66(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn66 * source;
   ExceptionNotification * target;


};   //VyperConn246


//*****************************************************************************
// Class definition for VyperConn307
//*****************************************************************************
class VyperConn307 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn307(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn58 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn58::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn58(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn58 * source;
   ExceptionNotification * target;


};   //VyperConn307


//*****************************************************************************
// Class definition for VyperConn288
//*****************************************************************************
class VyperConn288 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn288(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn98 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn98::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn98(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn98 * source;
   ExceptionNotification * target;


};   //VyperConn288


//*****************************************************************************
// Class definition for VyperConn289
//*****************************************************************************
class VyperConn289 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn289(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn100 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn100::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn100(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn100 * source;
   ExceptionNotification * target;


};   //VyperConn289


//*****************************************************************************
// Class definition for VyperConn310
//*****************************************************************************
class VyperConn310 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn310(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn214 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn214::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn214(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn214 * source;
   ExceptionNotification * target;


};   //VyperConn310


//*****************************************************************************
// Class definition for VyperConn273
//*****************************************************************************
class VyperConn273 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn273(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Vyper * aSource, IHelpWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn273 & setAssociatedWindow(IFrameWindow * aSelf) {iAssociatedWindow = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Vyper::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to HelpWindow(setAssociatedWindow))");
         try {target->setAssociatedWindow(iAssociatedWindow);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Vyper * source;
   IHelpWindow * target;
   IFrameWindow * iAssociatedWindow;


};   //VyperConn273


//*****************************************************************************
// Class definition for VyperConn275
//*****************************************************************************
class VyperConn275 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn275(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyInfo *> * aSource, IHelpWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VyInfo::contentsButtonClickEvent)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Info(contentsButtonClickEvent) to HelpWindow(showContentsHelp))");
         try {target->show(IHelpWindow::contents);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyInfo *> * source;
   IHelpWindow * target;


};   //VyperConn275


//*****************************************************************************
// Class definition for VyperConn256
//*****************************************************************************
class VyperConn256 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn256(unsigned long tid) {id = tid;};

   virtual  ~VyperConn256(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IHelpWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_HelpKeyboardChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HelpKeyboardChoice(commandEvent) to HelpWindow(customLogic, \"Show keyboard help\"))");
         try {codeSnippet(&anEvent);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member functions
   //---------------------------------------------------------------------------
   void codeSnippet(const INotificationEvent* event)
      {
      target->show( IResourceId(700) );
      };

   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IHelpWindow * target;
   unsigned long id;


};   //VyperConn256


//*****************************************************************************
// Class definition for VyperConn266
//*****************************************************************************
class VyperConn266 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn266(unsigned long tid) {id = tid;};

   virtual  ~VyperConn266(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IHelpWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_HelpMouseChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HelpMouseChoice(commandEvent) to HelpWindow(customLogic, \"Show mouse help\"))");
         try {codeSnippet(&anEvent);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member functions
   //---------------------------------------------------------------------------
   void codeSnippet(const INotificationEvent* event)
      {
      target->show( IResourceId(800) );
      };

   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IHelpWindow * target;
   unsigned long id;


};   //VyperConn266


//*****************************************************************************
// Class definition for VyperConn276
//*****************************************************************************
class VyperConn276 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn276(unsigned long tid) {id = tid;};

   virtual  ~VyperConn276(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_ImportIpfChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ImportIpfChoice(commandEvent) to ConfirmImportIpf(show))");
         try {target->show();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   Confirmation * target;
   unsigned long id;


};   //VyperConn276


//*****************************************************************************
// Class definition for VyperConn317
//*****************************************************************************
class VyperConn317 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn317(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Confirmation * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Confirmation::confirmedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ConfirmImportIpf(confirmed) to ImportIpfDialog(showModally))");
         try {target->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Confirmation * source;
   IVBFileDialog * target;


};   //VyperConn317


//*****************************************************************************
// Class definition for VyperConn298
//*****************************************************************************
class VyperConn298 : public IObserver {
public:
   virtual  ~VyperConn298(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to ConfirmImportIpf(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Confirmation::ownerId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   Confirmation * target;
   Boolean aligning;


};   //VyperConn298


//*****************************************************************************
// Class definition for VyperConn299
//*****************************************************************************
class VyperConn299 : public IObserver {
public:
   virtual  ~VyperConn299(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyDoc * aSource, Confirmation * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : File(modified) to ConfirmImportIpf(enabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setEnabled(source->isModified());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::modifiedId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == Confirmation::enabledId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyDoc * source;
   Confirmation * target;
   Boolean aligning;


};   //VyperConn299


//*****************************************************************************
// Class definition for VyperConn378
//*****************************************************************************
class VyperConn378 : public IObserver {
public:
   virtual  ~VyperConn378(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(importIpfMask) to ImportIpfDialog(fileName))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setImportIpfMask(target->fileName());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(importIpfMask) to ImportIpfDialog(fileName))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFileName(source->importIpfMask());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySettings::importIpfMaskId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBFileDialog::pressedOkId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   IVBFileDialog * target;
   Boolean aligning;


};   //VyperConn378


//*****************************************************************************
// Class definition for VyperConn316
//*****************************************************************************
class VyperConn316 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn316(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyperWaitFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ImportIpfDialog(pressedOkEvent) to WaitFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyperWaitFactoryFactory * target;


};   //VyperConn316


//*****************************************************************************
// Class definition for VyperConn320
//*****************************************************************************
class VyperConn320 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn320(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn320 & setIString(IVBFileDialog * aSelf) {iIString = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ImportIpfDialog(pressedOkEvent) to File(importIPF))");
         try {target->importIPF(iIString->fileName());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyDoc * target;
   IVBFileDialog * iIString;


};   //VyperConn320

const INotificationId VyperConn320::exceptionId = "VyperConn320::exceptionId";

//*****************************************************************************
// Class definition for VyperConn283
//*****************************************************************************
class VyperConn283 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn283(unsigned long tid) {id = tid;};

   virtual  ~VyperConn283(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_ExportHeaderChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportHeaderChoice(commandEvent) to ExportHeaderDialog(showModally))");
         try {target->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBFileDialog * target;
   unsigned long id;


};   //VyperConn283


//*****************************************************************************
// Class definition for VyperConn361
//*****************************************************************************
class VyperConn361 : public IObserver {
public:
   virtual  ~VyperConn361(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(exportHeaderMask) to ExportHeaderDialog(fileName))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setExportHeaderMask(target->fileName());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(exportHeaderMask) to ExportHeaderDialog(fileName))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFileName(source->exportHeaderMask());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySettings::exportHeaderMaskId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBFileDialog::pressedOkId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   IVBFileDialog * target;
   Boolean aligning;


};   //VyperConn361


//*****************************************************************************
// Class definition for VyperConn284
//*****************************************************************************
class VyperConn284 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn284(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::createdId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportHeaderDialog(createdEvent) to ExportHeaderDialog(setSaveAsDialog))");
         try {target->setSaveAsDialog();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   IVBFileDialog * target;


};   //VyperConn284


//*****************************************************************************
// Class definition for VyperConn286
//*****************************************************************************
class VyperConn286 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn286(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyperWaitFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportHeaderDialog(pressedOkEvent) to WaitFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyperWaitFactoryFactory * target;


};   //VyperConn286


//*****************************************************************************
// Class definition for VyperConn285
//*****************************************************************************
class VyperConn285 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn285(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn285 & setIString(IVBFileDialog * aSelf) {iIString = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportHeaderDialog(pressedOkEvent) to File(exportHeader))");
         try {target->exportHeader(iIString->fileName());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyDoc * target;
   IVBFileDialog * iIString;


};   //VyperConn285

const INotificationId VyperConn285::exceptionId = "VyperConn285::exceptionId";

//*****************************************************************************
// Class definition for VyperConn308
//*****************************************************************************
class VyperConn308 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn308(unsigned long tid) {id = tid;};

   virtual  ~VyperConn308(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_ExportRtfChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportRtfChoice(commandEvent) to ExportRtfDialog(showModally))");
         try {target->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBFileDialog * target;
   unsigned long id;


};   //VyperConn308


//*****************************************************************************
// Class definition for VyperConn466
//*****************************************************************************
class VyperConn466 : public IObserver {
public:
   virtual  ~VyperConn466(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(exportRtfMask) to ExportRtfDialog(fileName))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setExportRtfMask(target->fileName());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(exportRtfMask) to ExportRtfDialog(fileName))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFileName(source->exportRtfMask());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySettings::exportRtfMaskId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBFileDialog::pressedOkId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   IVBFileDialog * target;
   Boolean aligning;


};   //VyperConn466


//*****************************************************************************
// Class definition for VyperConn309
//*****************************************************************************
class VyperConn309 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn309(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::createdId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportRtfDialog(createdEvent) to ExportRtfDialog(setSaveAsDialog))");
         try {target->setSaveAsDialog();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   IVBFileDialog * target;


};   //VyperConn309


//*****************************************************************************
// Class definition for VyperConn366
//*****************************************************************************
class VyperConn366 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn366(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyperWaitFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportRtfDialog(pressedOkEvent) to WaitFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyperWaitFactoryFactory * target;


};   //VyperConn366


//*****************************************************************************
// Class definition for VyperConn330
//*****************************************************************************
class VyperConn330 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn330(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn330 & setIString(IVBFileDialog * aSelf) {iIString = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportRtfDialog(pressedOkEvent) to File(exportRtf))");
         try {target->exportRtf(iIString->fileName());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyDoc * target;
   IVBFileDialog * iIString;


};   //VyperConn330

const INotificationId VyperConn330::exceptionId = "VyperConn330::exceptionId";

//*****************************************************************************
// Class definition for VyperConn293
//*****************************************************************************
class VyperConn293 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn293(unsigned long tid) {id = tid;};

   virtual  ~VyperConn293(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_ExportWinHelpChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportWinHelpChoice(commandEvent) to ExportWinHelpDialog(showModally))");
         try {target->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBFileDialog * target;
   unsigned long id;


};   //VyperConn293


//*****************************************************************************
// Class definition for VyperConn388
//*****************************************************************************
class VyperConn388 : public IObserver {
public:
   virtual  ~VyperConn388(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(exportWinHelpMask) to ExportWinHelpDialog(fileName))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setExportWinHelpMask(target->fileName());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(exportWinHelpMask) to ExportWinHelpDialog(fileName))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFileName(source->exportWinHelpMask());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySettings::exportWinHelpMaskId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBFileDialog::pressedOkId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   IVBFileDialog * target;
   Boolean aligning;


};   //VyperConn388


//*****************************************************************************
// Class definition for VyperConn294
//*****************************************************************************
class VyperConn294 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn294(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::createdId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportWinHelpDialog(createdEvent) to ExportWinHelpDialog(setSaveAsDialog))");
         try {target->setSaveAsDialog();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   IVBFileDialog * target;


};   //VyperConn294


//*****************************************************************************
// Class definition for VyperConn356
//*****************************************************************************
class VyperConn356 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn356(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyperWaitFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportWinHelpDialog(pressedOkEvent) to WaitFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyperWaitFactoryFactory * target;


};   //VyperConn356


//*****************************************************************************
// Class definition for VyperConn295
//*****************************************************************************
class VyperConn295 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn295(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn295 & setIString(IVBFileDialog * aSelf) {iIString = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExportWinHelpDialog(pressedOkEvent) to File(exportWinHelp))");
         try {target->exportWinHelp(iIString->fileName());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyDoc * target;
   IVBFileDialog * iIString;


};   //VyperConn295

const INotificationId VyperConn295::exceptionId = "VyperConn295::exceptionId";

//*****************************************************************************
// Class definition for VyperConn318
//*****************************************************************************
class VyperConn318 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn318(unsigned long tid) {id = tid;};

   virtual  ~VyperConn318(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, VyperRegFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_HelpRegChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HelpRegChoice(commandEvent) to RegFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   VyperRegFactoryFactory * target;
   unsigned long id;


};   //VyperConn318


//*****************************************************************************
// Class definition for VyperConn340
//*****************************************************************************
class VyperConn340 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn340(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperRegFactoryFactory * aSource, IVBVariablePartPointer<VyRegistration *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target) return(*this);
      if (anEvent.notificationId() == VyperRegFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : RegFactory(newEvent) to Registration(this))");
         try {target->setTarget((VyRegistration *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperRegFactoryFactory * source;
   IVBVariablePartPointer<VyRegistration *> * target;


};   //VyperConn340


//*****************************************************************************
// Class definition for VyperConn319
//*****************************************************************************
class VyperConn319 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn319(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperRegFactoryFactory * aSource, IVBVariablePartPointer<VyRegistration *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VyperRegFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : RegFactory(newEvent) to Registration(showModally))");
         try {target->target()->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperRegFactoryFactory * source;
   IVBVariablePartPointer<VyRegistration *> * target;


};   //VyperConn319


//*****************************************************************************
// Class definition for VyperConn311
//*****************************************************************************
class VyperConn311 : public IObserver {
public:
   virtual  ~VyperConn311(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, IVBVariablePartPointer<VyRegistration *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to Registration(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->target()->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   IVBVariablePartPointer<VyRegistration *> * target;
   Boolean aligning;


};   //VyperConn311


//*****************************************************************************
// Class definition for VyperConn292
//*****************************************************************************
class VyperConn292 : public IObserver {
public:
   virtual  ~VyperConn292(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, Vyper * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(frameSplit) to (split))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setFrameSplit(target->split());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(frameSplit) to (split))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setSplit(source->frameSplit());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySettings::frameSplitId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == Vyper::splitId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   Vyper * target;
   Boolean aligning;


};   //VyperConn292


//*****************************************************************************
// Class definition for VyperConn282
//*****************************************************************************
class VyperConn282 : public IObserver {
public:
   virtual  ~VyperConn282(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(framePosition) to VyperFrame(position))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setFramePosition(target->position());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(framePosition) to VyperFrame(position))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->moveTo(source->framePosition());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySettings::framePositionId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IFrameWindow::positionId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   IFrameWindow * target;
   Boolean aligning;


};   //VyperConn282


//*****************************************************************************
// Class definition for VyperConn303
//*****************************************************************************
class VyperConn303 : public IObserver {
public:
   virtual  ~VyperConn303(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(frameSize) to VyperFrame(size))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setFrameSize(target->size());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(frameSize) to VyperFrame(size))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->sizeTo(source->frameSize());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySettings::frameSizeId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IFrameWindow::sizeId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   IFrameWindow * target;
   Boolean aligning;


};   //VyperConn303


//*****************************************************************************
// Class definition for VyperConn313
//*****************************************************************************
class VyperConn313 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn313(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * aSource, Vyper * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj >::sizeId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SectionContainer(size) to (updateSplit))");
         try {target->updateSplit();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj > * source;
   Vyper * target;


};   //VyperConn313


//*****************************************************************************
// Class definition for VyperConn304
//*****************************************************************************
class VyperConn304 : public IObserver {
public:
   virtual  ~VyperConn304(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, IVBVariablePartPointer<VyWait *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to Wait(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->target()->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   IVBVariablePartPointer<VyWait *> * target;
   Boolean aligning;


};   //VyperConn304


//*****************************************************************************
// Class definition for VyperConn305
//*****************************************************************************
class VyperConn305 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn305(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperWaitFactoryFactory * aSource, IVBVariablePartPointer<VyWait *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target) return(*this);
      if (anEvent.notificationId() == VyperWaitFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : WaitFactory(newEvent) to Wait(this))");
         try {target->setTarget((VyWait *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperWaitFactoryFactory * source;
   IVBVariablePartPointer<VyWait *> * target;


};   //VyperConn305


//*****************************************************************************
// Class definition for VyperConn306
//*****************************************************************************
class VyperConn306 : public IObserver {
public:
   virtual  ~VyperConn306(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyWait *> * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (!source) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Wait(this) to File(wait))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setTarget(target->wait());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (!source) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Wait(this) to File(wait))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setWait(source->target());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IVBVariablePartPointer<VyWait *>::targetId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == VyDoc::waitId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyWait *> * source;
   VyDoc * target;
   Boolean aligning;


};   //VyperConn306


//*****************************************************************************
// Class definition for VyperConn347
//*****************************************************************************
class VyperConn347 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn347(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Vyper * aSource, IVBFontDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Vyper::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to EditFont(customLogic))");
         try {codeSnippet(&anEvent);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member functions
   //---------------------------------------------------------------------------
   void codeSnippet(const INotificationEvent* event)
      {
      target->setDialogTemplate( 123 );
      };

   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Vyper * source;
   IVBFontDialog * target;


};   //VyperConn347


//*****************************************************************************
// Class definition for VyperConn328
//*****************************************************************************
class VyperConn328 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn328(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Vyper * aSource, IVBFontDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Vyper::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to InsertFont(customLogic))");
         try {codeSnippet(&anEvent);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member functions
   //---------------------------------------------------------------------------
   void codeSnippet(const INotificationEvent* event)
      {
      target->setDialogTemplate( 123 );
      };

   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Vyper * source;
   IVBFontDialog * target;


};   //VyperConn328


//*****************************************************************************
// Class definition for VyperConn329
//*****************************************************************************
class VyperConn329 : public IObserver {
public:
   virtual  ~VyperConn329(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to File(frame))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFrame(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::frameId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   VyDoc * target;
   Boolean aligning;


};   //VyperConn329


//*****************************************************************************
// Class definition for VyperConn350
//*****************************************************************************
class VyperConn350 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn350(unsigned long tid) {id = tid;};

   virtual  ~VyperConn350(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, VyperInsertArtFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_InsertArtChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertArtChoice(commandEvent) to InsertArtFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   VyperInsertArtFactoryFactory * target;
   unsigned long id;


};   //VyperConn350


//*****************************************************************************
// Class definition for VyperConn291
//*****************************************************************************
class VyperConn291 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn291(unsigned long tid) {id = tid;};

   virtual  ~VyperConn291(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBVariablePartPointer<VyArtProperties *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_InsertArtChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertArtChoice(commandEvent) to InsertArt(showModally))");
         try {target->target()->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBVariablePartPointer<VyArtProperties *> * target;
   unsigned long id;


};   //VyperConn291


//*****************************************************************************
// Class definition for VyperConn302
//*****************************************************************************
class VyperConn302 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn302(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperInsertArtFactoryFactory * aSource, IVBVariablePartPointer<VyArtProperties *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target) return(*this);
      if (anEvent.notificationId() == VyperInsertArtFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertArtFactory(newEvent) to InsertArt(this))");
         try {target->setTarget((VyArtProperties *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperInsertArtFactoryFactory * source;
   IVBVariablePartPointer<VyArtProperties *> * target;


};   //VyperConn302


//*****************************************************************************
// Class definition for VyperConn323
//*****************************************************************************
class VyperConn323 : public IObserver {
public:
   virtual  ~VyperConn323(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, IVBVariablePartPointer<VyArtProperties *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : VyperFrame(this) to InsertArt(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->target()->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   IVBVariablePartPointer<VyArtProperties *> * target;
   Boolean aligning;


};   //VyperConn323


//*****************************************************************************
// Class definition for VyperConn314
//*****************************************************************************
class VyperConn314 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn314(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperInsertArtFactoryFactory * aSource, IVBVariablePartPointer<VyArtProperties *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn314 & setThis(VyDoc * aSelf) {iThis = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VyperInsertArtFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertArtFactory(newEvent) to InsertArt(document))");
         try {target->target()->getDocument()->setTarget(iThis);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperInsertArtFactoryFactory * source;
   IVBVariablePartPointer<VyArtProperties *> * target;
   VyDoc * iThis;


};   //VyperConn314


//*****************************************************************************
// Class definition for VyperConn416
//*****************************************************************************
class VyperConn416 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn416(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyArtProperties *> * aSource, IVBVariablePartPointer<Editor *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn416 & setId(IVBVariablePartPointer<VyArtProperties *> * aSelf) {iId = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VyArtProperties::insertArtId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InsertArt(insertArt) to Editor(insertArt))");
         try {target->target()->insertArt(iId->target()->getArt()->target()->asString());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyArtProperties *> * source;
   IVBVariablePartPointer<Editor *> * target;
   IVBVariablePartPointer<VyArtProperties *> * iId;


};   //VyperConn416

const INotificationId VyperConn416::exceptionId = "VyperConn416::exceptionId";

//*****************************************************************************
// Class definition for VyperConn338
//*****************************************************************************
class VyperConn338 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn338(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn416 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn416::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn416(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn416 * source;
   ExceptionNotification * target;


};   //VyperConn338


//*****************************************************************************
// Class definition for VyperConn339
//*****************************************************************************
class VyperConn339 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn339(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<Editor *> * aSource, VyperInsertArtFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == Editor::editArtId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Editor(editArt) to InsertArtFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<Editor *> * source;
   VyperInsertArtFactoryFactory * target;


};   //VyperConn339


//*****************************************************************************
// Class definition for VyperConn360
//*****************************************************************************
class VyperConn360 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn360(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<Editor *> * aSource, IVBVariablePartPointer<VyArtProperties *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == Editor::editArtId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Editor(editArt) to InsertArt(artItem))");
         try {target->target()->setArtItem((ArtItem*) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<Editor *> * source;
   IVBVariablePartPointer<VyArtProperties *> * target;


};   //VyperConn360


//*****************************************************************************
// Class definition for VyperConn321
//*****************************************************************************
class VyperConn321 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn321(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<Editor *> * aSource, IVBVariablePartPointer<VyArtProperties *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == Editor::editArtId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Editor(editArt) to InsertArt(showModally))");
         try {target->target()->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<Editor *> * source;
   IVBVariablePartPointer<VyArtProperties *> * target;


};   //VyperConn321


//*****************************************************************************
// Class definition for VyperConn312
//*****************************************************************************
class VyperConn312 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn312(unsigned long tid) {id = tid;};

   virtual  ~VyperConn312(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_HtmlSingleChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HtmlSingleChoice(commandEvent) to HtmlSingleDialog(showModally))");
         try {target->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBFileDialog * target;
   unsigned long id;


};   //VyperConn312


//*****************************************************************************
// Class definition for VyperConn333
//*****************************************************************************
class VyperConn333 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn333(unsigned long tid) {id = tid;};

   virtual  ~VyperConn333(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_HtmlFrameChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HtmlFrameChoice(commandEvent) to HtmlFrameDialog(showModally))");
         try {target->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBFileDialog * target;
   unsigned long id;


};   //VyperConn333


//*****************************************************************************
// Class definition for VyperConn324
//*****************************************************************************
class VyperConn324 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   VyperConn324(unsigned long tid) {id = tid;};

   virtual  ~VyperConn324(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Vyper_HtmlHelpChoice)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HtmlHelpChoice(commandEvent) to HtmlHelpDialog(showModally))");
         try {target->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBFileDialog * target;
   unsigned long id;


};   //VyperConn324


//*****************************************************************************
// Class definition for VyperConn364
//*****************************************************************************
class VyperConn364 : public IObserver {
public:
   virtual  ~VyperConn364(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(exportHtmlSingleMask) to HtmlSingleDialog(fileName))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setExportHtmlSingleMask(target->fileName());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(exportHtmlSingleMask) to HtmlSingleDialog(fileName))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFileName(source->exportHtmlSingleMask());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySettings::exportHtmlSingleMaskId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBFileDialog::pressedOkId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   IVBFileDialog * target;
   Boolean aligning;


};   //VyperConn364


//*****************************************************************************
// Class definition for VyperConn335
//*****************************************************************************
class VyperConn335 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn335(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::createdId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HtmlSingleDialog(createdEvent) to HtmlSingleDialog(setSaveAsDialog))");
         try {target->setSaveAsDialog();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   IVBFileDialog * target;


};   //VyperConn335


//*****************************************************************************
// Class definition for VyperConn352
//*****************************************************************************
class VyperConn352 : public IObserver {
public:
   virtual  ~VyperConn352(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(exportHtmlFrameMask) to HtmlFrameDialog(fileName))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setExportHtmlFrameMask(target->fileName());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(exportHtmlFrameMask) to HtmlFrameDialog(fileName))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFileName(source->exportHtmlFrameMask());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySettings::exportHtmlFrameMaskId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBFileDialog::pressedOkId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   IVBFileDialog * target;
   Boolean aligning;


};   //VyperConn352


//*****************************************************************************
// Class definition for VyperConn426
//*****************************************************************************
class VyperConn426 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn426(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::createdId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HtmlFrameDialog(createdEvent) to HtmlFrameDialog(setSaveAsDialog))");
         try {target->setSaveAsDialog();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   IVBFileDialog * target;


};   //VyperConn426


//*****************************************************************************
// Class definition for VyperConn373
//*****************************************************************************
class VyperConn373 : public IObserver {
public:
   virtual  ~VyperConn373(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(exportHtmlHelpMask) to HtmlHelpDialog(fileName))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setExportHtmlHelpMask(target->fileName());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(exportHtmlHelpMask) to HtmlHelpDialog(fileName))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFileName(source->exportHtmlHelpMask());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySettings::exportHtmlHelpMaskId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBFileDialog::pressedOkId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   IVBFileDialog * target;
   Boolean aligning;


};   //VyperConn373


//*****************************************************************************
// Class definition for VyperConn367
//*****************************************************************************
class VyperConn367 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn367(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::createdId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HtmlHelpDialog(createdEvent) to HtmlHelpDialog(setSaveAsDialog))");
         try {target->setSaveAsDialog();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   IVBFileDialog * target;


};   //VyperConn367


//*****************************************************************************
// Class definition for VyperConn348
//*****************************************************************************
class VyperConn348 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn348(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyperWaitFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HtmlSingleDialog(pressedOkEvent) to WaitFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyperWaitFactoryFactory * target;


};   //VyperConn348


//*****************************************************************************
// Class definition for VyperConn349
//*****************************************************************************
class VyperConn349 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn349(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyperWaitFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HtmlFrameDialog(pressedOkEvent) to WaitFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyperWaitFactoryFactory * target;


};   //VyperConn349


//*****************************************************************************
// Class definition for VyperConn370
//*****************************************************************************
class VyperConn370 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn370(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyperWaitFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HtmlHelpDialog(pressedOkEvent) to WaitFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyperWaitFactoryFactory * target;


};   //VyperConn370


//*****************************************************************************
// Class definition for VyperConn331
//*****************************************************************************
class VyperConn331 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn331(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn331 & setIString(IVBFileDialog * aSelf) {iIString = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HtmlSingleDialog(pressedOkEvent) to File(exportHtmlSingle))");
         try {target->exportHtmlSingle(iIString->fileName());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyDoc * target;
   IVBFileDialog * iIString;


};   //VyperConn331

const INotificationId VyperConn331::exceptionId = "VyperConn331::exceptionId";

//*****************************************************************************
// Class definition for VyperConn343
//*****************************************************************************
class VyperConn343 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn343(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn343 & setIString(IVBFileDialog * aSelf) {iIString = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HtmlFrameDialog(pressedOkEvent) to File(exportHtmlFrames))");
         try {target->exportHtmlFrames(iIString->fileName());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyDoc * target;
   IVBFileDialog * iIString;


};   //VyperConn343

const INotificationId VyperConn343::exceptionId = "VyperConn343::exceptionId";

//*****************************************************************************
// Class definition for VyperConn345
//*****************************************************************************
class VyperConn345 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn345(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyperConn345 & setIString(IVBFileDialog * aSelf) {iIString = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : HtmlHelpDialog(pressedOkEvent) to File(exportHtmlHelp))");
         try {target->exportHtmlHelp(iIString->fileName());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyDoc * target;
   IVBFileDialog * iIString;


};   //VyperConn345

const INotificationId VyperConn345::exceptionId = "VyperConn345::exceptionId";

//*****************************************************************************
// Class definition for VyperConn358
//*****************************************************************************
class VyperConn358 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn358(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn345 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn345::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn345(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn345 * source;
   ExceptionNotification * target;


};   //VyperConn358


//*****************************************************************************
// Class definition for VyperConn359
//*****************************************************************************
class VyperConn359 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn359(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn343 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn343::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn343(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn343 * source;
   ExceptionNotification * target;


};   //VyperConn359


//*****************************************************************************
// Class definition for VyperConn380
//*****************************************************************************
class VyperConn380 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn380(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn331 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn331::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn331(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn331 * source;
   ExceptionNotification * target;


};   //VyperConn380


//*****************************************************************************
// Class definition for VyperConn341
//*****************************************************************************
class VyperConn341 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn341(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn295 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn295::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn295(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn295 * source;
   ExceptionNotification * target;


};   //VyperConn341


//*****************************************************************************
// Class definition for VyperConn332
//*****************************************************************************
class VyperConn332 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn332(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn330 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn330::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn330(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn330 * source;
   ExceptionNotification * target;


};   //VyperConn332


//*****************************************************************************
// Class definition for VyperConn353
//*****************************************************************************
class VyperConn353 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn353(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn285 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn285::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn285(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn285 * source;
   ExceptionNotification * target;


};   //VyperConn353


//*****************************************************************************
// Class definition for VyperConn344
//*****************************************************************************
class VyperConn344 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn344(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn70 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn70::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn70(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn70 * source;
   ExceptionNotification * target;


};   //VyperConn344


//*****************************************************************************
// Class definition for VyperConn355
//*****************************************************************************
class VyperConn355 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn355(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn68 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn68::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn68(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn68 * source;
   ExceptionNotification * target;


};   //VyperConn355


//*****************************************************************************
// Class definition for VyperConn446
//*****************************************************************************
class VyperConn446 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn446(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn88 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn88::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn88(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn88 * source;
   ExceptionNotification * target;


};   //VyperConn446


//*****************************************************************************
// Class definition for VyperConn387
//*****************************************************************************
class VyperConn387 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn387(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn53 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn53::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn53(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn53 * source;
   ExceptionNotification * target;


};   //VyperConn387


//*****************************************************************************
// Class definition for VyperConn368
//*****************************************************************************
class VyperConn368 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn368(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn60 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn60::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn60(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn60 * source;
   ExceptionNotification * target;


};   //VyperConn368


//*****************************************************************************
// Class definition for VyperConn369
//*****************************************************************************
class VyperConn369 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn369(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn320 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn320::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn320(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn320 * source;
   ExceptionNotification * target;


};   //VyperConn369


//*****************************************************************************
// Class definition for VyperConn390
//*****************************************************************************
class VyperConn390 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn390(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn23 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn23::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn23(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn23 * source;
   ExceptionNotification * target;


};   //VyperConn390


//*****************************************************************************
// Class definition for VyperConn351
//*****************************************************************************
class VyperConn351 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn351(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn19 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn19::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn19(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn19 * source;
   ExceptionNotification * target;


};   //VyperConn351


//*****************************************************************************
// Class definition for VyperConn342
//*****************************************************************************
class VyperConn342 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn342(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn25 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn25::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn25(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn25 * source;
   ExceptionNotification * target;


};   //VyperConn342


//*****************************************************************************
// Class definition for VyperConn363
//*****************************************************************************
class VyperConn363 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyperConn363(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyperConn16 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyperConn16::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn16(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyperConn16 * source;
   ExceptionNotification * target;


};   //VyperConn363


//*****************************************************************************
// Class definition for VyperConn365
//*****************************************************************************
class VyperConn365 : public IObserver {
public:
   virtual  ~VyperConn365(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, VyDoc * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(this) to File(settings))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setSettings(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::settingsId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   VyDoc * target;
   Boolean aligning;


};   //VyperConn365


//------------------------------------------------------------------------------
// VyperSectionContainerCnrObj :: VyperSectionContainerCnrObj
//------------------------------------------------------------------------------
#pragma export (VyperSectionContainerCnrObj::VyperSectionContainerCnrObj(VySection&))
VyperSectionContainerCnrObj::VyperSectionContainerCnrObj(VySection& anObject)
 :IVBContainerObject(anObject.titleExtended(), ISystemPointerHandle(ISystemPointerHandle::singleFile)), pRealObject(anObject)
{
   enableDataUpdate();
   handleNotificationsFor(pRealObject);
}


//------------------------------------------------------------------------------
// VyperSectionContainerCnrObj :: VyperSectionContainerCnrObj
//------------------------------------------------------------------------------
#pragma export (VyperSectionContainerCnrObj::VyperSectionContainerCnrObj(VyperSectionContainerCnrObj&))
VyperSectionContainerCnrObj::VyperSectionContainerCnrObj(VyperSectionContainerCnrObj& anObject)
 :IVBContainerObject(anObject.iconText(), anObject.icon()), pRealObject(anObject.pRealObject)
{  }


//------------------------------------------------------------------------------
// VyperSectionContainerCnrObj :: ~VyperSectionContainerCnrObj
//------------------------------------------------------------------------------
#pragma export (VyperSectionContainerCnrObj::~VyperSectionContainerCnrObj())
VyperSectionContainerCnrObj::~VyperSectionContainerCnrObj()
{
   this->stopHandlingNotificationsFor(pRealObject);
}


//------------------------------------------------------------------------------
// VyperSectionContainerCnrObj :: refreshFromObject
//------------------------------------------------------------------------------
#pragma export (VyperSectionContainerCnrObj::refreshFromObject())
IVBContainerObject & VyperSectionContainerCnrObj::refreshFromObject()
{
   setIconText(pRealObject.titleExtended());
   setIcon(ISystemPointerHandle(ISystemPointerHandle::singleFile));
   return *this;
}


//------------------------------------------------------------------------------
// VyperSectionContainerCnrObj :: updateToObject
//------------------------------------------------------------------------------
IVBContainerObject & VyperSectionContainerCnrObj::updateToObject()
{
   pRealObject.setTitleExtended(iconText());
   return *this;
}


//------------------------------------------------------------------------------
// VyperSectionContainerCnrObj :: operator=
//------------------------------------------------------------------------------
VyperSectionContainerCnrObj& VyperSectionContainerCnrObj::operator=(const VyperSectionContainerCnrObj& anObject)
{
   if (this == &anObject) {
      return *this;
      }
   IVBContainerObject::operator=(anObject);
   return *this;
}



const INotificationId VyperSectionFactoryFactory::newObjectCreatedId = "VyperSectionFactoryFactory::newObjectCreatedId";

//------------------------------------------------------------------------------
// VyperSectionFactoryFactory :: VyperSectionFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VyperSectionFactoryFactory::VyperSectionFactoryFactory())
VyperSectionFactoryFactory::VyperSectionFactoryFactory()
{
   enableNotification();
}

//------------------------------------------------------------------------------
// VyperSectionFactoryFactory :: ~VyperSectionFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VyperSectionFactoryFactory::~VyperSectionFactoryFactory())
VyperSectionFactoryFactory::~VyperSectionFactoryFactory()
{
   disableNotification();
}

//------------------------------------------------------------------------------
// VyperSectionFactoryFactory :: create
//------------------------------------------------------------------------------
#pragma export (VyperSectionFactoryFactory::create())
VySection * VyperSectionFactoryFactory::create()
{
   VySection *iSectionFactory = new VySection();
   iSectionFactory->enableNotification();
   iSectionFactory->initializePart();
   notifyObservers(INotificationEvent(newObjectCreatedId, *this, true, IEventData((void *)iSectionFactory)));
   return(iSectionFactory);
}

const INotificationId VyperDocPropertiesFactoryFactory::newObjectCreatedId = "VyperDocPropertiesFactoryFactory::newObjectCreatedId";

#pragma export (VyperDocPropertiesFactoryFactory::id)
unsigned long VyperDocPropertiesFactoryFactory::id = 0;

//------------------------------------------------------------------------------
// VyperDocPropertiesFactoryFactory :: VyperDocPropertiesFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VyperDocPropertiesFactoryFactory::VyperDocPropertiesFactoryFactory(unsigned long))
VyperDocPropertiesFactoryFactory::VyperDocPropertiesFactoryFactory(unsigned long anId)
{
   enableNotification();
   id = (id) ? id : anId;
}

//------------------------------------------------------------------------------
// VyperDocPropertiesFactoryFactory :: ~VyperDocPropertiesFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VyperDocPropertiesFactoryFactory::~VyperDocPropertiesFactoryFactory())
VyperDocPropertiesFactoryFactory::~VyperDocPropertiesFactoryFactory()
{
   disableNotification();
}

//------------------------------------------------------------------------------
// VyperDocPropertiesFactoryFactory :: create
//------------------------------------------------------------------------------
#pragma export (VyperDocPropertiesFactoryFactory::create())
VyDocProperties * VyperDocPropertiesFactoryFactory::create()
{
   VyDocProperties *iDocPropertiesFactory = new VyDocProperties(
      id+WNDOFFSET_Vyper_DocPropertiesFactory, 
      IWindow::desktopWindow(), 
      0, 
      VyDocProperties::defaultFramingSpec());
   iDocPropertiesFactory->enableNotification();
   iDocPropertiesFactory->initializePart();
   notifyObservers(INotificationEvent(newObjectCreatedId, *this, true, IEventData((void *)iDocPropertiesFactory)));
   return(iDocPropertiesFactory);
}

const INotificationId VyperSectionPropertiesFactoryFactory::newObjectCreatedId = "VyperSectionPropertiesFactoryFactory::newObjectCreatedId";

#pragma export (VyperSectionPropertiesFactoryFactory::id)
unsigned long VyperSectionPropertiesFactoryFactory::id = 0;

//------------------------------------------------------------------------------
// VyperSectionPropertiesFactoryFactory :: VyperSectionPropertiesFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VyperSectionPropertiesFactoryFactory::VyperSectionPropertiesFactoryFactory(unsigned long))
VyperSectionPropertiesFactoryFactory::VyperSectionPropertiesFactoryFactory(unsigned long anId)
{
   enableNotification();
   id = (id) ? id : anId;
}

//------------------------------------------------------------------------------
// VyperSectionPropertiesFactoryFactory :: ~VyperSectionPropertiesFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VyperSectionPropertiesFactoryFactory::~VyperSectionPropertiesFactoryFactory())
VyperSectionPropertiesFactoryFactory::~VyperSectionPropertiesFactoryFactory()
{
   disableNotification();
}

//------------------------------------------------------------------------------
// VyperSectionPropertiesFactoryFactory :: create
//------------------------------------------------------------------------------
#pragma export (VyperSectionPropertiesFactoryFactory::create())
VySectionProperties * VyperSectionPropertiesFactoryFactory::create()
{
   VySectionProperties *iSectionPropertiesFactory = new VySectionProperties(
      id+WNDOFFSET_Vyper_SectionPropertiesFactory, 
      IWindow::desktopWindow(), 
      0, 
      VySectionProperties::defaultFramingSpec());
   iSectionPropertiesFactory->enableNotification();
   iSectionPropertiesFactory->initializePart();
   notifyObservers(INotificationEvent(newObjectCreatedId, *this, true, IEventData((void *)iSectionPropertiesFactory)));
   return(iSectionPropertiesFactory);
}

const INotificationId VyperSymbolSelectorFactoryFactory::newObjectCreatedId = "VyperSymbolSelectorFactoryFactory::newObjectCreatedId";

#pragma export (VyperSymbolSelectorFactoryFactory::id)
unsigned long VyperSymbolSelectorFactoryFactory::id = 0;

//------------------------------------------------------------------------------
// VyperSymbolSelectorFactoryFactory :: VyperSymbolSelectorFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VyperSymbolSelectorFactoryFactory::VyperSymbolSelectorFactoryFactory(unsigned long))
VyperSymbolSelectorFactoryFactory::VyperSymbolSelectorFactoryFactory(unsigned long anId)
{
   enableNotification();
   id = (id) ? id : anId;
}

//------------------------------------------------------------------------------
// VyperSymbolSelectorFactoryFactory :: ~VyperSymbolSelectorFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VyperSymbolSelectorFactoryFactory::~VyperSymbolSelectorFactoryFactory())
VyperSymbolSelectorFactoryFactory::~VyperSymbolSelectorFactoryFactory()
{
   disableNotification();
}

//------------------------------------------------------------------------------
// VyperSymbolSelectorFactoryFactory :: create
//------------------------------------------------------------------------------
#pragma export (VyperSymbolSelectorFactoryFactory::create())
VySymbolSelector * VyperSymbolSelectorFactoryFactory::create()
{
   VySymbolSelector *iSymbolSelectorFactory = new VySymbolSelector(
      id+WNDOFFSET_Vyper_SymbolSelectorFactory, 
      IWindow::desktopWindow(), 
      0, 
      VySymbolSelector::defaultFramingSpec());
   iSymbolSelectorFactory->enableNotification();
   iSymbolSelectorFactory->initializePart();
   notifyObservers(INotificationEvent(newObjectCreatedId, *this, true, IEventData((void *)iSymbolSelectorFactory)));
   return(iSymbolSelectorFactory);
}

const INotificationId VyperInsertLinkFactoryFactory::newObjectCreatedId = "VyperInsertLinkFactoryFactory::newObjectCreatedId";

#pragma export (VyperInsertLinkFactoryFactory::id)
unsigned long VyperInsertLinkFactoryFactory::id = 0;

//------------------------------------------------------------------------------
// VyperInsertLinkFactoryFactory :: VyperInsertLinkFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VyperInsertLinkFactoryFactory::VyperInsertLinkFactoryFactory(unsigned long))
VyperInsertLinkFactoryFactory::VyperInsertLinkFactoryFactory(unsigned long anId)
{
   enableNotification();
   id = (id) ? id : anId;
}

//------------------------------------------------------------------------------
// VyperInsertLinkFactoryFactory :: ~VyperInsertLinkFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VyperInsertLinkFactoryFactory::~VyperInsertLinkFactoryFactory())
VyperInsertLinkFactoryFactory::~VyperInsertLinkFactoryFactory()
{
   disableNotification();
}

//------------------------------------------------------------------------------
// VyperInsertLinkFactoryFactory :: create
//------------------------------------------------------------------------------
#pragma export (VyperInsertLinkFactoryFactory::create())
VyLinkProperties * VyperInsertLinkFactoryFactory::create()
{
   VyLinkProperties *iInsertLinkFactory = new VyLinkProperties(
      id+WNDOFFSET_Vyper_InsertLinkFactory, 
      IWindow::desktopWindow(), 
      0, 
      VyLinkProperties::defaultFramingSpec());
   iInsertLinkFactory->enableNotification();
   iInsertLinkFactory->initializePart();
   notifyObservers(INotificationEvent(newObjectCreatedId, *this, true, IEventData((void *)iInsertLinkFactory)));
   return(iInsertLinkFactory);
}

const INotificationId VyperInfoFactoryFactory::newObjectCreatedId = "VyperInfoFactoryFactory::newObjectCreatedId";

#pragma export (VyperInfoFactoryFactory::id)
unsigned long VyperInfoFactoryFactory::id = 0;

//------------------------------------------------------------------------------
// VyperInfoFactoryFactory :: VyperInfoFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VyperInfoFactoryFactory::VyperInfoFactoryFactory(unsigned long))
VyperInfoFactoryFactory::VyperInfoFactoryFactory(unsigned long anId)
{
   enableNotification();
   id = (id) ? id : anId;
}

//------------------------------------------------------------------------------
// VyperInfoFactoryFactory :: ~VyperInfoFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VyperInfoFactoryFactory::~VyperInfoFactoryFactory())
VyperInfoFactoryFactory::~VyperInfoFactoryFactory()
{
   disableNotification();
}

//------------------------------------------------------------------------------
// VyperInfoFactoryFactory :: create
//------------------------------------------------------------------------------
#pragma export (VyperInfoFactoryFactory::create())
VyInfo * VyperInfoFactoryFactory::create()
{
   VyInfo *iInfoFactory = new VyInfo(
      id+WNDOFFSET_Vyper_InfoFactory, 
      IWindow::desktopWindow(), 
      0, 
      VyInfo::defaultFramingSpec());
   iInfoFactory->enableNotification();
   iInfoFactory->initializePart();
   notifyObservers(INotificationEvent(newObjectCreatedId, *this, true, IEventData((void *)iInfoFactory)));
   return(iInfoFactory);
}

const INotificationId VyperRegFactoryFactory::newObjectCreatedId = "VyperRegFactoryFactory::newObjectCreatedId";

#pragma export (VyperRegFactoryFactory::id)
unsigned long VyperRegFactoryFactory::id = 0;

//------------------------------------------------------------------------------
// VyperRegFactoryFactory :: VyperRegFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VyperRegFactoryFactory::VyperRegFactoryFactory(unsigned long))
VyperRegFactoryFactory::VyperRegFactoryFactory(unsigned long anId)
{
   enableNotification();
   id = (id) ? id : anId;
}

//------------------------------------------------------------------------------
// VyperRegFactoryFactory :: ~VyperRegFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VyperRegFactoryFactory::~VyperRegFactoryFactory())
VyperRegFactoryFactory::~VyperRegFactoryFactory()
{
   disableNotification();
}

//------------------------------------------------------------------------------
// VyperRegFactoryFactory :: create
//------------------------------------------------------------------------------
#pragma export (VyperRegFactoryFactory::create())
VyRegistration * VyperRegFactoryFactory::create()
{
   VyRegistration *iRegFactory = new VyRegistration(
      id+WNDOFFSET_Vyper_RegFactory, 
      IWindow::desktopWindow(), 
      0, 
      VyRegistration::defaultFramingSpec());
   iRegFactory->enableNotification();
   iRegFactory->initializePart();
   notifyObservers(INotificationEvent(newObjectCreatedId, *this, true, IEventData((void *)iRegFactory)));
   return(iRegFactory);
}

const INotificationId VyperWaitFactoryFactory::newObjectCreatedId = "VyperWaitFactoryFactory::newObjectCreatedId";

#pragma export (VyperWaitFactoryFactory::id)
unsigned long VyperWaitFactoryFactory::id = 0;

//------------------------------------------------------------------------------
// VyperWaitFactoryFactory :: VyperWaitFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VyperWaitFactoryFactory::VyperWaitFactoryFactory(unsigned long))
VyperWaitFactoryFactory::VyperWaitFactoryFactory(unsigned long anId)
{
   enableNotification();
   id = (id) ? id : anId;
}

//------------------------------------------------------------------------------
// VyperWaitFactoryFactory :: ~VyperWaitFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VyperWaitFactoryFactory::~VyperWaitFactoryFactory())
VyperWaitFactoryFactory::~VyperWaitFactoryFactory()
{
   disableNotification();
}

//------------------------------------------------------------------------------
// VyperWaitFactoryFactory :: create
//------------------------------------------------------------------------------
#pragma export (VyperWaitFactoryFactory::create())
VyWait * VyperWaitFactoryFactory::create()
{
   VyWait *iWaitFactory = new VyWait(
      id+WNDOFFSET_Vyper_WaitFactory, 
      IWindow::desktopWindow(), 
      0, 
      VyWait::defaultFramingSpec());
   iWaitFactory->enableNotification();
   iWaitFactory->initializePart();
   notifyObservers(INotificationEvent(newObjectCreatedId, *this, true, IEventData((void *)iWaitFactory)));
   return(iWaitFactory);
}

const INotificationId VyperInsertArtFactoryFactory::newObjectCreatedId = "VyperInsertArtFactoryFactory::newObjectCreatedId";

#pragma export (VyperInsertArtFactoryFactory::id)
unsigned long VyperInsertArtFactoryFactory::id = 0;

//------------------------------------------------------------------------------
// VyperInsertArtFactoryFactory :: VyperInsertArtFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VyperInsertArtFactoryFactory::VyperInsertArtFactoryFactory(unsigned long))
VyperInsertArtFactoryFactory::VyperInsertArtFactoryFactory(unsigned long anId)
{
   enableNotification();
   id = (id) ? id : anId;
}

//------------------------------------------------------------------------------
// VyperInsertArtFactoryFactory :: ~VyperInsertArtFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VyperInsertArtFactoryFactory::~VyperInsertArtFactoryFactory())
VyperInsertArtFactoryFactory::~VyperInsertArtFactoryFactory()
{
   disableNotification();
}

//------------------------------------------------------------------------------
// VyperInsertArtFactoryFactory :: create
//------------------------------------------------------------------------------
#pragma export (VyperInsertArtFactoryFactory::create())
VyArtProperties * VyperInsertArtFactoryFactory::create()
{
   VyArtProperties *iInsertArtFactory = new VyArtProperties(
      id+WNDOFFSET_Vyper_InsertArtFactory, 
      IWindow::desktopWindow(), 
      0, 
      VyArtProperties::defaultFramingSpec());
   iInsertArtFactory->enableNotification();
   iInsertArtFactory->initializePart();
   notifyObservers(INotificationEvent(newObjectCreatedId, *this, true, IEventData((void *)iInsertArtFactory)));
   return(iInsertArtFactory);
}

#pragma export (Vyper::readyId)
const INotificationId Vyper::readyId = "Vyper::readyId";

//------------------------------------------------------------------------------
// Vyper :: defaultId
//------------------------------------------------------------------------------
#pragma export (Vyper::defaultId())
unsigned long Vyper::defaultId()
{
   return(100);
}


//------------------------------------------------------------------------------
// Vyper :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (Vyper::defaultFramingSpec())
const IRectangle Vyper::defaultFramingSpec()
{
   return(IRectangle(IPoint(16, IWindow::desktopWindow()->size().height() - 105 - 224),ISize(384, 224)));
}


//------------------------------------------------------------------------------
// Vyper :: defaultStyle
//------------------------------------------------------------------------------
#pragma export (Vyper::defaultStyle())
const IFrameWindow::Style Vyper::defaultStyle()
{
   return(IFrameWindow::defaultStyle());
}


//------------------------------------------------------------------------------
// Vyper :: Vyper
//------------------------------------------------------------------------------
#pragma export (Vyper::Vyper(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
Vyper::Vyper(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   iVyperFrameMenu = new IMenuBar(this);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_FileChoice, "~File").addSubmenu(id+WNDOFFSET_Vyper_FileChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_FileNewChoice, "~New \tCtrl+N", id+WNDOFFSET_Vyper_FileChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_FileOpenChoice, "~Open... \tCtrl+O", id+WNDOFFSET_Vyper_FileChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_FileSaveChoice, "~Save \tCtrl+S", id+WNDOFFSET_Vyper_FileChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_FileSaveAsChoice, "Save ~as... \tCtrl+A", id+WNDOFFSET_Vyper_FileChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_FileCloseChoice, "~Close \tCtrl+C", id+WNDOFFSET_Vyper_FileChoice);
   iVyperFrameMenu->addSeparator(id+WNDOFFSET_Vyper_MenuSeparator1, id+WNDOFFSET_Vyper_FileChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_FileImportChoice, "~Import", id+WNDOFFSET_Vyper_FileChoice).addSubmenu(id+WNDOFFSET_Vyper_FileImportChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_ImportIpfChoice, "~IPF...", id+WNDOFFSET_Vyper_FileImportChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_ImportWinHelpChoice, "~WinHelp (HPJ)...", id+WNDOFFSET_Vyper_FileImportChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_ImportTextChoice, "~Text...", id+WNDOFFSET_Vyper_FileImportChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_FileExportChoice, "~Export", id+WNDOFFSET_Vyper_FileChoice).addSubmenu(id+WNDOFFSET_Vyper_FileExportChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_ExportIpfChoice, "~IPF...", id+WNDOFFSET_Vyper_FileExportChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_ExportHtmlChoice, "~HTML", id+WNDOFFSET_Vyper_FileExportChoice).addSubmenu(id+WNDOFFSET_Vyper_ExportHtmlChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_HtmlSingleChoice, "~Single...", id+WNDOFFSET_Vyper_ExportHtmlChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_HtmlFrameChoice, "~Frames...", id+WNDOFFSET_Vyper_ExportHtmlChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_HtmlHelpChoice, "~HTMLHelp...", id+WNDOFFSET_Vyper_ExportHtmlChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_ExportWinHelpChoice, "~WinHelp (HPJ)...", id+WNDOFFSET_Vyper_FileExportChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_ExportRtfChoice, "~RTF...", id+WNDOFFSET_Vyper_FileExportChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_ExportHeaderChoice, "~C header...", id+WNDOFFSET_Vyper_FileExportChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_ExportTextChoice, "~Text...", id+WNDOFFSET_Vyper_FileExportChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_ExportTestChoice, "~Diagnostic...", id+WNDOFFSET_Vyper_FileExportChoice);
   iVyperFrameMenu->addSeparator(id+WNDOFFSET_Vyper_MenuSeparator2, id+WNDOFFSET_Vyper_FileChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_FileExpandChoice, "E~xpand \tCtrl++", id+WNDOFFSET_Vyper_FileChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_FileCollapseChoice, "Co~llapse \tCtrl+-", id+WNDOFFSET_Vyper_FileChoice);
   iVyperFrameMenu->addSeparator(id+WNDOFFSET_Vyper_MenuSeparator8, id+WNDOFFSET_Vyper_FileChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_FilePropertiesChoice, "P~roperties... \tCtrl+R", id+WNDOFFSET_Vyper_FileChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_SectionChoice, "~Section").addSubmenu(id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_SectionNewChoice, "~New \tAlt+N", id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_SectionOpenChoice, "~Open \tAlt+O", id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_SectionCloseChoice, "~Close \tAlt+C", id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addSeparator(id+WNDOFFSET_Vyper_MenuSeparator4, id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_SectionCopyChoice, "Cop~y \tAlt+Ins", id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_SectionPasteChoice, "~Paste \tShift+Alt+Ins", id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addSeparator(id+WNDOFFSET_Vyper_MenuSeparator10, id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_SectionDeleteChoice, "~Delete branch \tAlt+Del", id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addSeparator(id+WNDOFFSET_Vyper_MenuSeparator5, id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_SectionPromoteChoice, "Pro~mote branch \tAlt+Left", id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_SectionDemote, "D~emote branch \tAlt+Right", id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_SectionUpChoice, "~Up branch \tAlt+Up", id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_SectionDownChoice, "Do~wn branch \tAlt+Down", id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addSeparator(id+WNDOFFSET_Vyper_MenuSeparator6, id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_SectionExpandChoice, "E~xpand branch \tAlt++", id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_SectionCollapseChoice, "Co~llapse branch \tAlt+-", id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addSeparator(id+WNDOFFSET_Vyper_MenuSeparator9, id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_SectionPropertiesChoice, "P~roperties... \tAlt+R", id+WNDOFFSET_Vyper_SectionChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_EditChoice, "~Edit").addSubmenu(id+WNDOFFSET_Vyper_EditChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_EditCutChoice, "Cu~t \tShift+Del", id+WNDOFFSET_Vyper_EditChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_EditCopyChoice, "~Copy \tCtrl+Ins", id+WNDOFFSET_Vyper_EditChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_EditPasteChoice, "~Paste \tShift+Ins", id+WNDOFFSET_Vyper_EditChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_EditDeleteChoice, "~Delete", id+WNDOFFSET_Vyper_EditChoice);
   iVyperFrameMenu->addSeparator(id+WNDOFFSET_Vyper_MenuSeparator12, id+WNDOFFSET_Vyper_EditChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_EditRefreshChoice, "Re~fresh \tF5", id+WNDOFFSET_Vyper_EditChoice);
   iVyperFrameMenu->addSeparator(id+WNDOFFSET_Vyper_MenuSeparator7, id+WNDOFFSET_Vyper_EditChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_EditPropertiesChoice, "P~roperties...", id+WNDOFFSET_Vyper_EditChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_InsertChoice, "~Insert").addSubmenu(id+WNDOFFSET_Vyper_InsertChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_InsertFontChoice, "~Font... \tCtrl+F", id+WNDOFFSET_Vyper_InsertChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_InsertBoldMenu, "~Bold", id+WNDOFFSET_Vyper_InsertChoice).addSubmenu(id+WNDOFFSET_Vyper_InsertBoldMenu);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_BoldOnChoice, "O~n \tCtrl+B", id+WNDOFFSET_Vyper_InsertBoldMenu);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_BoldOffChoice, "O~ff", id+WNDOFFSET_Vyper_InsertBoldMenu);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_InsertItalicMenu, "~Italic", id+WNDOFFSET_Vyper_InsertChoice).addSubmenu(id+WNDOFFSET_Vyper_InsertItalicMenu);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_ItalicOnChoice, "O~n \tCtrl+I", id+WNDOFFSET_Vyper_InsertItalicMenu);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_ItalicOffChoice, "O~ff", id+WNDOFFSET_Vyper_InsertItalicMenu);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_InsertUnderlineMenu, "~Underline", id+WNDOFFSET_Vyper_InsertChoice).addSubmenu(id+WNDOFFSET_Vyper_InsertUnderlineMenu);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_UnderlineOnChoice, "O~n \tCtrl+U", id+WNDOFFSET_Vyper_InsertUnderlineMenu);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_UnderlineOffChoice, "O~ff", id+WNDOFFSET_Vyper_InsertUnderlineMenu);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_InsertLinkChoice, "~Link... \tCtrl+L", id+WNDOFFSET_Vyper_InsertChoice);
   iVyperFrameMenu->addSeparator(id+WNDOFFSET_Vyper_MenuSeparator3, id+WNDOFFSET_Vyper_InsertChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_InsertParagraphChoice, "~Paragraph break \tEnter", id+WNDOFFSET_Vyper_InsertChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_InsertLineChoice, "Li~ne break \tShift+Enter", id+WNDOFFSET_Vyper_InsertChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_InsertSymbolChoice, "~Symbol... \tCtrl+Y", id+WNDOFFSET_Vyper_InsertChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_InsertArtChoice, "~Art... \tCtrl+T", id+WNDOFFSET_Vyper_InsertChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_HelpChoice, "~Help").addSubmenu(id+WNDOFFSET_Vyper_HelpChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_HelpIndexChoice, "~Index", id+WNDOFFSET_Vyper_HelpChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_HelpGeneralChoice, "~General help", id+WNDOFFSET_Vyper_HelpChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_HelpUsingChoice, "~Using help", id+WNDOFFSET_Vyper_HelpChoice);
   iVyperFrameMenu->addSeparator(id+WNDOFFSET_Vyper_MenuSeparator11, id+WNDOFFSET_Vyper_HelpChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_HelpKeyboardChoice, "~Keyboard help", id+WNDOFFSET_Vyper_HelpChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_HelpMouseChoice, "~Mouse help", id+WNDOFFSET_Vyper_HelpChoice);
   iVyperFrameMenu->addSeparator(id+WNDOFFSET_Vyper_MenuSeparator13, id+WNDOFFSET_Vyper_HelpChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_HelpRegChoice, "~Registration...", id+WNDOFFSET_Vyper_HelpChoice);
   iVyperFrameMenu->addText(id+WNDOFFSET_Vyper_HelpInfoChoice, "~Product information", id+WNDOFFSET_Vyper_HelpChoice);
   iVyperFrameAccelTable = new IAccelerator(100, this);
   iInfoArea1 = new IInfoArea(this, id+WNDOFFSET_Vyper_InfoArea1);
   iVyperSplitCanvas = new ISplitCanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iSectionContainer = new IVBContainerControl< VySection*, IVSequence<VySection*>, VyperSectionContainerCnrObj >(
      id+WNDOFFSET_Vyper_SectionContainer, 
      iVyperSplitCanvas, 
      iVyperSplitCanvas, 
      IRectangle ( ), 
      IContainerControl::defaultStyle() & ~IContainerControl::readOnly | IContainerControl::autoPosition | IControl::group | IControl::tabStop | IWindow::visible);
   iVyperPort = new IViewPort(
      id+WNDOFFSET_Vyper_VyperPort, 
      iVyperSplitCanvas, 
      iVyperSplitCanvas, 
      IRectangle(), 
      IViewPort::noViewWindowFill | IViewPort::alwaysHorizontalScrollBar | IViewPort::alwaysVerticalScrollBar | IWindow::visible);
   iHelpWindow = new IHelpWindow();
   iFileOpenDialog = new IVBFileDialog(this);
   iFileSaveDialog = new IVBFileDialog(this);
   iSectionFactory = new VyperSectionFactoryFactory();
   iFile = new VyDoc();
   iImportTextDialog = new IVBFileDialog(this);
   iImportWinHelpDialog = new IVBFileDialog(this);
   iExportIPFDialog = new IVBFileDialog(this);
   iExportTraceDialog = new IVBFileDialog(this);
   iDocProperties = new IVBVariablePartPointer<VyDocProperties *>();
   iDocPropertiesFactory = new VyperDocPropertiesFactoryFactory(id);
   iSectionPropertiesFactory = new VyperSectionPropertiesFactoryFactory(id);
   iSectionProperties = new IVBVariablePartPointer<VySectionProperties *>();
   iExportTextDialog = new IVBFileDialog(this);
   iSelectedSection = new IVBVariablePartPointer<VySection *>();
   iOpenedSection = new IVBVariablePartPointer<VySection *>();
   iEditor = new IVBVariablePartPointer<Editor *>();
   iInsertFont = new IVBFontDialog(this);
   iSymbolSelector = new IVBVariablePartPointer<VySymbolSelector *>();
   iSymbolSelectorFactory = new VyperSymbolSelectorFactoryFactory(id);
   iInsertLink = new IVBVariablePartPointer<VyLinkProperties *>();
   iInsertLinkFactory = new VyperInsertLinkFactoryFactory(id);
   iEditFont = new IVBFontDialog(this);
   iFont = new VyFont();
   iConfirmSectionDelete = new Confirmation();
   iConfirmSectionPaste = new Confirmation();
   iConfirmFileNew = new Confirmation();
   iConfirmFileOpen = new Confirmation();
   iComfirmFileClose = new Confirmation();
   iConfirmImportText = new Confirmation();
   iConfirmImportWinHelp = new Confirmation();
   iNotOpen = new LogicalNot();
   iTitleBar = new ITitle(
      this, 
      "VyperHelp");
   iFileEmpty = new IVBVariableClass<Boolean>();
   iNoProperties = new LogicalNot();
   iAllSymbols = new IVSequence< VySymbol* >();
   iSelectedSymbol = new IVBVariablePartPointer<VySymbol *>();
   iInterceptClose = new CloseHandler();
   iConfirmClose = new Confirmation();
   iInfoFactory = new VyperInfoFactoryFactory(id);
   iInfo = new IVBVariablePartPointer<VyInfo *>();
   iExceptionNotification = new ExceptionNotification();
   iConfirmImportIpf = new Confirmation();
   iImportIpfDialog = new IVBFileDialog(this);
   iExportHeaderDialog = new IVBFileDialog(this);
   iExportRtfDialog = new IVBFileDialog(this);
   iExportWinHelpDialog = new IVBFileDialog(this);
   iRegFactory = new VyperRegFactoryFactory(id);
   iRegistration = new IVBVariablePartPointer<VyRegistration *>();
   iSettings = new VySettings();
   iWait = new IVBVariablePartPointer<VyWait *>();
   iWaitFactory = new VyperWaitFactoryFactory(id);
   iInsertArt = new IVBVariablePartPointer<VyArtProperties *>();
   iInsertArtFactory = new VyperInsertArtFactoryFactory(id);
   iHtmlSingleDialog = new IVBFileDialog(this);
   iHtmlFrameDialog = new IVBFileDialog(this);
   iHtmlHelpDialog = new IVBFileDialog(this);

   conn11 = new VyperConn11(id);
   conn12 = new VyperConn12(id);
   conn13 = new VyperConn13(id);
   conn15 = new VyperConn15();
   conn337 = new VyperConn337(id);
   conn19 = new VyperConn19(id);
   conn22 = new VyperConn22(id);
   conn354 = new VyperConn354();
   conn406 = new VyperConn406();
   conn23 = new VyperConn23();
   conn397 = new VyperConn397();
   conn315 = new VyperConn315();
   conn17 = new VyperConn17();
   conn25 = new VyperConn25();
   conn27 = new VyperConn27();
   conn16 = new VyperConn16();
   conn32 = new VyperConn32();
   conn44 = new VyperConn44();
   conn59 = new VyperConn59(id);
   conn35 = new VyperConn35(id);
   conn38 = new VyperConn38();
   conn46 = new VyperConn46();
   conn55 = new VyperConn55();
   conn66 = new VyperConn66();
   conn49 = new VyperConn49(id);
   conn69 = new VyperConn69(id);
   conn346 = new VyperConn346();
   conn58 = new VyperConn58();
   conn79 = new VyperConn79(id);
   conn379 = new VyperConn379();
   conn326 = new VyperConn326();
   conn60 = new VyperConn60();
   conn52 = new VyperConn52(id);
   conn400 = new VyperConn400();
   conn336 = new VyperConn336();
   conn53 = new VyperConn53();
   conn65 = new VyperConn65(id);
   conn375 = new VyperConn375();
   conn56 = new VyperConn56();
   conn57 = new VyperConn57();
   conn386 = new VyperConn386();
   conn68 = new VyperConn68();
   conn376 = new VyperConn376();
   conn70 = new VyperConn70();
   conn62 = new VyperConn62(id);
   conn75 = new VyperConn75();
   conn67 = new VyperConn67();
   conn78 = new VyperConn78(id);
   conn91 = new VyperConn91();
   conn101 = new VyperConn101();
   conn72 = new VyperConn72(id);
   conn73 = new VyperConn73();
   conn74 = new VyperConn74();
   conn85 = new VyperConn85();
   conn76 = new VyperConn76();
   conn407 = new VyperConn407();
   conn77 = new VyperConn77();
   conn396 = new VyperConn396();
   conn88 = new VyperConn88();
   conn111 = new VyperConn111(id);
   conn82 = new VyperConn82(id);
   conn83 = new VyperConn83(id);
   conn84 = new VyperConn84(id);
   conn95 = new VyperConn95(id);
   conn86 = new VyperConn86(id);
   conn87 = new VyperConn87(id);
   conn98 = new VyperConn98(id);
   conn100 = new VyperConn100(id);
   conn92 = new VyperConn92(id);
   conn94 = new VyperConn94();
   conn96 = new VyperConn96();
   conn97 = new VyperConn97();
   conn108 = new VyperConn108();
   conn119 = new VyperConn119();
   conn110 = new VyperConn110();
   conn129 = new VyperConn129();
   conn120 = new VyperConn120(id);
   conn131 = new VyperConn131();
   conn102 = new VyperConn102();
   conn103 = new VyperConn103();
   conn104 = new VyperConn104();
   conn105 = new VyperConn105(id);
   conn106 = new VyperConn106(id);
   conn107 = new VyperConn107(id);
   conn118 = new VyperConn118(id);
   conn139 = new VyperConn139(id);
   conn130 = new VyperConn130(id);
   conn141 = new VyperConn141(id);
   conn112 = new VyperConn112(id);
   conn113 = new VyperConn113(id);
   conn114 = new VyperConn114(id);
   conn115 = new VyperConn115(id);
   conn116 = new VyperConn116(id);
   conn117 = new VyperConn117();
   conn240 = new VyperConn240();
   conn151 = new VyperConn151();
   conn213 = new VyperConn213(id);
   conn124 = new VyperConn124(id);
   conn125 = new VyperConn125();
   conn137 = new VyperConn137();
   conn148 = new VyperConn148();
   conn149 = new VyperConn149(id);
   conn140 = new VyperConn140();
   conn143 = new VyperConn143();
   conn136 = new VyperConn136();
   conn134 = new VyperConn134();
   conn157 = new VyperConn157(id);
   conn150 = new VyperConn150();
   conn171 = new VyperConn171();
   conn158 = new VyperConn158();
   conn142 = new VyperConn142();
   conn153 = new VyperConn153();
   conn145 = new VyperConn145();
   conn133 = new VyperConn133();
   conn155 = new VyperConn155(id);
   conn167 = new VyperConn167();
   conn168 = new VyperConn168(id);
   conn159 = new VyperConn159(id);
   conn160 = new VyperConn160();
   conn154 = new VyperConn154(id);
   conn178 = new VyperConn178();
   conn169 = new VyperConn169();
   conn162 = new VyperConn162(id);
   conn190 = new VyperConn190(id);
   conn181 = new VyperConn181(id);
   conn152 = new VyperConn152(id);
   conn163 = new VyperConn163(id);
   conn174 = new VyperConn174();
   conn165 = new VyperConn165();
   conn156 = new VyperConn156(id);
   conn177 = new VyperConn177();
   conn188 = new VyperConn188();
   conn189 = new VyperConn189(id);
   conn200 = new VyperConn200();
   conn201 = new VyperConn201();
   conn172 = new VyperConn172();
   conn183 = new VyperConn183();
   conn184 = new VyperConn184();
   conn175 = new VyperConn175();
   conn166 = new VyperConn166();
   conn187 = new VyperConn187();
   conn197 = new VyperConn197();
   conn207 = new VyperConn207(id);
   conn217 = new VyperConn217();
   conn198 = new VyperConn198();
   conn179 = new VyperConn179();
   conn170 = new VyperConn170(id);
   conn210 = new VyperConn210(id);
   conn220 = new VyperConn220(id);
   conn211 = new VyperConn211(id);
   conn182 = new VyperConn182(id);
   conn173 = new VyperConn173(id);
   conn194 = new VyperConn194(id);
   conn185 = new VyperConn185();
   conn176 = new VyperConn176(id);
   conn227 = new VyperConn227(id);
   conn208 = new VyperConn208(id);
   conn199 = new VyperConn199(id);
   conn230 = new VyperConn230(id);
   conn221 = new VyperConn221(id);
   conn192 = new VyperConn192(id);
   conn193 = new VyperConn193();
   conn204 = new VyperConn204(id);
   conn195 = new VyperConn195(id);
   conn186 = new VyperConn186(id);
   conn237 = new VyperConn237(id);
   conn218 = new VyperConn218(id);
   conn209 = new VyperConn209(id);
   conn219 = new VyperConn219();
   conn247 = new VyperConn247();
   conn229 = new VyperConn229();
   conn250 = new VyperConn250();
   conn202 = new VyperConn202();
   conn203 = new VyperConn203();
   conn214 = new VyperConn214();
   conn205 = new VyperConn205();
   conn215 = new VyperConn215(id);
   conn196 = new VyperConn196();
   conn257 = new VyperConn257();
   conn238 = new VyperConn238(id);
   conn239 = new VyperConn239();
   conn260 = new VyperConn260();
   conn241 = new VyperConn241();
   conn212 = new VyperConn212();
   conn224 = new VyperConn224();
   conn225 = new VyperConn225();
   conn248 = new VyperConn248();
   conn234 = new VyperConn234();
   conn235 = new VyperConn235();
   conn216 = new VyperConn216();
   conn277 = new VyperConn277();
   conn258 = new VyperConn258();
   conn259 = new VyperConn259();
   conn280 = new VyperConn280();
   conn261 = new VyperConn261();
   conn232 = new VyperConn232();
   conn243 = new VyperConn243();
   conn244 = new VyperConn244();
   conn245 = new VyperConn245();
   conn226 = new VyperConn226();
   conn287 = new VyperConn287();
   conn268 = new VyperConn268();
   conn269 = new VyperConn269();
   conn290 = new VyperConn290();
   conn271 = new VyperConn271();
   conn242 = new VyperConn242();
   conn253 = new VyperConn253();
   conn254 = new VyperConn254();
   conn255 = new VyperConn255();
   conn236 = new VyperConn236();
   conn297 = new VyperConn297();
   conn278 = new VyperConn278();
   conn279 = new VyperConn279();
   conn300 = new VyperConn300();
   conn281 = new VyperConn281();
   conn252 = new VyperConn252();
   conn263 = new VyperConn263();
   conn264 = new VyperConn264();
   conn265 = new VyperConn265();
   conn246 = new VyperConn246();
   conn307 = new VyperConn307();
   conn288 = new VyperConn288();
   conn289 = new VyperConn289();
   conn310 = new VyperConn310();
   conn273 = new VyperConn273();
   conn275 = new VyperConn275();
   conn256 = new VyperConn256(id);
   conn266 = new VyperConn266(id);
   conn276 = new VyperConn276(id);
   conn317 = new VyperConn317();
   conn298 = new VyperConn298();
   conn299 = new VyperConn299();
   conn378 = new VyperConn378();
   conn316 = new VyperConn316();
   conn320 = new VyperConn320();
   conn283 = new VyperConn283(id);
   conn361 = new VyperConn361();
   conn284 = new VyperConn284();
   conn286 = new VyperConn286();
   conn285 = new VyperConn285();
   conn308 = new VyperConn308(id);
   conn466 = new VyperConn466();
   conn309 = new VyperConn309();
   conn366 = new VyperConn366();
   conn330 = new VyperConn330();
   conn293 = new VyperConn293(id);
   conn388 = new VyperConn388();
   conn294 = new VyperConn294();
   conn356 = new VyperConn356();
   conn295 = new VyperConn295();
   conn318 = new VyperConn318(id);
   conn340 = new VyperConn340();
   conn319 = new VyperConn319();
   conn311 = new VyperConn311();
   conn292 = new VyperConn292();
   conn282 = new VyperConn282();
   conn303 = new VyperConn303();
   conn313 = new VyperConn313();
   conn304 = new VyperConn304();
   conn305 = new VyperConn305();
   conn306 = new VyperConn306();
   conn347 = new VyperConn347();
   conn328 = new VyperConn328();
   conn329 = new VyperConn329();
   conn350 = new VyperConn350(id);
   conn291 = new VyperConn291(id);
   conn302 = new VyperConn302();
   conn323 = new VyperConn323();
   conn314 = new VyperConn314();
   conn416 = new VyperConn416();
   conn338 = new VyperConn338();
   conn339 = new VyperConn339();
   conn360 = new VyperConn360();
   conn321 = new VyperConn321();
   conn312 = new VyperConn312(id);
   conn333 = new VyperConn333(id);
   conn324 = new VyperConn324(id);
   conn364 = new VyperConn364();
   conn335 = new VyperConn335();
   conn352 = new VyperConn352();
   conn426 = new VyperConn426();
   conn373 = new VyperConn373();
   conn367 = new VyperConn367();
   conn348 = new VyperConn348();
   conn349 = new VyperConn349();
   conn370 = new VyperConn370();
   conn331 = new VyperConn331();
   conn343 = new VyperConn343();
   conn345 = new VyperConn345();
   conn358 = new VyperConn358();
   conn359 = new VyperConn359();
   conn380 = new VyperConn380();
   conn341 = new VyperConn341();
   conn332 = new VyperConn332();
   conn353 = new VyperConn353();
   conn344 = new VyperConn344();
   conn355 = new VyperConn355();
   conn446 = new VyperConn446();
   conn387 = new VyperConn387();
   conn368 = new VyperConn368();
   conn369 = new VyperConn369();
   conn390 = new VyperConn390();
   conn351 = new VyperConn351();
   conn342 = new VyperConn342();
   conn363 = new VyperConn363();
   conn365 = new VyperConn365();

   iSectionContainerSectionEditHandler = new SectionEditHandler();
   iSectionContainerSectionEditHandler->handleEventsFor(iSectionContainer);
   iSectionContainerContainerHelpHandler = new ContainerHelpHandler( 1000 );
   iSectionContainerContainerHelpHandler->handleEventsFor(iSectionContainer);
   iSectionContainer->showTitle(true);
   iSectionContainer->enableDrawBackground(true);
   iSectionContainer->setTitleAlignment(IContainerControl::centered);
   iSectionContainer->enableDrawItem(true);
   iSectionContainer->setRefreshOn(true);
   iSectionContainer->setFont(IFont("Helv", 9, false, true).setBold(false).setItalic(false).setUnderscore(false).setStrikeout(false).setOutline(false));
   iSectionContainer->showTreeIconView();
   iSectionContainer->showTitleSeparator(true);
   iSectionContainer->setTitle("Sections");
   iVyperPort->setBackgroundColor(IColor(IColor::paleGray));
   this->setFocus();
   iVyperFrameMenu->setItem(iVyperFrameMenu->menuItem(id+WNDOFFSET_Vyper_SectionCloseChoice).setDisabled(true));
   iVyperFrameMenu->setItem(iVyperFrameMenu->menuItem(id+WNDOFFSET_Vyper_EditChoice).setDisabled(true));
   iVyperFrameMenu->setItem(iVyperFrameMenu->menuItem(id+WNDOFFSET_Vyper_EditRefreshChoice).setDisabled(false));
   iVyperFrameMenu->setItem(iVyperFrameMenu->menuItem(id+WNDOFFSET_Vyper_InsertChoice).setDisabled(true));
   iVyperFrameMenu->setConditionalCascade(id+WNDOFFSET_Vyper_InsertBoldMenu, id+WNDOFFSET_Vyper_InsertBoldMenu);
   iVyperFrameMenu->setItem(iVyperFrameMenu->menuItem(id+WNDOFFSET_Vyper_BoldOnChoice).setChecked(true));
   iVyperFrameMenu->setConditionalCascade(id+WNDOFFSET_Vyper_InsertItalicMenu, id+WNDOFFSET_Vyper_InsertItalicMenu);
   iVyperFrameMenu->setItem(iVyperFrameMenu->menuItem(id+WNDOFFSET_Vyper_ItalicOnChoice).setChecked(true));
   iVyperFrameMenu->setConditionalCascade(id+WNDOFFSET_Vyper_InsertUnderlineMenu, id+WNDOFFSET_Vyper_InsertUnderlineMenu);
   iVyperFrameMenu->setItem(iVyperFrameMenu->menuItem(id+WNDOFFSET_Vyper_UnderlineOnChoice).setChecked(true));
   this->setClient(iVyperSplitCanvas);
   iHelpWindow->setHelpTable(WND_Vyper);
   iHelpWindow->setAssociatedWindow(this);
   iHelpWindow->setTitle("Help for VyperHelp");
   iHelpWindow->addLibraries("vyper.hlp");
   iFileOpenDialog->setFileName("*.vyd");
   iFileOpenDialog->setOKButtonText("Open");
   iFileOpenDialog->setTitle("Open VyperHelp Document");
   iFileSaveDialog->setFileName("*.vyd");
   iFileSaveDialog->setOKButtonText("Save");
   iFileSaveDialog->setTitle("Save VyperHelp Document");
   iImportTextDialog->setFileName("*.txt");
   iImportTextDialog->setOKButtonText("Import");
   iImportTextDialog->setTitle("Import Text File");
   iImportWinHelpDialog->setFileName("*.hpj");
   iImportWinHelpDialog->setOKButtonText("Import");
   iImportWinHelpDialog->setTitle("Import WinHelp Project");
   iExportIPFDialog->setFileName("*.ipf");
   iExportIPFDialog->setOKButtonText("Export");
   iExportIPFDialog->setTitle("Export IPF");
   iExportTraceDialog->setFileName("*.vyt");
   iExportTraceDialog->setOKButtonText("Export");
   iExportTraceDialog->setTitle("Export Diagnostic Trace");
   iInsertFont->setPreviewText("VyperHelp");
   iInsertFont->setTitle("Select font");
   iEditFont->setPreviewText("VyperHelp");
   iEditFont->setTitle("Change font");
   iConfirmSectionDelete->setText("Are you sure you want to delete this section and all sub-sections?");
   iConfirmSectionPaste->setText("Are you sure you want to overwrite the contents of this section?");
   iConfirmFileNew->setText("Are you sure you want a new file?  The current file is not saved.");
   iConfirmFileOpen->setText("Are you sure you want to open a new file?  The current file is not saved.");
   iComfirmFileClose->setText("Are you sure you want to close the file?  The current file is not saved.");
   iConfirmImportText->setText("Are you sure you want to import a file?  The current file is not saved.");
   iConfirmImportWinHelp->setText("Are you sure you want to import a file?  The current file is not saved.");
   iConfirmClose->setText("Are you sure you want to Exit?  The current file is not saved.");
   iConfirmImportIpf->setText("Are you sure you want to import a file?  The current file is not saved.");
   iImportIpfDialog->setFileName("*.ipf");
   iImportIpfDialog->setOKButtonText("Import");
   iImportIpfDialog->setTitle("Import IPF");
   iExportHeaderDialog->setFileName("*.h");
   iExportHeaderDialog->setOKButtonText("Export");
   iExportHeaderDialog->setTitle("Export C header");
   iExportRtfDialog->setFileName("*.rtf");
   iExportRtfDialog->setOKButtonText("Export");
   iExportRtfDialog->setTitle("Export RTF");
   iExportWinHelpDialog->setFileName("*.hpj");
   iExportWinHelpDialog->setOKButtonText("Export");
   iExportWinHelpDialog->setTitle("Export WinHelp");
   iHtmlSingleDialog->setFileName("*.htm");
   iHtmlSingleDialog->setOKButtonText("Export");
   iHtmlSingleDialog->setTitle("Export HTML Single");
   iHtmlFrameDialog->setFileName("*.html");
   iHtmlFrameDialog->setOKButtonText("Export");
   iHtmlFrameDialog->setTitle("Export HTML Frames");
   iHtmlHelpDialog->setFileName("*.hhp");
   iHtmlHelpDialog->setOKButtonText("Export");
   iHtmlHelpDialog->setTitle("Export HTMLHelp");
   construct();
}     //end constructor


//------------------------------------------------------------------------------
// Vyper :: ~Vyper
//------------------------------------------------------------------------------
#pragma export (Vyper::~Vyper())
Vyper::~Vyper()
{
   destruct();
   conn11->stopHandlingNotificationsFor(*this);
   conn12->stopHandlingNotificationsFor(*this);
   conn13->stopHandlingNotificationsFor(*this);
   conn15->stopHandlingNotificationsFor(*iConfirmFileOpen);
   conn337->stopHandlingNotificationsFor(*this);
   conn19->stopHandlingNotificationsFor(*this);
   conn22->stopHandlingNotificationsFor(*this);
   conn354->stopHandlingNotificationsFor(*iSettings);
   conn354->stopHandlingNotificationsFor(*iFileSaveDialog);
   conn406->stopHandlingNotificationsFor(*iFileSaveDialog);
   conn23->stopHandlingNotificationsFor(*iFileSaveDialog);
   conn397->stopHandlingNotificationsFor(*iSettings);
   conn397->stopHandlingNotificationsFor(*iFileOpenDialog);
   conn315->stopHandlingNotificationsFor(*iFileOpenDialog);
   conn17->stopHandlingNotificationsFor(*iFileOpenDialog);
   conn25->stopHandlingNotificationsFor(*iFileOpenDialog);
   conn27->stopHandlingNotificationsFor(*iFileSaveDialog);
   conn16->stopHandlingNotificationsFor(*iConfirmFileNew);
   conn32->stopHandlingNotificationsFor(*iComfirmFileClose);
   conn44->stopHandlingNotificationsFor(*iFile);
   conn44->stopHandlingNotificationsFor(*iSectionContainer);
   conn59->stopHandlingNotificationsFor(*this);
   conn35->stopHandlingNotificationsFor(*this);
   conn38->stopHandlingNotificationsFor(*iConfirmSectionDelete);
   conn46->stopHandlingNotificationsFor(*iFile);
   conn46->stopHandlingNotificationsFor(*iSectionContainer);
   conn55->stopHandlingNotificationsFor(*iSectionContainer);
   conn55->stopHandlingNotificationsFor(*iFile);
   conn66->stopHandlingNotificationsFor(*iSectionContainer);
   conn49->stopHandlingNotificationsFor(*this);
   conn69->stopHandlingNotificationsFor(*this);
   conn346->stopHandlingNotificationsFor(*this);
   conn58->stopHandlingNotificationsFor(*this);
   conn79->stopHandlingNotificationsFor(*this);
   conn379->stopHandlingNotificationsFor(*iSettings);
   conn379->stopHandlingNotificationsFor(*iImportTextDialog);
   conn326->stopHandlingNotificationsFor(*iImportTextDialog);
   conn60->stopHandlingNotificationsFor(*iImportTextDialog);
   conn52->stopHandlingNotificationsFor(*this);
   conn400->stopHandlingNotificationsFor(*iSettings);
   conn400->stopHandlingNotificationsFor(*iImportWinHelpDialog);
   conn336->stopHandlingNotificationsFor(*iImportWinHelpDialog);
   conn53->stopHandlingNotificationsFor(*iImportWinHelpDialog);
   conn65->stopHandlingNotificationsFor(*this);
   conn375->stopHandlingNotificationsFor(*iSettings);
   conn375->stopHandlingNotificationsFor(*iExportIPFDialog);
   conn56->stopHandlingNotificationsFor(*iExportIPFDialog);
   conn57->stopHandlingNotificationsFor(*iExportTraceDialog);
   conn386->stopHandlingNotificationsFor(*iExportIPFDialog);
   conn68->stopHandlingNotificationsFor(*iExportIPFDialog);
   conn376->stopHandlingNotificationsFor(*iExportTraceDialog);
   conn70->stopHandlingNotificationsFor(*iExportTraceDialog);
   conn62->stopHandlingNotificationsFor(*this);
   conn75->stopHandlingNotificationsFor(*iFile);
   conn75->stopHandlingNotificationsFor(*iDocProperties);
   conn67->stopHandlingNotificationsFor(*iDocPropertiesFactory);
   conn78->stopHandlingNotificationsFor(*this);
   conn91->stopHandlingNotificationsFor(*iDocPropertiesFactory);
   conn101->stopHandlingNotificationsFor(*this);
   conn101->stopHandlingNotificationsFor(*iDocProperties);
   conn72->stopHandlingNotificationsFor(*this);
   conn73->stopHandlingNotificationsFor(*iSectionPropertiesFactory);
   conn74->stopHandlingNotificationsFor(*iSectionPropertiesFactory);
   conn85->stopHandlingNotificationsFor(*iSelectedSection);
   conn85->stopHandlingNotificationsFor(*iSectionProperties);
   conn76->stopHandlingNotificationsFor(*this);
   conn76->stopHandlingNotificationsFor(*iSectionProperties);
   conn407->stopHandlingNotificationsFor(*iSettings);
   conn407->stopHandlingNotificationsFor(*iExportTextDialog);
   conn77->stopHandlingNotificationsFor(*iExportTextDialog);
   conn396->stopHandlingNotificationsFor(*iExportTextDialog);
   conn88->stopHandlingNotificationsFor(*iExportTextDialog);
   conn111->stopHandlingNotificationsFor(*this);
   conn82->stopHandlingNotificationsFor(*this);
   conn83->stopHandlingNotificationsFor(*this);
   conn84->stopHandlingNotificationsFor(*this);
   conn95->stopHandlingNotificationsFor(*this);
   conn86->stopHandlingNotificationsFor(*this);
   conn87->stopHandlingNotificationsFor(*this);
   conn98->stopHandlingNotificationsFor(*this);
   conn100->stopHandlingNotificationsFor(*this);
   conn92->stopHandlingNotificationsFor(*this);
   conn94->stopHandlingNotificationsFor(*iConfirmSectionPaste);
   conn96->stopHandlingNotificationsFor(*iFile);
   conn96->stopHandlingNotificationsFor(*iSelectedSection);
   conn97->stopHandlingNotificationsFor(*iFile);
   conn97->stopHandlingNotificationsFor(*iOpenedSection);
   conn108->stopHandlingNotificationsFor(*iOpenedSection);
   conn108->stopHandlingNotificationsFor(*iEditor);
   conn119->stopHandlingNotificationsFor(*this);
   conn119->stopHandlingNotificationsFor(*iSelectedSection);
   conn110->stopHandlingNotificationsFor(*this);
   conn110->stopHandlingNotificationsFor(*iOpenedSection);
   conn129->stopHandlingNotificationsFor(*iVyperPort);
   conn120->stopHandlingNotificationsFor(*this);
   conn131->stopHandlingNotificationsFor(*this);
   conn102->stopHandlingNotificationsFor(*iOpenedSection);
   conn103->stopHandlingNotificationsFor(*iSelectedSection);
   conn104->stopHandlingNotificationsFor(*iEditor);
   conn104->stopHandlingNotificationsFor(*iInfoArea1);
   conn105->stopHandlingNotificationsFor(*this);
   conn106->stopHandlingNotificationsFor(*this);
   conn107->stopHandlingNotificationsFor(*this);
   conn118->stopHandlingNotificationsFor(*this);
   conn139->stopHandlingNotificationsFor(*this);
   conn130->stopHandlingNotificationsFor(*this);
   conn141->stopHandlingNotificationsFor(*this);
   conn112->stopHandlingNotificationsFor(*this);
   conn113->stopHandlingNotificationsFor(*this);
   conn114->stopHandlingNotificationsFor(*this);
   conn115->stopHandlingNotificationsFor(*this);
   conn116->stopHandlingNotificationsFor(*this);
   conn117->stopHandlingNotificationsFor(*iInsertFont);
   conn240->stopHandlingNotificationsFor(*iAllSymbols);
   conn240->stopHandlingNotificationsFor(*iSymbolSelector);
   conn151->stopHandlingNotificationsFor(*this);
   conn151->stopHandlingNotificationsFor(*iSymbolSelector);
   conn213->stopHandlingNotificationsFor(*this);
   conn124->stopHandlingNotificationsFor(*this);
   conn125->stopHandlingNotificationsFor(*iSymbolSelectorFactory);
   conn137->stopHandlingNotificationsFor(*this);
   conn148->stopHandlingNotificationsFor(*this);
   conn149->stopHandlingNotificationsFor(*this);
   conn140->stopHandlingNotificationsFor(*iInsertLink);
   conn143->stopHandlingNotificationsFor(*iInsertLinkFactory);
   conn136->stopHandlingNotificationsFor(*iInsertLinkFactory);
   conn134->stopHandlingNotificationsFor(*this);
   conn134->stopHandlingNotificationsFor(*iInsertLink);
   conn157->stopHandlingNotificationsFor(*this);
   conn150->stopHandlingNotificationsFor(*iEditor);
   conn171->stopHandlingNotificationsFor(*iEditor);
   conn158->stopHandlingNotificationsFor(*iEditor);
   conn142->stopHandlingNotificationsFor(*iFont);
   conn142->stopHandlingNotificationsFor(*iEditFont);
   conn153->stopHandlingNotificationsFor(*iEditFont);
   conn145->stopHandlingNotificationsFor(*iEditor);
   conn133->stopHandlingNotificationsFor(*iEditor);
   conn155->stopHandlingNotificationsFor(*this);
   conn167->stopHandlingNotificationsFor(*this);
   conn167->stopHandlingNotificationsFor(*iConfirmSectionDelete);
   conn168->stopHandlingNotificationsFor(*this);
   conn159->stopHandlingNotificationsFor(*this);
   conn160->stopHandlingNotificationsFor(*this);
   conn160->stopHandlingNotificationsFor(*iConfirmSectionPaste);
   conn154->stopHandlingNotificationsFor(*iNotOpen);
   conn154->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn178->stopHandlingNotificationsFor(*iSelectedSection);
   conn169->stopHandlingNotificationsFor(*iOpenedSection);
   conn162->stopHandlingNotificationsFor(*iNotOpen);
   conn162->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn190->stopHandlingNotificationsFor(*iNotOpen);
   conn190->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn181->stopHandlingNotificationsFor(*iNotOpen);
   conn181->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn152->stopHandlingNotificationsFor(*iNotOpen);
   conn152->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn163->stopHandlingNotificationsFor(*this);
   conn174->stopHandlingNotificationsFor(*this);
   conn174->stopHandlingNotificationsFor(*iConfirmFileNew);
   conn165->stopHandlingNotificationsFor(*iFile);
   conn165->stopHandlingNotificationsFor(*iConfirmFileNew);
   conn156->stopHandlingNotificationsFor(*this);
   conn177->stopHandlingNotificationsFor(*this);
   conn177->stopHandlingNotificationsFor(*iConfirmFileOpen);
   conn188->stopHandlingNotificationsFor(*iFile);
   conn188->stopHandlingNotificationsFor(*iConfirmFileOpen);
   conn189->stopHandlingNotificationsFor(*this);
   conn200->stopHandlingNotificationsFor(*iFile);
   conn200->stopHandlingNotificationsFor(*iComfirmFileClose);
   conn201->stopHandlingNotificationsFor(*this);
   conn201->stopHandlingNotificationsFor(*iComfirmFileClose);
   conn172->stopHandlingNotificationsFor(*iConfirmImportText);
   conn183->stopHandlingNotificationsFor(*this);
   conn183->stopHandlingNotificationsFor(*iConfirmImportText);
   conn184->stopHandlingNotificationsFor(*iFile);
   conn184->stopHandlingNotificationsFor(*iConfirmImportText);
   conn175->stopHandlingNotificationsFor(*iConfirmImportWinHelp);
   conn166->stopHandlingNotificationsFor(*this);
   conn166->stopHandlingNotificationsFor(*iConfirmImportWinHelp);
   conn187->stopHandlingNotificationsFor(*iFile);
   conn187->stopHandlingNotificationsFor(*iConfirmImportWinHelp);
   conn197->stopHandlingNotificationsFor(*iFile);
   conn197->stopHandlingNotificationsFor(*iNotOpen);
   conn207->stopHandlingNotificationsFor(*iFile);
   conn207->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn217->stopHandlingNotificationsFor(*this);
   conn198->stopHandlingNotificationsFor(*this);
   conn198->stopHandlingNotificationsFor(*iTitleBar);
   conn179->stopHandlingNotificationsFor(*iFile);
   conn179->stopHandlingNotificationsFor(*iTitleBar);
   conn170->stopHandlingNotificationsFor(*iOpenedSection);
   conn170->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn210->stopHandlingNotificationsFor(*iOpenedSection);
   conn210->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn220->stopHandlingNotificationsFor(*iOpenedSection);
   conn220->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn211->stopHandlingNotificationsFor(*iFileEmpty);
   conn211->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn182->stopHandlingNotificationsFor(*iFileEmpty);
   conn182->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn173->stopHandlingNotificationsFor(*iFileEmpty);
   conn173->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn194->stopHandlingNotificationsFor(*iFileEmpty);
   conn194->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn185->stopHandlingNotificationsFor(*iFile);
   conn185->stopHandlingNotificationsFor(*iFileEmpty);
   conn176->stopHandlingNotificationsFor(*iFileEmpty);
   conn176->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn227->stopHandlingNotificationsFor(*iFileEmpty);
   conn227->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn208->stopHandlingNotificationsFor(*iFileEmpty);
   conn208->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn199->stopHandlingNotificationsFor(*iFileEmpty);
   conn199->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn230->stopHandlingNotificationsFor(*iFileEmpty);
   conn230->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn221->stopHandlingNotificationsFor(*iFileEmpty);
   conn221->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn192->stopHandlingNotificationsFor(*iFileEmpty);
   conn192->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn193->stopHandlingNotificationsFor(*iEditor);
   conn193->stopHandlingNotificationsFor(*iNoProperties);
   conn204->stopHandlingNotificationsFor(*iNoProperties);
   conn204->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn195->stopHandlingNotificationsFor(*iFile);
   conn195->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn186->stopHandlingNotificationsFor(*iFile);
   conn186->stopHandlingNotificationsFor(*iVyperFrameMenu);
   conn237->stopHandlingNotificationsFor(*this);
   conn218->stopHandlingNotificationsFor(*this);
   conn209->stopHandlingNotificationsFor(*this);
   conn219->stopHandlingNotificationsFor(*iSymbolSelectorFactory);
   conn247->stopHandlingNotificationsFor(*iSymbolSelector);
   conn229->stopHandlingNotificationsFor(*iSymbolSelector);
   conn229->stopHandlingNotificationsFor(*iSelectedSymbol);
   conn250->stopHandlingNotificationsFor(*this);
   conn202->stopHandlingNotificationsFor(*this);
   conn202->stopHandlingNotificationsFor(*iConfirmClose);
   conn203->stopHandlingNotificationsFor(*this);
   conn214->stopHandlingNotificationsFor(*iConfirmClose);
   conn205->stopHandlingNotificationsFor(*iFile);
   conn205->stopHandlingNotificationsFor(*iConfirmClose);
   conn215->stopHandlingNotificationsFor(*this);
   conn196->stopHandlingNotificationsFor(*iEditor);
   conn257->stopHandlingNotificationsFor(*iEditor);
   conn238->stopHandlingNotificationsFor(*this);
   conn239->stopHandlingNotificationsFor(*iInfoFactory);
   conn260->stopHandlingNotificationsFor(*iInfoFactory);
   conn241->stopHandlingNotificationsFor(*this);
   conn241->stopHandlingNotificationsFor(*iInfo);
   conn212->stopHandlingNotificationsFor(*this);
   conn224->stopHandlingNotificationsFor(*this);
   conn224->stopHandlingNotificationsFor(*iExceptionNotification);
   conn225->stopHandlingNotificationsFor(*conn16);
   conn248->stopHandlingNotificationsFor(*conn32);
   conn234->stopHandlingNotificationsFor(*conn35);
   conn235->stopHandlingNotificationsFor(*conn49);
   conn216->stopHandlingNotificationsFor(*conn69);
   conn277->stopHandlingNotificationsFor(*conn92);
   conn258->stopHandlingNotificationsFor(*conn94);
   conn259->stopHandlingNotificationsFor(*conn38);
   conn280->stopHandlingNotificationsFor(*conn84);
   conn261->stopHandlingNotificationsFor(*conn95);
   conn232->stopHandlingNotificationsFor(*conn82);
   conn243->stopHandlingNotificationsFor(*conn83);
   conn244->stopHandlingNotificationsFor(*conn105);
   conn245->stopHandlingNotificationsFor(*conn106);
   conn226->stopHandlingNotificationsFor(*conn107);
   conn287->stopHandlingNotificationsFor(*conn120);
   conn268->stopHandlingNotificationsFor(*conn215);
   conn269->stopHandlingNotificationsFor(*conn157);
   conn290->stopHandlingNotificationsFor(*conn117);
   conn271->stopHandlingNotificationsFor(*conn118);
   conn242->stopHandlingNotificationsFor(*conn139);
   conn253->stopHandlingNotificationsFor(*conn130);
   conn254->stopHandlingNotificationsFor(*conn141);
   conn255->stopHandlingNotificationsFor(*conn112);
   conn236->stopHandlingNotificationsFor(*conn113);
   conn297->stopHandlingNotificationsFor(*conn237);
   conn278->stopHandlingNotificationsFor(*conn218);
   conn279->stopHandlingNotificationsFor(*conn209);
   conn300->stopHandlingNotificationsFor(*conn114);
   conn281->stopHandlingNotificationsFor(*conn115);
   conn252->stopHandlingNotificationsFor(*conn140);
   conn263->stopHandlingNotificationsFor(*conn247);
   conn264->stopHandlingNotificationsFor(*conn87);
   conn265->stopHandlingNotificationsFor(*conn86);
   conn246->stopHandlingNotificationsFor(*conn66);
   conn307->stopHandlingNotificationsFor(*conn58);
   conn288->stopHandlingNotificationsFor(*conn98);
   conn289->stopHandlingNotificationsFor(*conn100);
   conn310->stopHandlingNotificationsFor(*conn214);
   conn273->stopHandlingNotificationsFor(*this);
   conn275->stopHandlingNotificationsFor(*iInfo);
   conn256->stopHandlingNotificationsFor(*this);
   conn266->stopHandlingNotificationsFor(*this);
   conn276->stopHandlingNotificationsFor(*this);
   conn317->stopHandlingNotificationsFor(*iConfirmImportIpf);
   conn298->stopHandlingNotificationsFor(*this);
   conn298->stopHandlingNotificationsFor(*iConfirmImportIpf);
   conn299->stopHandlingNotificationsFor(*iFile);
   conn299->stopHandlingNotificationsFor(*iConfirmImportIpf);
   conn378->stopHandlingNotificationsFor(*iSettings);
   conn378->stopHandlingNotificationsFor(*iImportIpfDialog);
   conn316->stopHandlingNotificationsFor(*iImportIpfDialog);
   conn320->stopHandlingNotificationsFor(*iImportIpfDialog);
   conn283->stopHandlingNotificationsFor(*this);
   conn361->stopHandlingNotificationsFor(*iSettings);
   conn361->stopHandlingNotificationsFor(*iExportHeaderDialog);
   conn284->stopHandlingNotificationsFor(*iExportHeaderDialog);
   conn286->stopHandlingNotificationsFor(*iExportHeaderDialog);
   conn285->stopHandlingNotificationsFor(*iExportHeaderDialog);
   conn308->stopHandlingNotificationsFor(*this);
   conn466->stopHandlingNotificationsFor(*iSettings);
   conn466->stopHandlingNotificationsFor(*iExportRtfDialog);
   conn309->stopHandlingNotificationsFor(*iExportRtfDialog);
   conn366->stopHandlingNotificationsFor(*iExportRtfDialog);
   conn330->stopHandlingNotificationsFor(*iExportRtfDialog);
   conn293->stopHandlingNotificationsFor(*this);
   conn388->stopHandlingNotificationsFor(*iSettings);
   conn388->stopHandlingNotificationsFor(*iExportWinHelpDialog);
   conn294->stopHandlingNotificationsFor(*iExportWinHelpDialog);
   conn356->stopHandlingNotificationsFor(*iExportWinHelpDialog);
   conn295->stopHandlingNotificationsFor(*iExportWinHelpDialog);
   conn318->stopHandlingNotificationsFor(*this);
   conn340->stopHandlingNotificationsFor(*iRegFactory);
   conn319->stopHandlingNotificationsFor(*iRegFactory);
   conn311->stopHandlingNotificationsFor(*this);
   conn311->stopHandlingNotificationsFor(*iRegistration);
   conn292->stopHandlingNotificationsFor(*iSettings);
   conn292->stopHandlingNotificationsFor(*this);
   conn282->stopHandlingNotificationsFor(*iSettings);
   conn282->stopHandlingNotificationsFor(*this);
   conn303->stopHandlingNotificationsFor(*iSettings);
   conn303->stopHandlingNotificationsFor(*this);
   conn313->stopHandlingNotificationsFor(*iSectionContainer);
   conn304->stopHandlingNotificationsFor(*this);
   conn304->stopHandlingNotificationsFor(*iWait);
   conn305->stopHandlingNotificationsFor(*iWaitFactory);
   conn306->stopHandlingNotificationsFor(*iWait);
   conn306->stopHandlingNotificationsFor(*iFile);
   conn347->stopHandlingNotificationsFor(*this);
   conn328->stopHandlingNotificationsFor(*this);
   conn329->stopHandlingNotificationsFor(*this);
   conn329->stopHandlingNotificationsFor(*iFile);
   conn350->stopHandlingNotificationsFor(*this);
   conn291->stopHandlingNotificationsFor(*this);
   conn302->stopHandlingNotificationsFor(*iInsertArtFactory);
   conn323->stopHandlingNotificationsFor(*this);
   conn323->stopHandlingNotificationsFor(*iInsertArt);
   conn314->stopHandlingNotificationsFor(*iInsertArtFactory);
   conn416->stopHandlingNotificationsFor(*iInsertArt);
   conn338->stopHandlingNotificationsFor(*conn416);
   conn339->stopHandlingNotificationsFor(*iEditor);
   conn360->stopHandlingNotificationsFor(*iEditor);
   conn321->stopHandlingNotificationsFor(*iEditor);
   conn312->stopHandlingNotificationsFor(*this);
   conn333->stopHandlingNotificationsFor(*this);
   conn324->stopHandlingNotificationsFor(*this);
   conn364->stopHandlingNotificationsFor(*iSettings);
   conn364->stopHandlingNotificationsFor(*iHtmlSingleDialog);
   conn335->stopHandlingNotificationsFor(*iHtmlSingleDialog);
   conn352->stopHandlingNotificationsFor(*iSettings);
   conn352->stopHandlingNotificationsFor(*iHtmlFrameDialog);
   conn426->stopHandlingNotificationsFor(*iHtmlFrameDialog);
   conn373->stopHandlingNotificationsFor(*iSettings);
   conn373->stopHandlingNotificationsFor(*iHtmlHelpDialog);
   conn367->stopHandlingNotificationsFor(*iHtmlHelpDialog);
   conn348->stopHandlingNotificationsFor(*iHtmlSingleDialog);
   conn349->stopHandlingNotificationsFor(*iHtmlFrameDialog);
   conn370->stopHandlingNotificationsFor(*iHtmlHelpDialog);
   conn331->stopHandlingNotificationsFor(*iHtmlSingleDialog);
   conn343->stopHandlingNotificationsFor(*iHtmlFrameDialog);
   conn345->stopHandlingNotificationsFor(*iHtmlHelpDialog);
   conn358->stopHandlingNotificationsFor(*conn345);
   conn359->stopHandlingNotificationsFor(*conn343);
   conn380->stopHandlingNotificationsFor(*conn331);
   conn341->stopHandlingNotificationsFor(*conn295);
   conn332->stopHandlingNotificationsFor(*conn330);
   conn353->stopHandlingNotificationsFor(*conn285);
   conn344->stopHandlingNotificationsFor(*conn70);
   conn355->stopHandlingNotificationsFor(*conn68);
   conn446->stopHandlingNotificationsFor(*conn88);
   conn387->stopHandlingNotificationsFor(*conn53);
   conn368->stopHandlingNotificationsFor(*conn60);
   conn369->stopHandlingNotificationsFor(*conn320);
   conn390->stopHandlingNotificationsFor(*conn23);
   conn351->stopHandlingNotificationsFor(*conn19);
   conn342->stopHandlingNotificationsFor(*conn25);
   conn363->stopHandlingNotificationsFor(*conn16);
   conn365->stopHandlingNotificationsFor(*iSettings);
   conn365->stopHandlingNotificationsFor(*iFile);

   delete conn11;
   delete conn12;
   delete conn13;
   delete conn15;
   delete conn337;
   delete conn19;
   delete conn22;
   delete conn354;
   delete conn406;
   delete conn23;
   delete conn397;
   delete conn315;
   delete conn17;
   delete conn25;
   delete conn27;
   delete conn16;
   delete conn32;
   delete conn44;
   delete conn59;
   delete conn35;
   delete conn38;
   delete conn46;
   delete conn55;
   delete conn66;
   delete conn49;
   delete conn69;
   delete conn346;
   delete conn58;
   delete conn79;
   delete conn379;
   delete conn326;
   delete conn60;
   delete conn52;
   delete conn400;
   delete conn336;
   delete conn53;
   delete conn65;
   delete conn375;
   delete conn56;
   delete conn57;
   delete conn386;
   delete conn68;
   delete conn376;
   delete conn70;
   delete conn62;
   delete conn75;
   delete conn67;
   delete conn78;
   delete conn91;
   delete conn101;
   delete conn72;
   delete conn73;
   delete conn74;
   delete conn85;
   delete conn76;
   delete conn407;
   delete conn77;
   delete conn396;
   delete conn88;
   delete conn111;
   delete conn82;
   delete conn83;
   delete conn84;
   delete conn95;
   delete conn86;
   delete conn87;
   delete conn98;
   delete conn100;
   delete conn92;
   delete conn94;
   delete conn96;
   delete conn97;
   delete conn108;
   delete conn119;
   delete conn110;
   delete conn129;
   delete conn120;
   delete conn131;
   delete conn102;
   delete conn103;
   delete conn104;
   delete conn105;
   delete conn106;
   delete conn107;
   delete conn118;
   delete conn139;
   delete conn130;
   delete conn141;
   delete conn112;
   delete conn113;
   delete conn114;
   delete conn115;
   delete conn116;
   delete conn117;
   delete conn240;
   delete conn151;
   delete conn213;
   delete conn124;
   delete conn125;
   delete conn137;
   delete conn148;
   delete conn149;
   delete conn140;
   delete conn143;
   delete conn136;
   delete conn134;
   delete conn157;
   delete conn150;
   delete conn171;
   delete conn158;
   delete conn142;
   delete conn153;
   delete conn145;
   delete conn133;
   delete conn155;
   delete conn167;
   delete conn168;
   delete conn159;
   delete conn160;
   delete conn154;
   delete conn178;
   delete conn169;
   delete conn162;
   delete conn190;
   delete conn181;
   delete conn152;
   delete conn163;
   delete conn174;
   delete conn165;
   delete conn156;
   delete conn177;
   delete conn188;
   delete conn189;
   delete conn200;
   delete conn201;
   delete conn172;
   delete conn183;
   delete conn184;
   delete conn175;
   delete conn166;
   delete conn187;
   delete conn197;
   delete conn207;
   delete conn217;
   delete conn198;
   delete conn179;
   delete conn170;
   delete conn210;
   delete conn220;
   delete conn211;
   delete conn182;
   delete conn173;
   delete conn194;
   delete conn185;
   delete conn176;
   delete conn227;
   delete conn208;
   delete conn199;
   delete conn230;
   delete conn221;
   delete conn192;
   delete conn193;
   delete conn204;
   delete conn195;
   delete conn186;
   delete conn237;
   delete conn218;
   delete conn209;
   delete conn219;
   delete conn247;
   delete conn229;
   delete conn250;
   delete conn202;
   delete conn203;
   delete conn214;
   delete conn205;
   delete conn215;
   delete conn196;
   delete conn257;
   delete conn238;
   delete conn239;
   delete conn260;
   delete conn241;
   delete conn212;
   delete conn224;
   delete conn225;
   delete conn248;
   delete conn234;
   delete conn235;
   delete conn216;
   delete conn277;
   delete conn258;
   delete conn259;
   delete conn280;
   delete conn261;
   delete conn232;
   delete conn243;
   delete conn244;
   delete conn245;
   delete conn226;
   delete conn287;
   delete conn268;
   delete conn269;
   delete conn290;
   delete conn271;
   delete conn242;
   delete conn253;
   delete conn254;
   delete conn255;
   delete conn236;
   delete conn297;
   delete conn278;
   delete conn279;
   delete conn300;
   delete conn281;
   delete conn252;
   delete conn263;
   delete conn264;
   delete conn265;
   delete conn246;
   delete conn307;
   delete conn288;
   delete conn289;
   delete conn310;
   delete conn273;
   delete conn275;
   delete conn256;
   delete conn266;
   delete conn276;
   delete conn317;
   delete conn298;
   delete conn299;
   delete conn378;
   delete conn316;
   delete conn320;
   delete conn283;
   delete conn361;
   delete conn284;
   delete conn286;
   delete conn285;
   delete conn308;
   delete conn466;
   delete conn309;
   delete conn366;
   delete conn330;
   delete conn293;
   delete conn388;
   delete conn294;
   delete conn356;
   delete conn295;
   delete conn318;
   delete conn340;
   delete conn319;
   delete conn311;
   delete conn292;
   delete conn282;
   delete conn303;
   delete conn313;
   delete conn304;
   delete conn305;
   delete conn306;
   delete conn347;
   delete conn328;
   delete conn329;
   delete conn350;
   delete conn291;
   delete conn302;
   delete conn323;
   delete conn314;
   delete conn416;
   delete conn338;
   delete conn339;
   delete conn360;
   delete conn321;
   delete conn312;
   delete conn333;
   delete conn324;
   delete conn364;
   delete conn335;
   delete conn352;
   delete conn426;
   delete conn373;
   delete conn367;
   delete conn348;
   delete conn349;
   delete conn370;
   delete conn331;
   delete conn343;
   delete conn345;
   delete conn358;
   delete conn359;
   delete conn380;
   delete conn341;
   delete conn332;
   delete conn353;
   delete conn344;
   delete conn355;
   delete conn446;
   delete conn387;
   delete conn368;
   delete conn369;
   delete conn390;
   delete conn351;
   delete conn342;
   delete conn363;
   delete conn365;

   delete iVyperFrameMenu;
   iSectionContainerSectionEditHandler->stopHandlingEventsFor(iSectionContainer);
   delete iSectionContainerSectionEditHandler;
   iSectionContainerContainerHelpHandler->stopHandlingEventsFor(iSectionContainer);
   delete iSectionContainerContainerHelpHandler;

   delete iVyperFrameAccelTable;
   delete iInfoArea1;
   delete iVyperSplitCanvas;
   delete iSectionContainer;
   delete iVyperPort;
   delete iHelpWindow;
   delete iFileOpenDialog;
   delete iFileSaveDialog;
   delete iSectionFactory;
   delete iFile;
   delete iImportTextDialog;
   delete iImportWinHelpDialog;
   delete iExportIPFDialog;
   delete iExportTraceDialog;
   delete iDocProperties;
   delete iDocPropertiesFactory;
   delete iSectionPropertiesFactory;
   delete iSectionProperties;
   delete iExportTextDialog;
   delete iSelectedSection;
   delete iOpenedSection;
   delete iEditor;
   delete iInsertFont;
   delete iSymbolSelector;
   delete iSymbolSelectorFactory;
   delete iInsertLink;
   delete iInsertLinkFactory;
   delete iEditFont;
   delete iFont;
   delete iConfirmSectionDelete;
   delete iConfirmSectionPaste;
   delete iConfirmFileNew;
   delete iConfirmFileOpen;
   delete iComfirmFileClose;
   delete iConfirmImportText;
   delete iConfirmImportWinHelp;
   delete iNotOpen;
   delete iTitleBar;
   delete iFileEmpty;
   delete iNoProperties;
   delete iAllSymbols;
   delete iSelectedSymbol;
   delete iInterceptClose;
   delete iConfirmClose;
   delete iInfoFactory;
   delete iInfo;
   delete iExceptionNotification;
   delete iConfirmImportIpf;
   delete iImportIpfDialog;
   delete iExportHeaderDialog;
   delete iExportRtfDialog;
   delete iExportWinHelpDialog;
   delete iRegFactory;
   delete iRegistration;
   delete iSettings;
   delete iWait;
   delete iWaitFactory;
   delete iInsertArt;
   delete iInsertArtFactory;
   delete iHtmlSingleDialog;
   delete iHtmlFrameDialog;
   delete iHtmlHelpDialog;
}

//------------------------------------------------------------------------------
// Vyper :: initializePart
//------------------------------------------------------------------------------
#pragma export (Vyper::initializePart())
Vyper & Vyper::initializePart()
{
   iFile->initializePart();
   iSettings->initializePart();
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// Vyper :: makeConnections
//------------------------------------------------------------------------------
#pragma export (Vyper::makeConnections())
Boolean Vyper::makeConnections()
{
   this->enableNotification();
   iInfoArea1->enableNotification();
   iVyperSplitCanvas->enableNotification();
   iSectionContainer->enableNotification();
   iVyperPort->enableNotification();
   iHelpWindow->enableNotification();
   iFileOpenDialog->enableNotification();
   iFileSaveDialog->enableNotification();
   iSectionFactory->enableNotification();
   iFile->enableNotification();
   iImportTextDialog->enableNotification();
   iImportWinHelpDialog->enableNotification();
   iExportIPFDialog->enableNotification();
   iExportTraceDialog->enableNotification();
   iDocProperties->enableNotification();
   iDocPropertiesFactory->enableNotification();
   iSectionPropertiesFactory->enableNotification();
   iSectionProperties->enableNotification();
   iExportTextDialog->enableNotification();
   iSelectedSection->enableNotification();
   iOpenedSection->enableNotification();
   iEditor->enableNotification();
   iInsertFont->enableNotification();
   iSymbolSelector->enableNotification();
   iSymbolSelectorFactory->enableNotification();
   iInsertLink->enableNotification();
   iInsertLinkFactory->enableNotification();
   iEditFont->enableNotification();
   iFont->enableNotification();
   iConfirmSectionDelete->enableNotification();
   iConfirmSectionPaste->enableNotification();
   iConfirmFileNew->enableNotification();
   iConfirmFileOpen->enableNotification();
   iComfirmFileClose->enableNotification();
   iConfirmImportText->enableNotification();
   iConfirmImportWinHelp->enableNotification();
   iNotOpen->enableNotification();
   iTitleBar->enableNotification();
   iFileEmpty->enableNotification();
   iNoProperties->enableNotification();
   iAllSymbols->enableNotification();
   iSelectedSymbol->enableNotification();
   iConfirmClose->enableNotification();
   iInfoFactory->enableNotification();
   iInfo->enableNotification();
   iExceptionNotification->enableNotification();
   iConfirmImportIpf->enableNotification();
   iImportIpfDialog->enableNotification();
   iExportHeaderDialog->enableNotification();
   iExportRtfDialog->enableNotification();
   iExportWinHelpDialog->enableNotification();
   iRegFactory->enableNotification();
   iRegistration->enableNotification();
   iSettings->enableNotification();
   iWait->enableNotification();
   iWaitFactory->enableNotification();
   iInsertArt->enableNotification();
   iInsertArtFactory->enableNotification();
   iHtmlSingleDialog->enableNotification();
   iHtmlFrameDialog->enableNotification();
   iHtmlHelpDialog->enableNotification();

   unsigned long id = this->id();
   conn11->initialize(iVyperFrameMenu, iHelpWindow);
   conn11->handleNotificationsFor(*this);
   conn12->initialize(iVyperFrameMenu, iHelpWindow);
   conn12->handleNotificationsFor(*this);
   conn13->initialize(iVyperFrameMenu, iHelpWindow);
   conn13->handleNotificationsFor(*this);
   conn15->initialize(iConfirmFileOpen, iFileOpenDialog);
   conn15->handleNotificationsFor(*iConfirmFileOpen);
   conn337->initialize(iVyperFrameMenu, iWaitFactory);
   conn337->handleNotificationsFor(*this);
   conn19->initialize(iVyperFrameMenu, iFile);
   conn19->handleNotificationsFor(*this);
   conn22->initialize(iVyperFrameMenu, iFileSaveDialog);
   conn22->handleNotificationsFor(*this);
   conn354->initialize(iSettings, iFileSaveDialog);
   conn354->handleNotificationsFor(*iSettings);
   conn354->handleNotificationsFor(*iFileSaveDialog);
   conn406->initialize(iFileSaveDialog, iWaitFactory);
   conn406->handleNotificationsFor(*iFileSaveDialog);
   conn23->initialize(iFileSaveDialog, iFile);
   conn23->handleNotificationsFor(*iFileSaveDialog);
   conn23->setFilename(iFileSaveDialog);
   conn397->initialize(iSettings, iFileOpenDialog);
   conn397->handleNotificationsFor(*iSettings);
   conn397->handleNotificationsFor(*iFileOpenDialog);
   conn315->initialize(iFileOpenDialog, iWaitFactory);
   conn315->handleNotificationsFor(*iFileOpenDialog);
   conn17->initialize(iFileOpenDialog, iFile);
   conn17->handleNotificationsFor(*iFileOpenDialog);
   conn17->setAFilename(iFileOpenDialog);
   conn25->initialize(iFileOpenDialog, iFile);
   conn25->handleNotificationsFor(*iFileOpenDialog);
   conn27->initialize(iFileSaveDialog, iFileSaveDialog);
   conn27->handleNotificationsFor(*iFileSaveDialog);
   conn16->initialize(iConfirmFileNew, iFile);
   conn16->handleNotificationsFor(*iConfirmFileNew);
   conn32->initialize(iComfirmFileClose, iFile);
   conn32->handleNotificationsFor(*iComfirmFileClose);
   conn44->initialize(iFile, iSectionContainer);
   conn44->handleNotificationsFor(*iFile);
   conn44->handleNotificationsFor(*iSectionContainer);
   conn59->initialize(iVyperFrameMenu, iSectionFactory);
   conn59->handleNotificationsFor(*this);
   conn35->initialize(iVyperFrameMenu, iFile);
   conn35->handleNotificationsFor(*this);
   conn38->initialize(iConfirmSectionDelete, iFile);
   conn38->handleNotificationsFor(*iConfirmSectionDelete);
   conn35->setVySection(conn59);
   conn46->initialize(iFile, iSectionContainer);
   conn46->handleNotificationsFor(*iFile);
   conn46->handleNotificationsFor(*iSectionContainer);
   conn55->initialize(iSectionContainer, iFile);
   conn55->handleNotificationsFor(*iSectionContainer);
   conn55->handleNotificationsFor(*iFile);
   conn66->initialize(iSectionContainer, iFile);
   conn66->handleNotificationsFor(*iSectionContainer);
   conn66->setIViewPort(iVyperPort);
   conn49->initialize(iVyperFrameMenu, iFile);
   conn49->handleNotificationsFor(*this);
   conn49->setIViewPort(iVyperPort);
   conn69->initialize(iVyperFrameMenu, iFile);
   conn69->handleNotificationsFor(*this);
   conn346->initialize(this, iWaitFactory);
   conn346->handleNotificationsFor(*this);
   conn58->initialize(this, iSectionContainer);
   conn58->handleNotificationsFor(*this);
   conn79->initialize(iVyperFrameMenu, iConfirmImportText);
   conn79->handleNotificationsFor(*this);
   conn379->initialize(iSettings, iImportTextDialog);
   conn379->handleNotificationsFor(*iSettings);
   conn379->handleNotificationsFor(*iImportTextDialog);
   conn326->initialize(iImportTextDialog, iWaitFactory);
   conn326->handleNotificationsFor(*iImportTextDialog);
   conn60->initialize(iImportTextDialog, iFile);
   conn60->handleNotificationsFor(*iImportTextDialog);
   conn60->setIString(iImportTextDialog);
   conn52->initialize(iVyperFrameMenu, iConfirmImportWinHelp);
   conn52->handleNotificationsFor(*this);
   conn400->initialize(iSettings, iImportWinHelpDialog);
   conn400->handleNotificationsFor(*iSettings);
   conn400->handleNotificationsFor(*iImportWinHelpDialog);
   conn336->initialize(iImportWinHelpDialog, iWaitFactory);
   conn336->handleNotificationsFor(*iImportWinHelpDialog);
   conn53->initialize(iImportWinHelpDialog, iFile);
   conn53->handleNotificationsFor(*iImportWinHelpDialog);
   conn53->setIString(iImportWinHelpDialog);
   conn65->initialize(iVyperFrameMenu, iExportIPFDialog);
   conn65->handleNotificationsFor(*this);
   conn375->initialize(iSettings, iExportIPFDialog);
   conn375->handleNotificationsFor(*iSettings);
   conn375->handleNotificationsFor(*iExportIPFDialog);
   conn56->initialize(iExportIPFDialog, iExportIPFDialog);
   conn56->handleNotificationsFor(*iExportIPFDialog);
   conn57->initialize(iExportTraceDialog, iExportTraceDialog);
   conn57->handleNotificationsFor(*iExportTraceDialog);
   conn386->initialize(iExportIPFDialog, iWaitFactory);
   conn386->handleNotificationsFor(*iExportIPFDialog);
   conn68->initialize(iExportIPFDialog, iFile);
   conn68->handleNotificationsFor(*iExportIPFDialog);
   conn68->setIString(iExportIPFDialog);
   conn376->initialize(iExportTraceDialog, iWaitFactory);
   conn376->handleNotificationsFor(*iExportTraceDialog);
   conn70->initialize(iExportTraceDialog, iFile);
   conn70->handleNotificationsFor(*iExportTraceDialog);
   conn70->setIString(iExportTraceDialog);
   conn62->initialize(iVyperFrameMenu, iExportTraceDialog);
   conn62->handleNotificationsFor(*this);
   conn75->initialize(iFile, iDocProperties);
   conn75->handleNotificationsFor(*iFile);
   conn75->handleNotificationsFor(*iDocProperties);
   conn67->initialize(iDocPropertiesFactory, iDocProperties);
   conn67->handleNotificationsFor(*iDocPropertiesFactory);
   conn78->initialize(iVyperFrameMenu, iDocPropertiesFactory);
   conn78->handleNotificationsFor(*this);
   conn91->initialize(iDocPropertiesFactory, iDocProperties);
   conn91->handleNotificationsFor(*iDocPropertiesFactory);
   conn101->initialize(this, iDocProperties);
   conn101->handleNotificationsFor(*this);
   conn101->handleNotificationsFor(*iDocProperties);
   conn72->initialize(iVyperFrameMenu, iSectionPropertiesFactory);
   conn72->handleNotificationsFor(*this);
   conn73->initialize(iSectionPropertiesFactory, iSectionProperties);
   conn73->handleNotificationsFor(*iSectionPropertiesFactory);
   conn74->initialize(iSectionPropertiesFactory, iSectionProperties);
   conn74->handleNotificationsFor(*iSectionPropertiesFactory);
   conn85->initialize(iSelectedSection, iSectionProperties);
   conn85->handleNotificationsFor(*iSelectedSection);
   conn85->handleNotificationsFor(*iSectionProperties);
   conn76->initialize(this, iSectionProperties);
   conn76->handleNotificationsFor(*this);
   conn76->handleNotificationsFor(*iSectionProperties);
   conn407->initialize(iSettings, iExportTextDialog);
   conn407->handleNotificationsFor(*iSettings);
   conn407->handleNotificationsFor(*iExportTextDialog);
   conn77->initialize(iExportTextDialog, iExportTextDialog);
   conn77->handleNotificationsFor(*iExportTextDialog);
   conn396->initialize(iExportTextDialog, iWaitFactory);
   conn396->handleNotificationsFor(*iExportTextDialog);
   conn88->initialize(iExportTextDialog, iFile);
   conn88->handleNotificationsFor(*iExportTextDialog);
   conn88->setIString(iExportTextDialog);
   conn111->initialize(iVyperFrameMenu, iExportTextDialog);
   conn111->handleNotificationsFor(*this);
   conn82->initialize(iVyperFrameMenu, iFile);
   conn82->handleNotificationsFor(*this);
   conn83->initialize(iVyperFrameMenu, iFile);
   conn83->handleNotificationsFor(*this);
   conn84->initialize(iVyperFrameMenu, iFile);
   conn84->handleNotificationsFor(*this);
   conn95->initialize(iVyperFrameMenu, iFile);
   conn95->handleNotificationsFor(*this);
   conn86->initialize(iVyperFrameMenu, iSectionContainer);
   conn86->handleNotificationsFor(*this);
   conn87->initialize(iVyperFrameMenu, iSectionContainer);
   conn87->handleNotificationsFor(*this);
   conn98->initialize(iVyperFrameMenu, iSectionContainer);
   conn98->handleNotificationsFor(*this);
   conn98->setObject(iSectionContainer);
   conn100->initialize(iVyperFrameMenu, iSectionContainer);
   conn100->handleNotificationsFor(*this);
   conn100->setObject(iSectionContainer);
   conn92->initialize(iVyperFrameMenu, iSelectedSection);
   conn92->handleNotificationsFor(*this);
   conn94->initialize(iConfirmSectionPaste, iSelectedSection);
   conn94->handleNotificationsFor(*iConfirmSectionPaste);
   conn96->initialize(iFile, iSelectedSection);
   conn96->handleNotificationsFor(*iFile);
   conn96->handleNotificationsFor(*iSelectedSection);
   conn97->initialize(iFile, iOpenedSection);
   conn97->handleNotificationsFor(*iFile);
   conn97->handleNotificationsFor(*iOpenedSection);
   conn108->initialize(iOpenedSection, iEditor);
   conn108->handleNotificationsFor(*iOpenedSection);
   conn108->handleNotificationsFor(*iEditor);
   conn119->initialize(this, iSelectedSection);
   conn119->handleNotificationsFor(*this);
   conn119->handleNotificationsFor(*iSelectedSection);
   conn110->initialize(this, iOpenedSection);
   conn110->handleNotificationsFor(*this);
   conn110->handleNotificationsFor(*iOpenedSection);
   conn129->initialize(iVyperPort, iEditor);
   conn129->handleNotificationsFor(*iVyperPort);
   conn120->initialize(iVyperFrameMenu, iEditor);
   conn120->handleNotificationsFor(*this);
   conn131->initialize(this, iEditor);
   conn131->handleNotificationsFor(*this);
   conn102->initialize(iOpenedSection, iOpenedSection);
   conn102->handleNotificationsFor(*iOpenedSection);
   conn103->initialize(iSelectedSection, iSelectedSection);
   conn103->handleNotificationsFor(*iSelectedSection);
   conn104->initialize(iEditor, iInfoArea1);
   conn104->handleNotificationsFor(*iEditor);
   conn104->handleNotificationsFor(*iInfoArea1);
   conn105->initialize(iVyperFrameMenu, iOpenedSection);
   conn105->handleNotificationsFor(*this);
   conn106->initialize(iVyperFrameMenu, iOpenedSection);
   conn106->handleNotificationsFor(*this);
   conn107->initialize(iVyperFrameMenu, iOpenedSection);
   conn107->handleNotificationsFor(*this);
   conn118->initialize(iVyperFrameMenu, iEditor);
   conn118->handleNotificationsFor(*this);
   conn139->initialize(iVyperFrameMenu, iEditor);
   conn139->handleNotificationsFor(*this);
   conn130->initialize(iVyperFrameMenu, iEditor);
   conn130->handleNotificationsFor(*this);
   conn141->initialize(iVyperFrameMenu, iEditor);
   conn141->handleNotificationsFor(*this);
   conn112->initialize(iVyperFrameMenu, iEditor);
   conn112->handleNotificationsFor(*this);
   conn113->initialize(iVyperFrameMenu, iEditor);
   conn113->handleNotificationsFor(*this);
   conn114->initialize(iVyperFrameMenu, iEditor);
   conn114->handleNotificationsFor(*this);
   conn115->initialize(iVyperFrameMenu, iEditor);
   conn115->handleNotificationsFor(*this);
   conn116->initialize(iVyperFrameMenu, iInsertFont);
   conn116->handleNotificationsFor(*this);
   conn117->initialize(iInsertFont, iEditor);
   conn117->handleNotificationsFor(*iInsertFont);
   conn117->setInfo(iInsertFont);
   conn240->initialize(iAllSymbols, iSymbolSelector);
   conn240->handleNotificationsFor(*iAllSymbols);
   conn240->handleNotificationsFor(*iSymbolSelector);
   conn151->initialize(this, iSymbolSelector);
   conn151->handleNotificationsFor(*this);
   conn151->handleNotificationsFor(*iSymbolSelector);
   conn213->initialize(iVyperFrameMenu, this);
   conn213->handleNotificationsFor(*this);
   conn124->initialize(iVyperFrameMenu, iSymbolSelectorFactory);
   conn124->handleNotificationsFor(*this);
   conn125->initialize(iSymbolSelectorFactory, iSymbolSelector);
   conn125->handleNotificationsFor(*iSymbolSelectorFactory);
   conn137->initialize(this, this);
   conn137->handleNotificationsFor(*this);
   conn148->initialize(this, iInsertFont);
   conn148->handleNotificationsFor(*this);
   conn149->initialize(iVyperFrameMenu, iInsertLinkFactory);
   conn149->handleNotificationsFor(*this);
   conn140->initialize(iInsertLink, iEditor);
   conn140->handleNotificationsFor(*iInsertLink);
   conn140->setLink(iInsertLink);
   conn143->initialize(iInsertLinkFactory, iInsertLink);
   conn143->handleNotificationsFor(*iInsertLinkFactory);
   conn136->initialize(iInsertLinkFactory, iInsertLink);
   conn136->handleNotificationsFor(*iInsertLinkFactory);
   conn134->initialize(this, iInsertLink);
   conn134->handleNotificationsFor(*this);
   conn134->handleNotificationsFor(*iInsertLink);
   conn136->setThis(iFile);
   conn157->initialize(iVyperFrameMenu, iEditor);
   conn157->handleNotificationsFor(*this);
   conn150->initialize(iEditor, iFont);
   conn150->handleNotificationsFor(*iEditor);
   conn171->initialize(iEditor, iEditFont);
   conn171->handleNotificationsFor(*iEditor);
   conn158->initialize(iEditor, iInsertLinkFactory);
   conn158->handleNotificationsFor(*iEditor);
   conn142->initialize(iFont, iEditFont);
   conn142->handleNotificationsFor(*iFont);
   conn142->handleNotificationsFor(*iEditFont);
   conn153->initialize(iEditFont, iFont);
   conn153->handleNotificationsFor(*iEditFont);
   conn153->setAFont(iEditFont);
   conn145->initialize(iEditor, iInsertLink);
   conn145->handleNotificationsFor(*iEditor);
   conn133->initialize(iEditor, iInsertLink);
   conn133->handleNotificationsFor(*iEditor);
   conn155->initialize(iVyperFrameMenu, iInsertLink);
   conn155->handleNotificationsFor(*this);
   conn167->initialize(this, iConfirmSectionDelete);
   conn167->handleNotificationsFor(*this);
   conn167->handleNotificationsFor(*iConfirmSectionDelete);
   conn168->initialize(iVyperFrameMenu, iConfirmSectionDelete);
   conn168->handleNotificationsFor(*this);
   conn159->initialize(iVyperFrameMenu, iConfirmSectionPaste);
   conn159->handleNotificationsFor(*this);
   conn160->initialize(this, iConfirmSectionPaste);
   conn160->handleNotificationsFor(*this);
   conn160->handleNotificationsFor(*iConfirmSectionPaste);
   conn154->initialize(iNotOpen, iVyperFrameMenu);
   conn154->handleNotificationsFor(*iNotOpen);
   conn154->handleNotificationsFor(*iVyperFrameMenu);
   conn178->initialize(iSelectedSection, iFile);
   conn178->handleNotificationsFor(*iSelectedSection);
   conn169->initialize(iOpenedSection, iFile);
   conn169->handleNotificationsFor(*iOpenedSection);
   conn178->setSection(iSelectedSection);
   conn169->setSection(iOpenedSection);
   conn162->initialize(iNotOpen, iVyperFrameMenu);
   conn162->handleNotificationsFor(*iNotOpen);
   conn162->handleNotificationsFor(*iVyperFrameMenu);
   conn190->initialize(iNotOpen, iVyperFrameMenu);
   conn190->handleNotificationsFor(*iNotOpen);
   conn190->handleNotificationsFor(*iVyperFrameMenu);
   conn181->initialize(iNotOpen, iVyperFrameMenu);
   conn181->handleNotificationsFor(*iNotOpen);
   conn181->handleNotificationsFor(*iVyperFrameMenu);
   conn152->initialize(iNotOpen, iVyperFrameMenu);
   conn152->handleNotificationsFor(*iNotOpen);
   conn152->handleNotificationsFor(*iVyperFrameMenu);
   conn163->initialize(iVyperFrameMenu, iConfirmFileNew);
   conn163->handleNotificationsFor(*this);
   conn174->initialize(this, iConfirmFileNew);
   conn174->handleNotificationsFor(*this);
   conn174->handleNotificationsFor(*iConfirmFileNew);
   conn165->initialize(iFile, iConfirmFileNew);
   conn165->handleNotificationsFor(*iFile);
   conn165->handleNotificationsFor(*iConfirmFileNew);
   conn156->initialize(iVyperFrameMenu, iConfirmFileOpen);
   conn156->handleNotificationsFor(*this);
   conn177->initialize(this, iConfirmFileOpen);
   conn177->handleNotificationsFor(*this);
   conn177->handleNotificationsFor(*iConfirmFileOpen);
   conn188->initialize(iFile, iConfirmFileOpen);
   conn188->handleNotificationsFor(*iFile);
   conn188->handleNotificationsFor(*iConfirmFileOpen);
   conn189->initialize(iVyperFrameMenu, iComfirmFileClose);
   conn189->handleNotificationsFor(*this);
   conn200->initialize(iFile, iComfirmFileClose);
   conn200->handleNotificationsFor(*iFile);
   conn200->handleNotificationsFor(*iComfirmFileClose);
   conn201->initialize(this, iComfirmFileClose);
   conn201->handleNotificationsFor(*this);
   conn201->handleNotificationsFor(*iComfirmFileClose);
   conn172->initialize(iConfirmImportText, iImportTextDialog);
   conn172->handleNotificationsFor(*iConfirmImportText);
   conn183->initialize(this, iConfirmImportText);
   conn183->handleNotificationsFor(*this);
   conn183->handleNotificationsFor(*iConfirmImportText);
   conn184->initialize(iFile, iConfirmImportText);
   conn184->handleNotificationsFor(*iFile);
   conn184->handleNotificationsFor(*iConfirmImportText);
   conn175->initialize(iConfirmImportWinHelp, iImportWinHelpDialog);
   conn175->handleNotificationsFor(*iConfirmImportWinHelp);
   conn166->initialize(this, iConfirmImportWinHelp);
   conn166->handleNotificationsFor(*this);
   conn166->handleNotificationsFor(*iConfirmImportWinHelp);
   conn187->initialize(iFile, iConfirmImportWinHelp);
   conn187->handleNotificationsFor(*iFile);
   conn187->handleNotificationsFor(*iConfirmImportWinHelp);
   conn197->initialize(iFile, iNotOpen);
   conn197->handleNotificationsFor(*iFile);
   conn197->handleNotificationsFor(*iNotOpen);
   conn207->initialize(iFile, iVyperFrameMenu);
   conn207->handleNotificationsFor(*iFile);
   conn207->handleNotificationsFor(*iVyperFrameMenu);
   conn217->initialize(this, iFile);
   conn217->handleNotificationsFor(*this);
   conn198->initialize(this, iTitleBar);
   conn198->handleNotificationsFor(*this);
   conn198->handleNotificationsFor(*iTitleBar);
   conn179->initialize(iFile, iTitleBar);
   conn179->handleNotificationsFor(*iFile);
   conn179->handleNotificationsFor(*iTitleBar);
   conn170->initialize(iOpenedSection, iVyperFrameMenu);
   conn170->handleNotificationsFor(*iOpenedSection);
   conn170->handleNotificationsFor(*iVyperFrameMenu);
   conn210->initialize(iOpenedSection, iVyperFrameMenu);
   conn210->handleNotificationsFor(*iOpenedSection);
   conn210->handleNotificationsFor(*iVyperFrameMenu);
   conn220->initialize(iOpenedSection, iVyperFrameMenu);
   conn220->handleNotificationsFor(*iOpenedSection);
   conn220->handleNotificationsFor(*iVyperFrameMenu);
   conn211->initialize(iFileEmpty, iVyperFrameMenu);
   conn211->handleNotificationsFor(*iFileEmpty);
   conn211->handleNotificationsFor(*iVyperFrameMenu);
   conn182->initialize(iFileEmpty, iVyperFrameMenu);
   conn182->handleNotificationsFor(*iFileEmpty);
   conn182->handleNotificationsFor(*iVyperFrameMenu);
   conn173->initialize(iFileEmpty, iVyperFrameMenu);
   conn173->handleNotificationsFor(*iFileEmpty);
   conn173->handleNotificationsFor(*iVyperFrameMenu);
   conn194->initialize(iFileEmpty, iVyperFrameMenu);
   conn194->handleNotificationsFor(*iFileEmpty);
   conn194->handleNotificationsFor(*iVyperFrameMenu);
   conn185->initialize(iFile, iFileEmpty);
   conn185->handleNotificationsFor(*iFile);
   conn185->handleNotificationsFor(*iFileEmpty);
   conn176->initialize(iFileEmpty, iVyperFrameMenu);
   conn176->handleNotificationsFor(*iFileEmpty);
   conn176->handleNotificationsFor(*iVyperFrameMenu);
   conn227->initialize(iFileEmpty, iVyperFrameMenu);
   conn227->handleNotificationsFor(*iFileEmpty);
   conn227->handleNotificationsFor(*iVyperFrameMenu);
   conn208->initialize(iFileEmpty, iVyperFrameMenu);
   conn208->handleNotificationsFor(*iFileEmpty);
   conn208->handleNotificationsFor(*iVyperFrameMenu);
   conn199->initialize(iFileEmpty, iVyperFrameMenu);
   conn199->handleNotificationsFor(*iFileEmpty);
   conn199->handleNotificationsFor(*iVyperFrameMenu);
   conn230->initialize(iFileEmpty, iVyperFrameMenu);
   conn230->handleNotificationsFor(*iFileEmpty);
   conn230->handleNotificationsFor(*iVyperFrameMenu);
   conn221->initialize(iFileEmpty, iVyperFrameMenu);
   conn221->handleNotificationsFor(*iFileEmpty);
   conn221->handleNotificationsFor(*iVyperFrameMenu);
   conn192->initialize(iFileEmpty, iVyperFrameMenu);
   conn192->handleNotificationsFor(*iFileEmpty);
   conn192->handleNotificationsFor(*iVyperFrameMenu);
   conn193->initialize(iEditor, iNoProperties);
   conn193->handleNotificationsFor(*iEditor);
   conn193->handleNotificationsFor(*iNoProperties);
   conn204->initialize(iNoProperties, iVyperFrameMenu);
   conn204->handleNotificationsFor(*iNoProperties);
   conn204->handleNotificationsFor(*iVyperFrameMenu);
   conn195->initialize(iFile, iVyperFrameMenu);
   conn195->handleNotificationsFor(*iFile);
   conn195->handleNotificationsFor(*iVyperFrameMenu);
   conn186->initialize(iFile, iVyperFrameMenu);
   conn186->handleNotificationsFor(*iFile);
   conn186->handleNotificationsFor(*iVyperFrameMenu);
   conn237->initialize(iVyperFrameMenu, iEditor);
   conn237->handleNotificationsFor(*this);
   conn218->initialize(iVyperFrameMenu, iEditor);
   conn218->handleNotificationsFor(*this);
   conn209->initialize(iVyperFrameMenu, iEditor);
   conn209->handleNotificationsFor(*this);
   conn219->initialize(iSymbolSelectorFactory, iSymbolSelector);
   conn219->handleNotificationsFor(*iSymbolSelectorFactory);
   conn247->initialize(iSymbolSelector, iEditor);
   conn247->handleNotificationsFor(*iSymbolSelector);
   conn247->setSymbol(iSelectedSymbol);
   conn229->initialize(iSymbolSelector, iSelectedSymbol);
   conn229->handleNotificationsFor(*iSymbolSelector);
   conn229->handleNotificationsFor(*iSelectedSymbol);
   conn250->initialize(this, iInterceptClose);
   conn250->handleNotificationsFor(*this);
   conn250->setWindow(this);
   conn202->initialize(this, iConfirmClose);
   conn202->handleNotificationsFor(*this);
   conn202->handleNotificationsFor(*iConfirmClose);
   conn203->initialize(this, iConfirmClose);
   conn203->handleNotificationsFor(*this);
   conn214->initialize(iConfirmClose, this);
   conn214->handleNotificationsFor(*iConfirmClose);
   conn205->initialize(iFile, iConfirmClose);
   conn205->handleNotificationsFor(*iFile);
   conn205->handleNotificationsFor(*iConfirmClose);
   conn215->initialize(iVyperFrameMenu, iEditor);
   conn215->handleNotificationsFor(*this);
   conn196->initialize(iEditor, iOpenedSection);
   conn196->handleNotificationsFor(*iEditor);
   conn257->initialize(iEditor, iExceptionNotification);
   conn257->handleNotificationsFor(*iEditor);
   conn238->initialize(iVyperFrameMenu, iInfoFactory);
   conn238->handleNotificationsFor(*this);
   conn239->initialize(iInfoFactory, iInfo);
   conn239->handleNotificationsFor(*iInfoFactory);
   conn260->initialize(iInfoFactory, iInfo);
   conn260->handleNotificationsFor(*iInfoFactory);
   conn241->initialize(this, iInfo);
   conn241->handleNotificationsFor(*this);
   conn241->handleNotificationsFor(*iInfo);
   conn212->initialize(this, iFile);
   conn212->handleNotificationsFor(*this);
   conn224->initialize(this, iExceptionNotification);
   conn224->handleNotificationsFor(*this);
   conn224->handleNotificationsFor(*iExceptionNotification);
   conn225->initialize(conn16, iExceptionNotification);
   conn225->handleNotificationsFor(*conn16);
   conn248->initialize(conn32, iExceptionNotification);
   conn248->handleNotificationsFor(*conn32);
   conn234->initialize(conn35, iExceptionNotification);
   conn234->handleNotificationsFor(*conn35);
   conn235->initialize(conn49, iExceptionNotification);
   conn235->handleNotificationsFor(*conn49);
   conn216->initialize(conn69, iExceptionNotification);
   conn216->handleNotificationsFor(*conn69);
   conn277->initialize(conn92, iExceptionNotification);
   conn277->handleNotificationsFor(*conn92);
   conn258->initialize(conn94, iExceptionNotification);
   conn258->handleNotificationsFor(*conn94);
   conn259->initialize(conn38, iExceptionNotification);
   conn259->handleNotificationsFor(*conn38);
   conn280->initialize(conn84, iExceptionNotification);
   conn280->handleNotificationsFor(*conn84);
   conn261->initialize(conn95, iExceptionNotification);
   conn261->handleNotificationsFor(*conn95);
   conn232->initialize(conn82, iExceptionNotification);
   conn232->handleNotificationsFor(*conn82);
   conn243->initialize(conn83, iExceptionNotification);
   conn243->handleNotificationsFor(*conn83);
   conn244->initialize(conn105, iExceptionNotification);
   conn244->handleNotificationsFor(*conn105);
   conn245->initialize(conn106, iExceptionNotification);
   conn245->handleNotificationsFor(*conn106);
   conn226->initialize(conn107, iExceptionNotification);
   conn226->handleNotificationsFor(*conn107);
   conn287->initialize(conn120, iExceptionNotification);
   conn287->handleNotificationsFor(*conn120);
   conn268->initialize(conn215, iExceptionNotification);
   conn268->handleNotificationsFor(*conn215);
   conn269->initialize(conn157, iExceptionNotification);
   conn269->handleNotificationsFor(*conn157);
   conn290->initialize(conn117, iExceptionNotification);
   conn290->handleNotificationsFor(*conn117);
   conn271->initialize(conn118, iExceptionNotification);
   conn271->handleNotificationsFor(*conn118);
   conn242->initialize(conn139, iExceptionNotification);
   conn242->handleNotificationsFor(*conn139);
   conn253->initialize(conn130, iExceptionNotification);
   conn253->handleNotificationsFor(*conn130);
   conn254->initialize(conn141, iExceptionNotification);
   conn254->handleNotificationsFor(*conn141);
   conn255->initialize(conn112, iExceptionNotification);
   conn255->handleNotificationsFor(*conn112);
   conn236->initialize(conn113, iExceptionNotification);
   conn236->handleNotificationsFor(*conn113);
   conn297->initialize(conn237, iExceptionNotification);
   conn297->handleNotificationsFor(*conn237);
   conn278->initialize(conn218, iExceptionNotification);
   conn278->handleNotificationsFor(*conn218);
   conn279->initialize(conn209, iExceptionNotification);
   conn279->handleNotificationsFor(*conn209);
   conn300->initialize(conn114, iExceptionNotification);
   conn300->handleNotificationsFor(*conn114);
   conn281->initialize(conn115, iExceptionNotification);
   conn281->handleNotificationsFor(*conn115);
   conn252->initialize(conn140, iExceptionNotification);
   conn252->handleNotificationsFor(*conn140);
   conn263->initialize(conn247, iExceptionNotification);
   conn263->handleNotificationsFor(*conn247);
   conn264->initialize(conn87, iExceptionNotification);
   conn264->handleNotificationsFor(*conn87);
   conn265->initialize(conn86, iExceptionNotification);
   conn265->handleNotificationsFor(*conn86);
   conn246->initialize(conn66, iExceptionNotification);
   conn246->handleNotificationsFor(*conn66);
   conn307->initialize(conn58, iExceptionNotification);
   conn307->handleNotificationsFor(*conn58);
   conn288->initialize(conn98, iExceptionNotification);
   conn288->handleNotificationsFor(*conn98);
   conn289->initialize(conn100, iExceptionNotification);
   conn289->handleNotificationsFor(*conn100);
   conn310->initialize(conn214, iExceptionNotification);
   conn310->handleNotificationsFor(*conn214);
   conn273->initialize(this, iHelpWindow);
   conn273->handleNotificationsFor(*this);
   conn273->setAssociatedWindow(this);
   conn275->initialize(iInfo, iHelpWindow);
   conn275->handleNotificationsFor(*iInfo);
   conn256->initialize(iVyperFrameMenu, iHelpWindow);
   conn256->handleNotificationsFor(*this);
   conn266->initialize(iVyperFrameMenu, iHelpWindow);
   conn266->handleNotificationsFor(*this);
   conn276->initialize(iVyperFrameMenu, iConfirmImportIpf);
   conn276->handleNotificationsFor(*this);
   conn317->initialize(iConfirmImportIpf, iImportIpfDialog);
   conn317->handleNotificationsFor(*iConfirmImportIpf);
   conn298->initialize(this, iConfirmImportIpf);
   conn298->handleNotificationsFor(*this);
   conn298->handleNotificationsFor(*iConfirmImportIpf);
   conn299->initialize(iFile, iConfirmImportIpf);
   conn299->handleNotificationsFor(*iFile);
   conn299->handleNotificationsFor(*iConfirmImportIpf);
   conn378->initialize(iSettings, iImportIpfDialog);
   conn378->handleNotificationsFor(*iSettings);
   conn378->handleNotificationsFor(*iImportIpfDialog);
   conn316->initialize(iImportIpfDialog, iWaitFactory);
   conn316->handleNotificationsFor(*iImportIpfDialog);
   conn320->initialize(iImportIpfDialog, iFile);
   conn320->handleNotificationsFor(*iImportIpfDialog);
   conn320->setIString(iImportIpfDialog);
   conn283->initialize(iVyperFrameMenu, iExportHeaderDialog);
   conn283->handleNotificationsFor(*this);
   conn361->initialize(iSettings, iExportHeaderDialog);
   conn361->handleNotificationsFor(*iSettings);
   conn361->handleNotificationsFor(*iExportHeaderDialog);
   conn284->initialize(iExportHeaderDialog, iExportHeaderDialog);
   conn284->handleNotificationsFor(*iExportHeaderDialog);
   conn286->initialize(iExportHeaderDialog, iWaitFactory);
   conn286->handleNotificationsFor(*iExportHeaderDialog);
   conn285->initialize(iExportHeaderDialog, iFile);
   conn285->handleNotificationsFor(*iExportHeaderDialog);
   conn285->setIString(iExportHeaderDialog);
   conn308->initialize(iVyperFrameMenu, iExportRtfDialog);
   conn308->handleNotificationsFor(*this);
   conn466->initialize(iSettings, iExportRtfDialog);
   conn466->handleNotificationsFor(*iSettings);
   conn466->handleNotificationsFor(*iExportRtfDialog);
   conn309->initialize(iExportRtfDialog, iExportRtfDialog);
   conn309->handleNotificationsFor(*iExportRtfDialog);
   conn366->initialize(iExportRtfDialog, iWaitFactory);
   conn366->handleNotificationsFor(*iExportRtfDialog);
   conn330->initialize(iExportRtfDialog, iFile);
   conn330->handleNotificationsFor(*iExportRtfDialog);
   conn330->setIString(iExportRtfDialog);
   conn293->initialize(iVyperFrameMenu, iExportWinHelpDialog);
   conn293->handleNotificationsFor(*this);
   conn388->initialize(iSettings, iExportWinHelpDialog);
   conn388->handleNotificationsFor(*iSettings);
   conn388->handleNotificationsFor(*iExportWinHelpDialog);
   conn294->initialize(iExportWinHelpDialog, iExportWinHelpDialog);
   conn294->handleNotificationsFor(*iExportWinHelpDialog);
   conn356->initialize(iExportWinHelpDialog, iWaitFactory);
   conn356->handleNotificationsFor(*iExportWinHelpDialog);
   conn295->initialize(iExportWinHelpDialog, iFile);
   conn295->handleNotificationsFor(*iExportWinHelpDialog);
   conn295->setIString(iExportWinHelpDialog);
   conn318->initialize(iVyperFrameMenu, iRegFactory);
   conn318->handleNotificationsFor(*this);
   conn340->initialize(iRegFactory, iRegistration);
   conn340->handleNotificationsFor(*iRegFactory);
   conn319->initialize(iRegFactory, iRegistration);
   conn319->handleNotificationsFor(*iRegFactory);
   conn311->initialize(this, iRegistration);
   conn311->handleNotificationsFor(*this);
   conn311->handleNotificationsFor(*iRegistration);
   conn292->initialize(iSettings, this);
   conn292->handleNotificationsFor(*iSettings);
   conn292->handleNotificationsFor(*this);
   conn282->initialize(iSettings, this);
   conn282->handleNotificationsFor(*iSettings);
   conn282->handleNotificationsFor(*this);
   conn303->initialize(iSettings, this);
   conn303->handleNotificationsFor(*iSettings);
   conn303->handleNotificationsFor(*this);
   conn313->initialize(iSectionContainer, this);
   conn313->handleNotificationsFor(*iSectionContainer);
   conn304->initialize(this, iWait);
   conn304->handleNotificationsFor(*this);
   conn304->handleNotificationsFor(*iWait);
   conn305->initialize(iWaitFactory, iWait);
   conn305->handleNotificationsFor(*iWaitFactory);
   conn306->initialize(iWait, iFile);
   conn306->handleNotificationsFor(*iWait);
   conn306->handleNotificationsFor(*iFile);
   conn347->initialize(this, iEditFont);
   conn347->handleNotificationsFor(*this);
   conn328->initialize(this, iInsertFont);
   conn328->handleNotificationsFor(*this);
   conn329->initialize(this, iFile);
   conn329->handleNotificationsFor(*this);
   conn329->handleNotificationsFor(*iFile);
   conn350->initialize(iVyperFrameMenu, iInsertArtFactory);
   conn350->handleNotificationsFor(*this);
   conn291->initialize(iVyperFrameMenu, iInsertArt);
   conn291->handleNotificationsFor(*this);
   conn302->initialize(iInsertArtFactory, iInsertArt);
   conn302->handleNotificationsFor(*iInsertArtFactory);
   conn323->initialize(this, iInsertArt);
   conn323->handleNotificationsFor(*this);
   conn323->handleNotificationsFor(*iInsertArt);
   conn314->initialize(iInsertArtFactory, iInsertArt);
   conn314->handleNotificationsFor(*iInsertArtFactory);
   conn314->setThis(iFile);
   conn416->initialize(iInsertArt, iEditor);
   conn416->handleNotificationsFor(*iInsertArt);
   conn416->setId(iInsertArt);
   conn338->initialize(conn416, iExceptionNotification);
   conn338->handleNotificationsFor(*conn416);
   conn339->initialize(iEditor, iInsertArtFactory);
   conn339->handleNotificationsFor(*iEditor);
   conn360->initialize(iEditor, iInsertArt);
   conn360->handleNotificationsFor(*iEditor);
   conn321->initialize(iEditor, iInsertArt);
   conn321->handleNotificationsFor(*iEditor);
   conn312->initialize(iVyperFrameMenu, iHtmlSingleDialog);
   conn312->handleNotificationsFor(*this);
   conn333->initialize(iVyperFrameMenu, iHtmlFrameDialog);
   conn333->handleNotificationsFor(*this);
   conn324->initialize(iVyperFrameMenu, iHtmlHelpDialog);
   conn324->handleNotificationsFor(*this);
   conn364->initialize(iSettings, iHtmlSingleDialog);
   conn364->handleNotificationsFor(*iSettings);
   conn364->handleNotificationsFor(*iHtmlSingleDialog);
   conn335->initialize(iHtmlSingleDialog, iHtmlSingleDialog);
   conn335->handleNotificationsFor(*iHtmlSingleDialog);
   conn352->initialize(iSettings, iHtmlFrameDialog);
   conn352->handleNotificationsFor(*iSettings);
   conn352->handleNotificationsFor(*iHtmlFrameDialog);
   conn426->initialize(iHtmlFrameDialog, iHtmlFrameDialog);
   conn426->handleNotificationsFor(*iHtmlFrameDialog);
   conn373->initialize(iSettings, iHtmlHelpDialog);
   conn373->handleNotificationsFor(*iSettings);
   conn373->handleNotificationsFor(*iHtmlHelpDialog);
   conn367->initialize(iHtmlHelpDialog, iHtmlHelpDialog);
   conn367->handleNotificationsFor(*iHtmlHelpDialog);
   conn348->initialize(iHtmlSingleDialog, iWaitFactory);
   conn348->handleNotificationsFor(*iHtmlSingleDialog);
   conn349->initialize(iHtmlFrameDialog, iWaitFactory);
   conn349->handleNotificationsFor(*iHtmlFrameDialog);
   conn370->initialize(iHtmlHelpDialog, iWaitFactory);
   conn370->handleNotificationsFor(*iHtmlHelpDialog);
   conn331->initialize(iHtmlSingleDialog, iFile);
   conn331->handleNotificationsFor(*iHtmlSingleDialog);
   conn331->setIString(iHtmlSingleDialog);
   conn343->initialize(iHtmlFrameDialog, iFile);
   conn343->handleNotificationsFor(*iHtmlFrameDialog);
   conn343->setIString(iHtmlFrameDialog);
   conn345->initialize(iHtmlHelpDialog, iFile);
   conn345->handleNotificationsFor(*iHtmlHelpDialog);
   conn345->setIString(iHtmlHelpDialog);
   conn358->initialize(conn345, iExceptionNotification);
   conn358->handleNotificationsFor(*conn345);
   conn359->initialize(conn343, iExceptionNotification);
   conn359->handleNotificationsFor(*conn343);
   conn380->initialize(conn331, iExceptionNotification);
   conn380->handleNotificationsFor(*conn331);
   conn341->initialize(conn295, iExceptionNotification);
   conn341->handleNotificationsFor(*conn295);
   conn332->initialize(conn330, iExceptionNotification);
   conn332->handleNotificationsFor(*conn330);
   conn353->initialize(conn285, iExceptionNotification);
   conn353->handleNotificationsFor(*conn285);
   conn344->initialize(conn70, iExceptionNotification);
   conn344->handleNotificationsFor(*conn70);
   conn355->initialize(conn68, iExceptionNotification);
   conn355->handleNotificationsFor(*conn68);
   conn446->initialize(conn88, iExceptionNotification);
   conn446->handleNotificationsFor(*conn88);
   conn387->initialize(conn53, iExceptionNotification);
   conn387->handleNotificationsFor(*conn53);
   conn368->initialize(conn60, iExceptionNotification);
   conn368->handleNotificationsFor(*conn60);
   conn369->initialize(conn320, iExceptionNotification);
   conn369->handleNotificationsFor(*conn320);
   conn390->initialize(conn23, iExceptionNotification);
   conn390->handleNotificationsFor(*conn23);
   conn351->initialize(conn19, iExceptionNotification);
   conn351->handleNotificationsFor(*conn19);
   conn342->initialize(conn25, iExceptionNotification);
   conn342->handleNotificationsFor(*conn25);
   conn363->initialize(conn16, iExceptionNotification);
   conn363->handleNotificationsFor(*conn16);
   conn365->initialize(iSettings, iFile);
   conn365->handleNotificationsFor(*iSettings);
   conn365->handleNotificationsFor(*iFile);

   conn354->setTarget();
   conn397->setTarget();
   conn44->setTarget();
   conn46->setTarget();
   conn55->setTarget();
   conn379->setTarget();
   conn400->setTarget();
   conn375->setTarget();
   conn75->setTarget();
   conn101->setTarget();
   conn85->setTarget();
   conn76->setTarget();
   conn407->setTarget();
   conn96->setTarget();
   conn97->setTarget();
   conn108->setTarget();
   conn119->setTarget();
   conn110->setTarget();
   conn104->setTarget();
   conn240->setTarget();
   conn151->setTarget();
   conn134->setTarget();
   conn142->setTarget();
   conn167->setTarget();
   conn160->setTarget();
   conn154->setTarget();
   conn162->setTarget();
   conn190->setTarget();
   conn181->setTarget();
   conn152->setTarget();
   conn174->setTarget();
   conn165->setTarget();
   conn177->setTarget();
   conn188->setTarget();
   conn200->setTarget();
   conn201->setTarget();
   conn183->setTarget();
   conn184->setTarget();
   conn166->setTarget();
   conn187->setTarget();
   conn197->setTarget();
   conn207->setTarget();
   conn198->setTarget();
   conn179->setTarget();
   conn170->setTarget();
   conn210->setTarget();
   conn220->setTarget();
   conn211->setTarget();
   conn182->setTarget();
   conn173->setTarget();
   conn194->setTarget();
   conn185->setTarget();
   conn176->setTarget();
   conn227->setTarget();
   conn208->setTarget();
   conn199->setTarget();
   conn230->setTarget();
   conn221->setTarget();
   conn192->setTarget();
   conn193->setTarget();
   conn204->setTarget();
   conn195->setTarget();
   conn186->setTarget();
   conn229->setTarget();
   conn202->setTarget();
   conn205->setTarget();
   conn241->setTarget();
   conn224->setTarget();
   conn298->setTarget();
   conn299->setTarget();
   conn378->setTarget();
   conn361->setTarget();
   conn466->setTarget();
   conn388->setTarget();
   conn311->setTarget();
   conn292->setTarget();
   conn282->setTarget();
   conn303->setTarget();
   conn304->setTarget();
   conn306->setTarget();
   conn329->setTarget();
   conn323->setTarget();
   conn364->setTarget();
   conn352->setTarget();
   conn373->setTarget();
   conn365->setTarget();
   return true;
}


//------------------------------------------------------------------------------
// Vyper :: dispatchNotificationEvent
//------------------------------------------------------------------------------
#pragma export (Vyper::dispatchNotificationEvent(const INotificationEvent &))
IObserver & Vyper::dispatchNotificationEvent(const INotificationEvent & anEvent)
{
   return *this;
}



#include "Vyper.cpv"
