/*******************************************************************************
* FILE NAME: VyLabelProperties.cpp                                             *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     VyLabelProperties                                                        *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _IMCELCV_
#include <imcelcv.hpp>
#endif

#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _IENTRYFD_
#include <ientryfd.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _ICHECKBX_
#include <icheckbx.hpp>
#endif

#ifndef _IPUSHBUT_
#include <ipushbut.hpp>
#endif

#ifndef _VYLABEL_
#include "VyLabel.hpp"
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _VYLABELPROPERTIES_
#include "VyLabelProperties.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for VyLabelPropertiesConn0
//*****************************************************************************
class VyLabelPropertiesConn0 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyLabelPropertiesConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Close(buttonClickEvent) to FrameWindow(close))");
         try {target->close();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IFrameWindow * target;


};   //VyLabelPropertiesConn0


//*****************************************************************************
// Class definition for VyLabelPropertiesConn1
//*****************************************************************************
class VyLabelPropertiesConn1 : public IObserver {
public:
   virtual  ~VyLabelPropertiesConn1(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyLabel *> * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Label(name) to Name(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->target()->setName(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Label(name) to Name(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->target()->name());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyLabel::nameId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyLabel *> * source;
   IEntryField * target;
   Boolean aligning;


};   //VyLabelPropertiesConn1


//*****************************************************************************
// Class definition for VyLabelPropertiesConn3
//*****************************************************************************
class VyLabelPropertiesConn3 : public IObserver {
public:
   virtual  ~VyLabelPropertiesConn3(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyLabel *> * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Label(idHexString) to ValueHex(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->target()->setIdHexString(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Label(idHexString) to ValueHex(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->target()->idHexString());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyLabel::idHexStringId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyLabel *> * source;
   IEntryField * target;
   Boolean aligning;


};   //VyLabelPropertiesConn3


//*****************************************************************************
// Class definition for VyLabelPropertiesConn4
//*****************************************************************************
class VyLabelPropertiesConn4 : public IObserver {
public:
   virtual  ~VyLabelPropertiesConn4(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyLabel *> * aSource, ICheckBox * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Label(external) to Global(selected))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->target()->enableExternal(target->isSelected());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Label(external) to Global(selected))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->select(source->target()->isExternal());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyLabel::externalId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == ICheckBox::selectId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyLabel *> * source;
   ICheckBox * target;
   Boolean aligning;


};   //VyLabelPropertiesConn4


//*****************************************************************************
// Class definition for VyLabelPropertiesConn5
//*****************************************************************************
class VyLabelPropertiesConn5 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyLabelPropertiesConn5(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IEntryField * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IEntryField::FOCUSTRUEID)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ValueHex(gotFocusEvent) to ValueHex(insertMode))");
         try {target->enableInsertMode(false);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IEntryField * source;
   IEntryField * target;


};   //VyLabelPropertiesConn5


//*****************************************************************************
// Class definition for VyLabelPropertiesConn15
//*****************************************************************************
class VyLabelPropertiesConn15 : public IObserver {
public:
   virtual  ~VyLabelPropertiesConn15(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyLabel *> * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Label(id) to Value(valueAsInt))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->target()->setId(target->VBINTVALUEFROMTEXT());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Label(id) to Value(valueAsInt))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->VBSETTEXTFROMVALUE(source->target()->id());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyLabel::idId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyLabel *> * source;
   IEntryField * target;
   Boolean aligning;


};   //VyLabelPropertiesConn15


//*****************************************************************************
// Class definition for VyLabelPropertiesConn6
//*****************************************************************************
class VyLabelPropertiesConn6 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyLabelPropertiesConn6(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyLabel *> * aSource, VyLabelProperties * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VyLabel::nameId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Label(name) to (changed))");
         try {target->enableChanged(true);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyLabel *> * source;
   VyLabelProperties * target;


};   //VyLabelPropertiesConn6


//*****************************************************************************
// Class definition for VyLabelPropertiesConn7
//*****************************************************************************
class VyLabelPropertiesConn7 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyLabelPropertiesConn7(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyLabel *> * aSource, VyLabelProperties * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VyLabel::idId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Label(id) to (changed))");
         try {target->enableChanged(true);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyLabel *> * source;
   VyLabelProperties * target;


};   //VyLabelPropertiesConn7


//*****************************************************************************
// Class definition for VyLabelPropertiesConn8
//*****************************************************************************
class VyLabelPropertiesConn8 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyLabelPropertiesConn8(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyLabel *> * aSource, VyLabelProperties * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VyLabel::externalId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Label(external) to (changed))");
         try {target->enableChanged(true);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyLabel *> * source;
   VyLabelProperties * target;


};   //VyLabelPropertiesConn8


#pragma export (VyLabelProperties::readyId)
const INotificationId VyLabelProperties::readyId = "VyLabelProperties::readyId";

#pragma export (VyLabelProperties::label)
const INotificationId VyLabelProperties::label = "VyLabelProperties::label";

//------------------------------------------------------------------------------
// VyLabelProperties :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (VyLabelProperties::defaultFramingSpec())
const IRectangle VyLabelProperties::defaultFramingSpec()
{
   return(IRectangle(IPoint(30, IWindow::desktopWindow()->size().height() - 30 - 165),ISize(404, 165)));
}


//------------------------------------------------------------------------------
// VyLabelProperties :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (VyLabelProperties::defaultTitle())
IString VyLabelProperties::defaultTitle()
{
   return("Label");
}


//------------------------------------------------------------------------------
// VyLabelProperties :: VyLabelProperties
//------------------------------------------------------------------------------
#pragma export (VyLabelProperties::VyLabelProperties(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
VyLabelProperties::VyLabelProperties(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   iMultiCellCanvas1 = new IMultiCellCanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iNameLabel = new IStaticText(
      id+WNDOFFSET_VyLabelProperties_NameLabel, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IStaticText::defaultStyle() | IControl::group);
   iName = new IEntryField(
      id+WNDOFFSET_VyLabelProperties_Name, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iValueLabel = new IStaticText(
      id+WNDOFFSET_VyLabelProperties_ValueLabel, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IStaticText::defaultStyle() | IControl::group);
   iValue = new IEntryField(
      id+WNDOFFSET_VyLabelProperties_Value, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iValueHexLabel = new IStaticText(
      id+WNDOFFSET_VyLabelProperties_ValueHexLabel, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IStaticText::defaultStyle() & ~IControl::group);
   iValueHex = new IEntryField(
      id+WNDOFFSET_VyLabelProperties_ValueHex, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iGlobal = new ICheckBox(
      id+WNDOFFSET_VyLabelProperties_Global, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      ICheckBox::defaultStyle() | IControl::tabStop | IControl::group);
   iClose = new IPushButton(
      id+WNDOFFSET_VyLabelProperties_Close, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IPushButton::defaultStyle() | IPushButton::defaultButton | IControl::group | IControl::tabStop);
   iLabel = new IVBVariablePartPointer<VyLabel *>();

   conn0 = new VyLabelPropertiesConn0();
   conn1 = new VyLabelPropertiesConn1();
   conn3 = new VyLabelPropertiesConn3();
   conn4 = new VyLabelPropertiesConn4();
   conn5 = new VyLabelPropertiesConn5();
   conn15 = new VyLabelPropertiesConn15();
   conn6 = new VyLabelPropertiesConn6();
   conn7 = new VyLabelPropertiesConn7();
   conn8 = new VyLabelPropertiesConn8();

   iMultiCellCanvas1->addToCell(iNameLabel, 2, 2, 1, 1);
   iMultiCellCanvas1->addToCell(iName, 3, 2, 3, 1);
   iMultiCellCanvas1->addToCell(iValueLabel, 2, 3, 1, 1);
   iMultiCellCanvas1->addToCell(iGlobal, 2, 4, 4, 1);
   iMultiCellCanvas1->addToCell(iClose, 2, 5, 1, 1);
   iMultiCellCanvas1->addToCell(iValueHex, 5, 3, 1, 1);
   iMultiCellCanvas1->addToCell(iValueHexLabel, 4, 3, 1, 1);
   iMultiCellCanvas1->addToCell(iValue, 3, 3, 1, 1);
   iMultiCellCanvas1->setColumnWidth(5, IMultiCellCanvas::defaultCell().width(), false);
   iMultiCellCanvas1->setRowHeight(5, IMultiCellCanvas::defaultCell().height(), false);
   iNameLabel->setAlignment(IStaticText::bottomLeft);
   iNameLabel->setText("Name");
   iName->setLimit(255);
   iName->setMinimumSize(ISize(172, 25));
   iValueLabel->setAlignment(IStaticText::bottomLeft);
   iValueLabel->setText("Value");
   iValue->setLimit(11);
   iValue->setMinimumSize(ISize(137, 25));
   iValueHexLabel->setAlignment(IStaticText::bottomRight);
   iValueHexLabel->setText("Hex");
   iValueHexLabel->setMinimumSize(ISize(38, 26));
   iValueHex->setLimit(8);
   iValueHex->setMinimumSize(ISize(121, 26));
   iGlobal->setText("Global");
   iClose->setText("Close");
   this->setFocus();
   this->setClient(iMultiCellCanvas1);
   this->setAutoDeleteObject(true);
   construct();
}     //end constructor


//------------------------------------------------------------------------------
// VyLabelProperties :: ~VyLabelProperties
//------------------------------------------------------------------------------
#pragma export (VyLabelProperties::~VyLabelProperties())
VyLabelProperties::~VyLabelProperties()
{
   this->stopHandlingNotificationsFor(*iLabel);
   conn0->stopHandlingNotificationsFor(*iClose);
   conn1->stopHandlingNotificationsFor(*iLabel);
   conn1->stopHandlingNotificationsFor(*iName);
   conn3->stopHandlingNotificationsFor(*iLabel);
   conn3->stopHandlingNotificationsFor(*iValueHex);
   conn4->stopHandlingNotificationsFor(*iLabel);
   conn4->stopHandlingNotificationsFor(*iGlobal);
   conn5->stopHandlingNotificationsFor(*iValueHex);
   conn15->stopHandlingNotificationsFor(*iLabel);
   conn15->stopHandlingNotificationsFor(*iValue);
   conn6->stopHandlingNotificationsFor(*iLabel);
   conn7->stopHandlingNotificationsFor(*iLabel);
   conn8->stopHandlingNotificationsFor(*iLabel);

   delete conn0;
   delete conn1;
   delete conn3;
   delete conn4;
   delete conn5;
   delete conn15;
   delete conn6;
   delete conn7;
   delete conn8;


   delete iMultiCellCanvas1;
   delete iNameLabel;
   delete iName;
   delete iValueLabel;
   delete iValue;
   delete iValueHexLabel;
   delete iValueHex;
   delete iGlobal;
   delete iClose;
   delete iLabel;
}

//------------------------------------------------------------------------------
// VyLabelProperties :: initializePart
//------------------------------------------------------------------------------
#pragma export (VyLabelProperties::initializePart())
VyLabelProperties & VyLabelProperties::initializePart()
{
   this->handleNotificationsFor(*iLabel);
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// VyLabelProperties :: makeConnections
//------------------------------------------------------------------------------
#pragma export (VyLabelProperties::makeConnections())
Boolean VyLabelProperties::makeConnections()
{
   this->enableNotification();
   iMultiCellCanvas1->enableNotification();
   iNameLabel->enableNotification();
   iName->enableNotification();
   iValueLabel->enableNotification();
   iValue->enableNotification();
   iValueHexLabel->enableNotification();
   iValueHex->enableNotification();
   iGlobal->enableNotification();
   iClose->enableNotification();
   iLabel->enableNotification();

   unsigned long id = this->id();
   conn0->initialize(iClose, this);
   conn0->handleNotificationsFor(*iClose);
   conn1->initialize(iLabel, iName);
   conn1->handleNotificationsFor(*iLabel);
   conn1->handleNotificationsFor(*iName);
   conn3->initialize(iLabel, iValueHex);
   conn3->handleNotificationsFor(*iLabel);
   conn3->handleNotificationsFor(*iValueHex);
   conn4->initialize(iLabel, iGlobal);
   conn4->handleNotificationsFor(*iLabel);
   conn4->handleNotificationsFor(*iGlobal);
   conn5->initialize(iValueHex, iValueHex);
   conn5->handleNotificationsFor(*iValueHex);
   conn15->initialize(iLabel, iValue);
   conn15->handleNotificationsFor(*iLabel);
   conn15->handleNotificationsFor(*iValue);
   conn6->initialize(iLabel, this);
   conn6->handleNotificationsFor(*iLabel);
   conn7->initialize(iLabel, this);
   conn7->handleNotificationsFor(*iLabel);
   conn8->initialize(iLabel, this);
   conn8->handleNotificationsFor(*iLabel);

   conn1->setTarget();
   conn3->setTarget();
   conn4->setTarget();
   conn15->setTarget();
   return true;
}


//------------------------------------------------------------------------------
// VyLabelProperties :: dispatchNotificationEvent
//------------------------------------------------------------------------------
#pragma export (VyLabelProperties::dispatchNotificationEvent(const INotificationEvent &))
IObserver & VyLabelProperties::dispatchNotificationEvent(const INotificationEvent & anEvent)
{
   if ((anEvent.notificationId() == IVBVariablePartPointer<VyLabel *>::targetId) && (iLabel == &anEvent.notifier()))
       notifyObservers(INotificationEvent(label, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   return *this;
}



#include "VyLabelProperties.cpv"
