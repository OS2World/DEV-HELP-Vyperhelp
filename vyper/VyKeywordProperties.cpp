/*******************************************************************************
* FILE NAME: VyKeywordProperties.cpp                                           *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     VyKeywordProperties- Dialog for editing keywords                         *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _IMCELCV_
#include <imcelcv.hpp>
#endif

#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _IENTRYFD_
#include <ientryfd.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _ICHECKBX_
#include <icheckbx.hpp>
#endif

#ifndef _IPUSHBUT_
#include <ipushbut.hpp>
#endif

#ifndef _VYKEYWORD_
#include "VyKeyword.hpp"
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _VYKEYWORDPROPERTIES_
#include "VyKeywordProperties.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for VyKeywordPropertiesConn0
//*****************************************************************************
class VyKeywordPropertiesConn0 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyKeywordPropertiesConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Close(buttonClickEvent) to FrameWindow(close))");
         try {target->close();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IFrameWindow * target;


};   //VyKeywordPropertiesConn0


//*****************************************************************************
// Class definition for VyKeywordPropertiesConn1
//*****************************************************************************
class VyKeywordPropertiesConn1 : public IObserver {
public:
   virtual  ~VyKeywordPropertiesConn1(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyKeyword *> * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Keyword(text) to Name(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->target()->setText(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Keyword(text) to Name(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->target()->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyKeyword::textId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyKeyword *> * source;
   IEntryField * target;
   Boolean aligning;


};   //VyKeywordPropertiesConn1


//*****************************************************************************
// Class definition for VyKeywordPropertiesConn2
//*****************************************************************************
class VyKeywordPropertiesConn2 : public IObserver {
public:
   virtual  ~VyKeywordPropertiesConn2(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyKeyword *> * aSource, ICheckBox * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Keyword(listed) to Index(selected))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->target()->enableListed(target->isSelected());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Keyword(listed) to Index(selected))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->select(source->target()->isListed());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyKeyword::listedId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == ICheckBox::selectId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyKeyword *> * source;
   ICheckBox * target;
   Boolean aligning;


};   //VyKeywordPropertiesConn2


//*****************************************************************************
// Class definition for VyKeywordPropertiesConn3
//*****************************************************************************
class VyKeywordPropertiesConn3 : public IObserver {
public:
   virtual  ~VyKeywordPropertiesConn3(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyKeyword *> * aSource, ICheckBox * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Keyword(external) to Global(selected))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->target()->enableExternal(target->isSelected());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Keyword(external) to Global(selected))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->select(source->target()->isExternal());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyKeyword::externalId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == ICheckBox::selectId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyKeyword *> * source;
   ICheckBox * target;
   Boolean aligning;


};   //VyKeywordPropertiesConn3


//*****************************************************************************
// Class definition for VyKeywordPropertiesConn4
//*****************************************************************************
class VyKeywordPropertiesConn4 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyKeywordPropertiesConn4(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyKeyword *> * aSource, VyKeywordProperties * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VyKeyword::textId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Keyword(text) to (changed))");
         try {target->enableChanged(true);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyKeyword *> * source;
   VyKeywordProperties * target;


};   //VyKeywordPropertiesConn4


//*****************************************************************************
// Class definition for VyKeywordPropertiesConn5
//*****************************************************************************
class VyKeywordPropertiesConn5 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyKeywordPropertiesConn5(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyKeyword *> * aSource, VyKeywordProperties * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VyKeyword::listedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Keyword(listed) to (changed))");
         try {target->enableChanged(true);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyKeyword *> * source;
   VyKeywordProperties * target;


};   //VyKeywordPropertiesConn5


//*****************************************************************************
// Class definition for VyKeywordPropertiesConn6
//*****************************************************************************
class VyKeywordPropertiesConn6 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyKeywordPropertiesConn6(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyKeyword *> * aSource, VyKeywordProperties * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VyKeyword::externalId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Keyword(external) to (changed))");
         try {target->enableChanged(true);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyKeyword *> * source;
   VyKeywordProperties * target;


};   //VyKeywordPropertiesConn6


#pragma export (VyKeywordProperties::readyId)
const INotificationId VyKeywordProperties::readyId = "VyKeywordProperties::readyId";

#pragma export (VyKeywordProperties::keyword)
const INotificationId VyKeywordProperties::keyword = "VyKeywordProperties::keyword";

//------------------------------------------------------------------------------
// VyKeywordProperties :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (VyKeywordProperties::defaultFramingSpec())
const IRectangle VyKeywordProperties::defaultFramingSpec()
{
   return(IRectangle(IPoint(30, IWindow::desktopWindow()->size().height() - 30 - 167),ISize(443, 167)));
}


//------------------------------------------------------------------------------
// VyKeywordProperties :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (VyKeywordProperties::defaultTitle())
IString VyKeywordProperties::defaultTitle()
{
   return("Keyword");
}


//------------------------------------------------------------------------------
// VyKeywordProperties :: VyKeywordProperties
//------------------------------------------------------------------------------
#pragma export (VyKeywordProperties::VyKeywordProperties(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
VyKeywordProperties::VyKeywordProperties(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   iMultiCellCanvas1 = new IMultiCellCanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iNameLabel = new IStaticText(
      id+WNDOFFSET_VyKeywordProperties_NameLabel, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IStaticText::defaultStyle() & ~IControl::tabStop | IStaticText::mnemonic | IControl::group);
   iName = new IEntryField(
      id+WNDOFFSET_VyKeywordProperties_Name, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IEntryField::defaultStyle() & ~IControl::group | IControl::tabStop);
   iIndex = new ICheckBox(
      id+WNDOFFSET_VyKeywordProperties_Index, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      ICheckBox::defaultStyle() | IControl::tabStop | IControl::group);
   iGlobal = new ICheckBox(
      id+WNDOFFSET_VyKeywordProperties_Global, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      ICheckBox::defaultStyle() | IControl::tabStop | IControl::group);
   iClose = new IPushButton(
      id+WNDOFFSET_VyKeywordProperties_Close, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IPushButton::defaultStyle() | IPushButton::defaultButton | IControl::tabStop | IControl::group);
   iKeyword = new IVBVariablePartPointer<VyKeyword *>();

   conn0 = new VyKeywordPropertiesConn0();
   conn1 = new VyKeywordPropertiesConn1();
   conn2 = new VyKeywordPropertiesConn2();
   conn3 = new VyKeywordPropertiesConn3();
   conn4 = new VyKeywordPropertiesConn4();
   conn5 = new VyKeywordPropertiesConn5();
   conn6 = new VyKeywordPropertiesConn6();

   iMultiCellCanvas1->addToCell(iIndex, 2, 3, 2, 1);
   iMultiCellCanvas1->addToCell(iGlobal, 2, 4, 2, 1);
   iMultiCellCanvas1->addToCell(iClose, 2, 5, 1, 1);
   iMultiCellCanvas1->addToCell(iNameLabel, 2, 2, 1, 1);
   iMultiCellCanvas1->addToCell(iName, 3, 2, 1, 1);
   iMultiCellCanvas1->setColumnWidth(3, IMultiCellCanvas::defaultCell().width(), false);
   iMultiCellCanvas1->setRowHeight(5, IMultiCellCanvas::defaultCell().height(), false);
   iNameLabel->setText("~Name");
   iName->setLimit(255);
   iName->setMinimumSize(ISize(335, 25));
   iIndex->setText("~Include in index");
   iGlobal->setText("~Global");
   iClose->setText("Close");
   this->setFocus();
   this->setClient(iMultiCellCanvas1);
   this->setAutoDeleteObject(true);
   construct();
}     //end constructor


//------------------------------------------------------------------------------
// VyKeywordProperties :: ~VyKeywordProperties
//------------------------------------------------------------------------------
#pragma export (VyKeywordProperties::~VyKeywordProperties())
VyKeywordProperties::~VyKeywordProperties()
{
   this->stopHandlingNotificationsFor(*iKeyword);
   conn0->stopHandlingNotificationsFor(*iClose);
   conn1->stopHandlingNotificationsFor(*iKeyword);
   conn1->stopHandlingNotificationsFor(*iName);
   conn2->stopHandlingNotificationsFor(*iKeyword);
   conn2->stopHandlingNotificationsFor(*iIndex);
   conn3->stopHandlingNotificationsFor(*iKeyword);
   conn3->stopHandlingNotificationsFor(*iGlobal);
   conn4->stopHandlingNotificationsFor(*iKeyword);
   conn5->stopHandlingNotificationsFor(*iKeyword);
   conn6->stopHandlingNotificationsFor(*iKeyword);

   delete conn0;
   delete conn1;
   delete conn2;
   delete conn3;
   delete conn4;
   delete conn5;
   delete conn6;


   delete iMultiCellCanvas1;
   delete iNameLabel;
   delete iName;
   delete iIndex;
   delete iGlobal;
   delete iClose;
   delete iKeyword;
}

//------------------------------------------------------------------------------
// VyKeywordProperties :: initializePart
//------------------------------------------------------------------------------
#pragma export (VyKeywordProperties::initializePart())
VyKeywordProperties & VyKeywordProperties::initializePart()
{
   this->handleNotificationsFor(*iKeyword);
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// VyKeywordProperties :: makeConnections
//------------------------------------------------------------------------------
#pragma export (VyKeywordProperties::makeConnections())
Boolean VyKeywordProperties::makeConnections()
{
   this->enableNotification();
   iMultiCellCanvas1->enableNotification();
   iNameLabel->enableNotification();
   iName->enableNotification();
   iIndex->enableNotification();
   iGlobal->enableNotification();
   iClose->enableNotification();
   iKeyword->enableNotification();

   unsigned long id = this->id();
   conn0->initialize(iClose, this);
   conn0->handleNotificationsFor(*iClose);
   conn1->initialize(iKeyword, iName);
   conn1->handleNotificationsFor(*iKeyword);
   conn1->handleNotificationsFor(*iName);
   conn2->initialize(iKeyword, iIndex);
   conn2->handleNotificationsFor(*iKeyword);
   conn2->handleNotificationsFor(*iIndex);
   conn3->initialize(iKeyword, iGlobal);
   conn3->handleNotificationsFor(*iKeyword);
   conn3->handleNotificationsFor(*iGlobal);
   conn4->initialize(iKeyword, this);
   conn4->handleNotificationsFor(*iKeyword);
   conn5->initialize(iKeyword, this);
   conn5->handleNotificationsFor(*iKeyword);
   conn6->initialize(iKeyword, this);
   conn6->handleNotificationsFor(*iKeyword);

   conn1->setTarget();
   conn2->setTarget();
   conn3->setTarget();
   return true;
}


//------------------------------------------------------------------------------
// VyKeywordProperties :: dispatchNotificationEvent
//------------------------------------------------------------------------------
#pragma export (VyKeywordProperties::dispatchNotificationEvent(const INotificationEvent &))
IObserver & VyKeywordProperties::dispatchNotificationEvent(const INotificationEvent & anEvent)
{
   if ((anEvent.notificationId() == IVBVariablePartPointer<VyKeyword *>::targetId) && (iKeyword == &anEvent.notifier()))
       notifyObservers(INotificationEvent(keyword, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   return *this;
}



#include "VyKeywordProperties.cpv"
