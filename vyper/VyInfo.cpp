/*******************************************************************************
* FILE NAME: VyInfo.cpp                                                        *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     VyInfo- Product info screen                                              *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _ISETCV_
#include <isetcv.hpp>
#endif

#ifndef _IBMPCTL_
#include <ibmpctl.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _IRESLIB_
#include <ireslib.hpp>
#endif

#ifndef _IMCELCV_
#include <imcelcv.hpp>
#endif

#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _IFONT_
#include <ifont.hpp>
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _VYINFO_
#include "VyInfo.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for VyInfoConn0
//*****************************************************************************
class VyInfoConn0 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyInfoConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyInfo * aSource, IStaticText * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyInfo::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to GeneratorVersion(customLogic, \"Set generator version\"))");
         try {codeSnippet(&anEvent);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member functions
   //---------------------------------------------------------------------------
   void codeSnippet(const INotificationEvent* event)
      {
      target->setText( Generator::version() );
      };

   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyInfo * source;
   IStaticText * target;


};   //VyInfoConn0


//*****************************************************************************
// Class definition for VyInfoConn1
//*****************************************************************************
class VyInfoConn1 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyInfoConn1(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyInfo * aSource, IStaticText * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyInfo::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to EditorVersion(customLogic, \"Set editor version\"))");
         try {codeSnippet(&anEvent);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member functions
   //---------------------------------------------------------------------------
   void codeSnippet(const INotificationEvent* event)
      {
      target->setText( Editor::version() );
      };

   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyInfo * source;
   IStaticText * target;


};   //VyInfoConn1


//*****************************************************************************
// Class definition for VyInfoConn2
//*****************************************************************************
class VyInfoConn2 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyInfoConn2(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyInfo * aSource, IStaticText * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyInfo::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to Registration(customLogic, \"Set registration notice\"))");
         try {codeSnippet(&anEvent);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member functions
   //---------------------------------------------------------------------------
   void codeSnippet(const INotificationEvent* event)
      {
      target->setText( Generator::registration().notice() );
      };

   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyInfo * source;
   IStaticText * target;


};   //VyInfoConn2


#pragma export (VyInfo::readyId)
const INotificationId VyInfo::readyId = "VyInfo::readyId";

#pragma export (VyInfo::contentsButtonClickEvent)
const INotificationId VyInfo::contentsButtonClickEvent = "VyInfo::contentsButtonClickEvent";

//------------------------------------------------------------------------------
// VyInfo :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (VyInfo::defaultFramingSpec())
const IRectangle VyInfo::defaultFramingSpec()
{
   return(IRectangle(IPoint(29, IWindow::desktopWindow()->size().height() - 55 - 269),ISize(707, 269)));
}


//------------------------------------------------------------------------------
// VyInfo :: defaultStyle
//------------------------------------------------------------------------------
#pragma export (VyInfo::defaultStyle())
const IFrameWindow::Style VyInfo::defaultStyle()
{
   return(IFrameWindow::defaultStyle() & ~IFrameWindow::hideButton & ~IFrameWindow::maximizeButton & ~IFrameWindow::minimizeButton & ~IFrameWindow::sizingBorder & ~IFrameWindow::windowList | IFrameWindow::dialogBorder);
}


//------------------------------------------------------------------------------
// VyInfo :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (VyInfo::defaultTitle())
IString VyInfo::defaultTitle()
{
   return("VyperHelp Information");
}


//------------------------------------------------------------------------------
// VyInfo :: VyInfo
//------------------------------------------------------------------------------
#pragma export (VyInfo::VyInfo(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
VyInfo::VyInfo(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   iSetCanvas1 = new ISetCanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iBitmapControl1 = new IBitmapControl(
      id+WNDOFFSET_VyInfo_BitmapControl1, 
      iSetCanvas1, 
      iSetCanvas1, 
      IResourceId(101), 
      IRectangle ( ));
   iMultiCellCanvas1 = new IMultiCellCanvas(
      id+WNDOFFSET_VyInfo_MultiCellCanvas1, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle());
   iLogo = new IStaticText(
      id+WNDOFFSET_VyInfo_Logo, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   iVyperVersion = new IStaticText(
      id+WNDOFFSET_VyInfo_VyperVersion, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   iVyGen = new IStaticText(
      id+WNDOFFSET_VyInfo_VyGen, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   iGeneratorVersion = new IStaticText(
      id+WNDOFFSET_VyInfo_GeneratorVersion, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   iVyDit = new IStaticText(
      id+WNDOFFSET_VyInfo_VyDit, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   iEditorVersion = new IStaticText(
      id+WNDOFFSET_VyInfo_EditorVersion, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   iCopyright = new IStaticText(
      id+WNDOFFSET_VyInfo_Copyright, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   iContents = new IPushButton(
      id+WNDOFFSET_VyInfo_Contents, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IPushButton::defaultStyle() | IPushButton::defaultButton);
   iRegistration = new IStaticText(
      id+WNDOFFSET_VyInfo_Registration, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());

   conn0 = new VyInfoConn0();
   conn1 = new VyInfoConn1();
   conn2 = new VyInfoConn2();

   iSetCanvas1->setAlignment(ISetCanvas::centerCenter);
   iSetCanvas1->setDeckOrientation(ISetCanvas::vertical);
   iSetCanvas1->setDeckCount(2);
   iSetCanvas1->setPackType(ISetCanvas::tight);
   iBitmapControl1->setAlignment(IStaticText::centerCenter);
   iBitmapControl1->setMinimumSize(ISize(199, 210));
   iMultiCellCanvas1->addToCell(iLogo, 2, 2, 1, 1);
   iMultiCellCanvas1->addToCell(iVyperVersion, 4, 2, 1, 1);
   iMultiCellCanvas1->addToCell(iVyGen, 2, 3, 1, 1);
   iMultiCellCanvas1->addToCell(iGeneratorVersion, 4, 3, 1, 1);
   iMultiCellCanvas1->addToCell(iVyDit, 2, 4, 1, 1);
   iMultiCellCanvas1->addToCell(iEditorVersion, 4, 4, 1, 1);
   iMultiCellCanvas1->addToCell(iCopyright, 2, 5, 3, 1);
   iMultiCellCanvas1->addToCell(iContents, 2, 7, 3, 1);
   iMultiCellCanvas1->addToCell(iRegistration, 2, 6, 3, 1);
   iMultiCellCanvas1->setColumnWidth(4, IMultiCellCanvas::defaultCell().width(), false);
   iMultiCellCanvas1->setRowHeight(7, IMultiCellCanvas::defaultCell().height(), false);
   iMultiCellCanvas1->setMinimumSize(ISize(472, 214));
   iLogo->setFont(IFont("Times New Roman Bold Italic", 24, false, true).setBold(false).setItalic(false).setUnderscore(false).setStrikeout(false).setOutline(false));
   iLogo->setAlignment(IStaticText::topRight);
   iLogo->setText("VyperHelp");
   iLogo->setMinimumSize(ISize(199, 59));
   iVyperVersion->setFont(IFont("Times New Roman Bold Italic", 24, false, true).setBold(false).setItalic(false).setUnderscore(false).setStrikeout(false).setOutline(false));
   iVyperVersion->setText(VVERSION);
   iVyperVersion->setMinimumSize(ISize(214, 59));
   iVyGen->setAlignment(IStaticText::topRight);
   iVyGen->setFont(IFont("System VIO", 6, true).setBold(false).setItalic(false).setUnderscore(false).setStrikeout(false).setOutline(false));
   iVyGen->setText("VYGEN.DLL");
   iVyGen->setMinimumSize(ISize(209, 19));
   iGeneratorVersion->setFont(IFont("System VIO", 6, true).setBold(false).setItalic(false).setUnderscore(false).setStrikeout(false).setOutline(false));
   iGeneratorVersion->setText("0.00");
   iGeneratorVersion->setMinimumSize(ISize(214, 20));
   iVyDit->setAlignment(IStaticText::topRight);
   iVyDit->setFont(IFont("System VIO", 6, true).setBold(false).setItalic(false).setUnderscore(false).setStrikeout(false).setOutline(false));
   iVyDit->setText("VYDIT.DLL");
   iEditorVersion->setFont(IFont("System VIO", 6, true).setBold(false).setItalic(false).setUnderscore(false).setStrikeout(false).setOutline(false));
   iEditorVersion->setText("0.00");
   iEditorVersion->setMinimumSize(ISize(214, 20));
   iCopyright->setAlignment(IStaticText::centerCenter);
   iCopyright->setText(VCOPYRIGHT);
   iCopyright->setMinimumSize(ISize(450, 25));
   iContents->setText("Help Contents");
   iContents->setMinimumSize(ISize(450, 34));
   iRegistration->setAlignment(IStaticText::centerCenter);
   iRegistration->setMinimumSize(ISize(450, 25));
   this->setFocus();
   this->setClient(iSetCanvas1);
   this->setAutoDeleteObject(true);
}     //end constructor


//------------------------------------------------------------------------------
// VyInfo :: ~VyInfo
//------------------------------------------------------------------------------
#pragma export (VyInfo::~VyInfo())
VyInfo::~VyInfo()
{
   this->stopHandlingNotificationsFor(*iContents);
   conn0->stopHandlingNotificationsFor(*this);
   conn1->stopHandlingNotificationsFor(*this);
   conn2->stopHandlingNotificationsFor(*this);

   delete conn0;
   delete conn1;
   delete conn2;


   delete iSetCanvas1;
   delete iBitmapControl1;
   delete iMultiCellCanvas1;
   delete iLogo;
   delete iVyperVersion;
   delete iVyGen;
   delete iGeneratorVersion;
   delete iVyDit;
   delete iEditorVersion;
   delete iCopyright;
   delete iContents;
   delete iRegistration;
}

//------------------------------------------------------------------------------
// VyInfo :: initializePart
//------------------------------------------------------------------------------
#pragma export (VyInfo::initializePart())
VyInfo & VyInfo::initializePart()
{
   this->handleNotificationsFor(*iContents);
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// VyInfo :: makeConnections
//------------------------------------------------------------------------------
#pragma export (VyInfo::makeConnections())
Boolean VyInfo::makeConnections()
{
   this->enableNotification();
   iSetCanvas1->enableNotification();
   iBitmapControl1->enableNotification();
   iMultiCellCanvas1->enableNotification();
   iLogo->enableNotification();
   iVyperVersion->enableNotification();
   iVyGen->enableNotification();
   iGeneratorVersion->enableNotification();
   iVyDit->enableNotification();
   iEditorVersion->enableNotification();
   iCopyright->enableNotification();
   iContents->enableNotification();
   iRegistration->enableNotification();

   unsigned long id = this->id();
   conn0->initialize(this, iGeneratorVersion);
   conn0->handleNotificationsFor(*this);
   conn1->initialize(this, iEditorVersion);
   conn1->handleNotificationsFor(*this);
   conn2->initialize(this, iRegistration);
   conn2->handleNotificationsFor(*this);

   return true;
}


//------------------------------------------------------------------------------
// VyInfo :: dispatchNotificationEvent
//------------------------------------------------------------------------------
#pragma export (VyInfo::dispatchNotificationEvent(const INotificationEvent &))
IObserver & VyInfo::dispatchNotificationEvent(const INotificationEvent & anEvent)
{
   if ((anEvent.notificationId() == IPushButton::buttonClickId) && (iContents == &anEvent.notifier()))
       notifyObservers(INotificationEvent(contentsButtonClickEvent, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   return *this;
}



