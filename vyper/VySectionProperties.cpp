/*******************************************************************************
* FILE NAME: VySectionProperties.cpp                                           *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     VySectionProperties                                                      *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _IMCELCV_
#include <imcelcv.hpp>
#endif

#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _IENTRYFD_
#include <ientryfd.hpp>
#endif

#ifndef _ICHECKBX_
#include <icheckbx.hpp>
#endif

#ifndef _ICNRCOL_
#include <icnrcol.hpp>
#endif

#ifndef _IRECT_
#include <irect.hpp>
#endif

#ifndef _ISETCV_
#include <isetcv.hpp>
#endif

#ifndef _IPUSHBUT_
#include <ipushbut.hpp>
#endif

#ifndef _VYSECTION_
#include "VySection.hpp"
#endif

#ifndef _VYLABEL_
#include "VyLabel.hpp"
#endif

#ifndef _VYKEYWORDPROPERTIES_
#include "VyKeywordProperties.hpp"
#endif

#ifndef _VYKEYWORD_
#include "VyKeyword.hpp"
#endif

#ifndef _VYLABELPROPERTIES_
#include "VyLabelProperties.hpp"
#endif

#ifndef _EXCEPTIONNOTIFICATION_
#include "ExceptionNotification.hpp"
#endif

#ifndef _IIBASE_
#include <ibase.hpp>
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _VYSECTIONPROPERTIES_
#include "VySectionProperties.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for VySectionPropertiesConn0
//*****************************************************************************
class VySectionPropertiesConn0 : public IObserver {
public:
   virtual  ~VySectionPropertiesConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VySection *> * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Section(title) to Title(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->target()->setTitle(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Section(title) to Title(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->target()->title());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySection::titleId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VySection *> * source;
   IEntryField * target;
   Boolean aligning;


};   //VySectionPropertiesConn0


//*****************************************************************************
// Class definition for VySectionPropertiesConn1
//*****************************************************************************
class VySectionPropertiesConn1 : public IObserver {
public:
   virtual  ~VySectionPropertiesConn1(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VySection *> * aSource, ICheckBox * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Section(listed) to Listed(selected))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->target()->enableListed(target->isSelected());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Section(listed) to Listed(selected))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->select(source->target()->isListed());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySection::listedId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == ICheckBox::selectId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VySection *> * source;
   ICheckBox * target;
   Boolean aligning;


};   //VySectionPropertiesConn1


//*****************************************************************************
// Class definition for VySectionPropertiesConn2
//*****************************************************************************
class VySectionPropertiesConn2 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn2(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Close(buttonClickEvent) to FrameWindow(close))");
         try {target->close();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IFrameWindow * target;


};   //VySectionPropertiesConn2


//*****************************************************************************
// Class definition for VySectionPropertiesConn3
//*****************************************************************************
class VySectionPropertiesConn3 : public IObserver {
public:
   virtual  ~VySectionPropertiesConn3(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VySection *> * aSource, IVBContainerControl< VyKeyword*, IVSequence<VyKeyword*>, VySectionPropertiesKeywordContainerCnrObj > * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Section(keywords) to KeywordContainer(items))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItems(source->target()->getKeywords());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySection::keywords) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBContainerControl< VyKeyword*, IVSequence<VyKeyword*>, VySectionPropertiesKeywordContainerCnrObj >::itemsId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VySection *> * source;
   IVBContainerControl< VyKeyword*, IVSequence<VyKeyword*>, VySectionPropertiesKeywordContainerCnrObj > * target;
   Boolean aligning;


};   //VySectionPropertiesConn3


//*****************************************************************************
// Class definition for VySectionPropertiesConn4
//*****************************************************************************
class VySectionPropertiesConn4 : public IObserver {
public:
   virtual  ~VySectionPropertiesConn4(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VySection *> * aSource, IVBContainerControl< VyLabel*, IVSequence<VyLabel*>, VySectionPropertiesLabelContainerCnrObj > * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Section(labels) to LabelContainer(items))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItems(source->target()->getLabels());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySection::labels) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBContainerControl< VyLabel*, IVSequence<VyLabel*>, VySectionPropertiesLabelContainerCnrObj >::itemsId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VySection *> * source;
   IVBContainerControl< VyLabel*, IVSequence<VyLabel*>, VySectionPropertiesLabelContainerCnrObj > * target;
   Boolean aligning;


};   //VySectionPropertiesConn4


//*****************************************************************************
// Class definition for VySectionPropertiesConn5
//*****************************************************************************
class VySectionPropertiesConn5 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn5(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VySectionPropertiesConn5 & setIPosition(IVBContainerControl< VyKeyword*, IVSequence<VyKeyword*>, VySectionPropertiesKeywordContainerCnrObj > * aSelf) {iIPosition = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : DeleteKeyword(buttonClickEvent) to Section(deleteKeyword))");
         try {target->target()->deleteKeyword(iIPosition->selectedCollectionPosition());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IVBVariablePartPointer<VySection *> * target;
   IVBContainerControl< VyKeyword*, IVSequence<VyKeyword*>, VySectionPropertiesKeywordContainerCnrObj > * iIPosition;


};   //VySectionPropertiesConn5

const INotificationId VySectionPropertiesConn5::exceptionId = "VySectionPropertiesConn5::exceptionId";

//*****************************************************************************
// Class definition for VySectionPropertiesConn7
//*****************************************************************************
class VySectionPropertiesConn7 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn7(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, VySectionPropertiesKeywordPropertiesFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ModifyKeyword(buttonClickEvent) to KeywordPropertiesFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   VySectionPropertiesKeywordPropertiesFactoryFactory * target;


};   //VySectionPropertiesConn7


//*****************************************************************************
// Class definition for VySectionPropertiesConn8
//*****************************************************************************
class VySectionPropertiesConn8 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn8(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySectionPropertiesKeywordPropertiesFactoryFactory * aSource, IVBVariablePartPointer<VyKeywordProperties *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target) return(*this);
      if (anEvent.notificationId() == VySectionPropertiesKeywordPropertiesFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : KeywordPropertiesFactory(newEvent) to KeywordProperties(this))");
         try {target->setTarget((VyKeywordProperties *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySectionPropertiesKeywordPropertiesFactoryFactory * source;
   IVBVariablePartPointer<VyKeywordProperties *> * target;


};   //VySectionPropertiesConn8


//*****************************************************************************
// Class definition for VySectionPropertiesConn9
//*****************************************************************************
class VySectionPropertiesConn9 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn9(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySectionPropertiesKeywordPropertiesFactoryFactory * aSource, IVBVariablePartPointer<VyKeywordProperties *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VySectionPropertiesKeywordPropertiesFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : KeywordPropertiesFactory(newEvent) to KeywordProperties(showModally))");
         try {target->target()->showModally();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySectionPropertiesKeywordPropertiesFactoryFactory * source;
   IVBVariablePartPointer<VyKeywordProperties *> * target;


};   //VySectionPropertiesConn9

const INotificationId VySectionPropertiesConn9::exceptionId = "VySectionPropertiesConn9::exceptionId";

//*****************************************************************************
// Class definition for VySectionPropertiesConn10
//*****************************************************************************
class VySectionPropertiesConn10 : public IObserver {
public:
   virtual  ~VySectionPropertiesConn10(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBContainerControl< VyKeyword*, IVSequence<VyKeyword*>, VySectionPropertiesKeywordContainerCnrObj > * aSource, IVBVariablePartPointer<VyKeywordProperties *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : KeywordContainer(selectedElement) to KeywordProperties(keyword))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->target()->getKeyword()->setTarget(source->selectedElement());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IVBContainerControl< VyKeyword*, IVSequence<VyKeyword*>, VySectionPropertiesKeywordContainerCnrObj >::selectId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == VyKeywordProperties::keyword) && (target->target() == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBContainerControl< VyKeyword*, IVSequence<VyKeyword*>, VySectionPropertiesKeywordContainerCnrObj > * source;
   IVBVariablePartPointer<VyKeywordProperties *> * target;
   Boolean aligning;


};   //VySectionPropertiesConn10


//*****************************************************************************
// Class definition for VySectionPropertiesConn11
//*****************************************************************************
class VySectionPropertiesConn11 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn11(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, VySectionPropertiesKeywordFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyKeyword * actionResult() const { return iActionResult; };
   VySectionPropertiesConn11 & setActionResult(VyKeyword * aSelf) {
      iActionResult = aSelf;
      notifyObservers(INotificationEvent(actionResultId, *this));
      return *this;
      };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId actionResultId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : AddKeyword(buttonClickEvent) to KeywordFactory(new))");
         try {setActionResult(target->create());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   VySectionPropertiesKeywordFactoryFactory * target;
   VyKeyword * iActionResult;


};   //VySectionPropertiesConn11

const INotificationId VySectionPropertiesConn11::actionResultId = "VySectionPropertiesConn11::actionResult";

//*****************************************************************************
// Class definition for VySectionPropertiesConn12
//*****************************************************************************
class VySectionPropertiesConn12 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn12(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VySectionPropertiesConn12 & setKeyword(VySectionPropertiesConn11 * aSelf) {iKeyword = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : AddKeyword(buttonClickEvent) to Section(addKeyword))");
         try {target->target()->addKeyword(iKeyword->actionResult(), true);}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IVBVariablePartPointer<VySection *> * target;
   VySectionPropertiesConn11 * iKeyword;


};   //VySectionPropertiesConn12

const INotificationId VySectionPropertiesConn12::exceptionId = "VySectionPropertiesConn12::exceptionId";

//*****************************************************************************
// Class definition for VySectionPropertiesConn27
//*****************************************************************************
class VySectionPropertiesConn27 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn27(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IVBContainerControl< VyKeyword*, IVSequence<VyKeyword*>, VySectionPropertiesKeywordContainerCnrObj > * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VySectionPropertiesConn27 & setCollectionPosition(IVBContainerControl< VyKeyword*, IVSequence<VyKeyword*>, VySectionPropertiesKeywordContainerCnrObj > * aSelf) {iCollectionPosition = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : AddKeyword(buttonClickEvent) to KeywordContainer(select))");
         try {target->select(iCollectionPosition->objectCount(), true);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IVBContainerControl< VyKeyword*, IVSequence<VyKeyword*>, VySectionPropertiesKeywordContainerCnrObj > * target;
   IVBContainerControl< VyKeyword*, IVSequence<VyKeyword*>, VySectionPropertiesKeywordContainerCnrObj > * iCollectionPosition;


};   //VySectionPropertiesConn27


//*****************************************************************************
// Class definition for VySectionPropertiesConn14
//*****************************************************************************
class VySectionPropertiesConn14 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn14(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, VySectionPropertiesKeywordPropertiesFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : AddKeyword(buttonClickEvent) to KeywordPropertiesFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   VySectionPropertiesKeywordPropertiesFactoryFactory * target;


};   //VySectionPropertiesConn14


//*****************************************************************************
// Class definition for VySectionPropertiesConn15
//*****************************************************************************
class VySectionPropertiesConn15 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn15(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBContainerControl< VyKeyword*, IVSequence<VyKeyword*>, VySectionPropertiesKeywordContainerCnrObj > * aSource, VySectionPropertiesKeywordPropertiesFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBContainerControl< VyKeyword*, IVSequence<VyKeyword*>, VySectionPropertiesKeywordContainerCnrObj >::enterId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : KeywordContainer(enterEvent) to KeywordPropertiesFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBContainerControl< VyKeyword*, IVSequence<VyKeyword*>, VySectionPropertiesKeywordContainerCnrObj > * source;
   VySectionPropertiesKeywordPropertiesFactoryFactory * target;


};   //VySectionPropertiesConn15


//*****************************************************************************
// Class definition for VySectionPropertiesConn16
//*****************************************************************************
class VySectionPropertiesConn16 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn16(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBContainerControl< VyLabel*, IVSequence<VyLabel*>, VySectionPropertiesLabelContainerCnrObj > * aSource, VySectionPropertiesLabelPropertiesFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBContainerControl< VyLabel*, IVSequence<VyLabel*>, VySectionPropertiesLabelContainerCnrObj >::enterId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : LabelContainer(enterEvent) to LabelPropertiesFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBContainerControl< VyLabel*, IVSequence<VyLabel*>, VySectionPropertiesLabelContainerCnrObj > * source;
   VySectionPropertiesLabelPropertiesFactoryFactory * target;


};   //VySectionPropertiesConn16


//*****************************************************************************
// Class definition for VySectionPropertiesConn17
//*****************************************************************************
class VySectionPropertiesConn17 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn17(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, VySectionPropertiesLabelPropertiesFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ModifyLabel(buttonClickEvent) to LabelPropertiesFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   VySectionPropertiesLabelPropertiesFactoryFactory * target;


};   //VySectionPropertiesConn17


//*****************************************************************************
// Class definition for VySectionPropertiesConn18
//*****************************************************************************
class VySectionPropertiesConn18 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn18(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySectionPropertiesLabelPropertiesFactoryFactory * aSource, IVBVariablePartPointer<VyLabelProperties *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target) return(*this);
      if (anEvent.notificationId() == VySectionPropertiesLabelPropertiesFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : LabelPropertiesFactory(newEvent) to LabelProperties(this))");
         try {target->setTarget((VyLabelProperties *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySectionPropertiesLabelPropertiesFactoryFactory * source;
   IVBVariablePartPointer<VyLabelProperties *> * target;


};   //VySectionPropertiesConn18


//*****************************************************************************
// Class definition for VySectionPropertiesConn19
//*****************************************************************************
class VySectionPropertiesConn19 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn19(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySectionPropertiesLabelPropertiesFactoryFactory * aSource, IVBVariablePartPointer<VyLabelProperties *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VySectionPropertiesLabelPropertiesFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : LabelPropertiesFactory(newEvent) to LabelProperties(showModally))");
         try {target->target()->showModally();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySectionPropertiesLabelPropertiesFactoryFactory * source;
   IVBVariablePartPointer<VyLabelProperties *> * target;


};   //VySectionPropertiesConn19

const INotificationId VySectionPropertiesConn19::exceptionId = "VySectionPropertiesConn19::exceptionId";

//*****************************************************************************
// Class definition for VySectionPropertiesConn20
//*****************************************************************************
class VySectionPropertiesConn20 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn20(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, VySectionPropertiesLabelFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyLabel * actionResult() const { return iActionResult; };
   VySectionPropertiesConn20 & setActionResult(VyLabel * aSelf) {
      iActionResult = aSelf;
      notifyObservers(INotificationEvent(actionResultId, *this));
      return *this;
      };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId actionResultId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : AddLabel(buttonClickEvent) to LabelFactory(new))");
         try {setActionResult(target->create());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   VySectionPropertiesLabelFactoryFactory * target;
   VyLabel * iActionResult;


};   //VySectionPropertiesConn20

const INotificationId VySectionPropertiesConn20::actionResultId = "VySectionPropertiesConn20::actionResult";

//*****************************************************************************
// Class definition for VySectionPropertiesConn21
//*****************************************************************************
class VySectionPropertiesConn21 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn21(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VySectionPropertiesConn21 & setLabel(VySectionPropertiesConn20 * aSelf) {iLabel = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : AddLabel(buttonClickEvent) to Section(addLabel))");
         try {target->target()->addLabel(iLabel->actionResult(), true);}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IVBVariablePartPointer<VySection *> * target;
   VySectionPropertiesConn20 * iLabel;


};   //VySectionPropertiesConn21

const INotificationId VySectionPropertiesConn21::exceptionId = "VySectionPropertiesConn21::exceptionId";

//*****************************************************************************
// Class definition for VySectionPropertiesConn24
//*****************************************************************************
class VySectionPropertiesConn24 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn24(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VySectionPropertiesConn24 & setIPosition(IVBContainerControl< VyLabel*, IVSequence<VyLabel*>, VySectionPropertiesLabelContainerCnrObj > * aSelf) {iIPosition = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : DeleteLabel(buttonClickEvent) to Section(deleteLabel))");
         try {target->target()->deleteLabel(iIPosition->selectedCollectionPosition());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IVBVariablePartPointer<VySection *> * target;
   IVBContainerControl< VyLabel*, IVSequence<VyLabel*>, VySectionPropertiesLabelContainerCnrObj > * iIPosition;


};   //VySectionPropertiesConn24

const INotificationId VySectionPropertiesConn24::exceptionId = "VySectionPropertiesConn24::exceptionId";

//*****************************************************************************
// Class definition for VySectionPropertiesConn26
//*****************************************************************************
class VySectionPropertiesConn26 : public IObserver {
public:
   virtual  ~VySectionPropertiesConn26(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBContainerControl< VyLabel*, IVSequence<VyLabel*>, VySectionPropertiesLabelContainerCnrObj > * aSource, IVBVariablePartPointer<VyLabelProperties *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : LabelContainer(selectedElement) to LabelProperties(label))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->target()->getLabel()->setTarget(source->selectedElement());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IVBContainerControl< VyLabel*, IVSequence<VyLabel*>, VySectionPropertiesLabelContainerCnrObj >::selectId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == VyLabelProperties::label) && (target->target() == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBContainerControl< VyLabel*, IVSequence<VyLabel*>, VySectionPropertiesLabelContainerCnrObj > * source;
   IVBVariablePartPointer<VyLabelProperties *> * target;
   Boolean aligning;


};   //VySectionPropertiesConn26


//*****************************************************************************
// Class definition for VySectionPropertiesConn29
//*****************************************************************************
class VySectionPropertiesConn29 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn29(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IVBContainerControl< VyLabel*, IVSequence<VyLabel*>, VySectionPropertiesLabelContainerCnrObj > * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VySectionPropertiesConn29 & setCollectionPosition(IVBContainerControl< VyLabel*, IVSequence<VyLabel*>, VySectionPropertiesLabelContainerCnrObj > * aSelf) {iCollectionPosition = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : AddLabel(buttonClickEvent) to LabelContainer(select))");
         try {target->select(iCollectionPosition->objectCount(), true);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IVBContainerControl< VyLabel*, IVSequence<VyLabel*>, VySectionPropertiesLabelContainerCnrObj > * target;
   IVBContainerControl< VyLabel*, IVSequence<VyLabel*>, VySectionPropertiesLabelContainerCnrObj > * iCollectionPosition;


};   //VySectionPropertiesConn29


//*****************************************************************************
// Class definition for VySectionPropertiesConn23
//*****************************************************************************
class VySectionPropertiesConn23 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn23(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, VySectionPropertiesLabelPropertiesFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : AddLabel(buttonClickEvent) to LabelPropertiesFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   VySectionPropertiesLabelPropertiesFactoryFactory * target;


};   //VySectionPropertiesConn23


//*****************************************************************************
// Class definition for VySectionPropertiesConn31
//*****************************************************************************
class VySectionPropertiesConn31 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn31(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VySection *> * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   Boolean actionResult() const { return iActionResult; };
   VySectionPropertiesConn31 & setActionResult(Boolean aSelf) {
      iActionResult = aSelf;
      notifyObservers(INotificationEvent(actionResultId, *this));
      return *this;
      };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;
   static const INotificationId actionResultId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IVBVariablePartPointer<VySection *>::targetId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Section(targetPtr) to Section(load))");
         try {setActionResult(target->target()->load());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VySection *> * source;
   IVBVariablePartPointer<VySection *> * target;
   Boolean iActionResult;


};   //VySectionPropertiesConn31

const INotificationId VySectionPropertiesConn31::exceptionId = "VySectionPropertiesConn31::exceptionId";
const INotificationId VySectionPropertiesConn31::actionResultId = "VySectionPropertiesConn31::actionResult";

//*****************************************************************************
// Class definition for VySectionPropertiesConn32
//*****************************************************************************
class VySectionPropertiesConn32 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn32(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySectionPropertiesConn31 * aSource, VySectionProperties * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn31(actionResult) to (loaded))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->enableLoaded(source->actionResult());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySectionPropertiesConn31::actionResultId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == VySectionProperties::loadedId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySectionPropertiesConn31 * source;
   VySectionProperties * target;
   Boolean aligning;


};   //VySectionPropertiesConn32


//*****************************************************************************
// Class definition for VySectionPropertiesConn33
//*****************************************************************************
class VySectionPropertiesConn33 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn33(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, VySectionProperties * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::closeId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FrameWindow(closeEvent) to (customLogic, \"Close section if it was previously closed\"))");
         try {codeSnippet(&anEvent);}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member functions
   //---------------------------------------------------------------------------
   void codeSnippet(const INotificationEvent* event)
      {
      if ( target->isLoaded() )
        target->iSection->target()->close();
      };

   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   VySectionProperties * target;


};   //VySectionPropertiesConn33

const INotificationId VySectionPropertiesConn33::exceptionId = "VySectionPropertiesConn33::exceptionId";

//*****************************************************************************
// Class definition for VySectionPropertiesConn34
//*****************************************************************************
class VySectionPropertiesConn34 : public IObserver {
public:
   virtual  ~VySectionPropertiesConn34(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, IVBVariablePartPointer<VyLabelProperties *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FrameWindow(this) to LabelProperties(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->target()->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   IVBVariablePartPointer<VyLabelProperties *> * target;
   Boolean aligning;


};   //VySectionPropertiesConn34


//*****************************************************************************
// Class definition for VySectionPropertiesConn35
//*****************************************************************************
class VySectionPropertiesConn35 : public IObserver {
public:
   virtual  ~VySectionPropertiesConn35(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, IVBVariablePartPointer<VyKeywordProperties *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FrameWindow(this) to KeywordProperties(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->target()->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   IVBVariablePartPointer<VyKeywordProperties *> * target;
   Boolean aligning;


};   //VySectionPropertiesConn35


//*****************************************************************************
// Class definition for VySectionPropertiesConn36
//*****************************************************************************
class VySectionPropertiesConn36 : public IObserver {
public:
   virtual  ~VySectionPropertiesConn36(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FrameWindow(this) to ExceptionNotification(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == ExceptionNotification::ownerId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   ExceptionNotification * target;
   Boolean aligning;


};   //VySectionPropertiesConn36


//*****************************************************************************
// Class definition for VySectionPropertiesConn37
//*****************************************************************************
class VySectionPropertiesConn37 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn37(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySectionPropertiesConn33 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySectionPropertiesConn33::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn33(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySectionPropertiesConn33 * source;
   ExceptionNotification * target;


};   //VySectionPropertiesConn37


//*****************************************************************************
// Class definition for VySectionPropertiesConn38
//*****************************************************************************
class VySectionPropertiesConn38 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn38(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySectionPropertiesConn19 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySectionPropertiesConn19::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn19(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySectionPropertiesConn19 * source;
   ExceptionNotification * target;


};   //VySectionPropertiesConn38


//*****************************************************************************
// Class definition for VySectionPropertiesConn39
//*****************************************************************************
class VySectionPropertiesConn39 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn39(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySectionPropertiesConn9 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySectionPropertiesConn9::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn9(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySectionPropertiesConn9 * source;
   ExceptionNotification * target;


};   //VySectionPropertiesConn39


//*****************************************************************************
// Class definition for VySectionPropertiesConn40
//*****************************************************************************
class VySectionPropertiesConn40 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn40(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySectionPropertiesConn12 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySectionPropertiesConn12::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn12(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySectionPropertiesConn12 * source;
   ExceptionNotification * target;


};   //VySectionPropertiesConn40


//*****************************************************************************
// Class definition for VySectionPropertiesConn41
//*****************************************************************************
class VySectionPropertiesConn41 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn41(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySectionPropertiesConn31 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySectionPropertiesConn31::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn31(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySectionPropertiesConn31 * source;
   ExceptionNotification * target;


};   //VySectionPropertiesConn41


//*****************************************************************************
// Class definition for VySectionPropertiesConn42
//*****************************************************************************
class VySectionPropertiesConn42 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn42(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySectionPropertiesConn5 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySectionPropertiesConn5::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn5(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySectionPropertiesConn5 * source;
   ExceptionNotification * target;


};   //VySectionPropertiesConn42


//*****************************************************************************
// Class definition for VySectionPropertiesConn43
//*****************************************************************************
class VySectionPropertiesConn43 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn43(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySectionPropertiesConn21 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySectionPropertiesConn21::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn21(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySectionPropertiesConn21 * source;
   ExceptionNotification * target;


};   //VySectionPropertiesConn43


//*****************************************************************************
// Class definition for VySectionPropertiesConn44
//*****************************************************************************
class VySectionPropertiesConn44 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn44(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySectionPropertiesConn24 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySectionPropertiesConn24::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn24(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySectionPropertiesConn24 * source;
   ExceptionNotification * target;


};   //VySectionPropertiesConn44


//*****************************************************************************
// Class definition for VySectionPropertiesConn45
//*****************************************************************************
class VySectionPropertiesConn45 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn45(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyLabelProperties *> * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VyLabelProperties::changedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : LabelProperties(changed) to Section(modified))");
         try {target->target()->enableModified(true);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyLabelProperties *> * source;
   IVBVariablePartPointer<VySection *> * target;


};   //VySectionPropertiesConn45


//*****************************************************************************
// Class definition for VySectionPropertiesConn46
//*****************************************************************************
class VySectionPropertiesConn46 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySectionPropertiesConn46(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyKeywordProperties *> * aSource, IVBVariablePartPointer<VySection *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == VyKeywordProperties::changedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : KeywordProperties(changed) to Section(modified))");
         try {target->target()->enableModified(true);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyKeywordProperties *> * source;
   IVBVariablePartPointer<VySection *> * target;


};   //VySectionPropertiesConn46


//------------------------------------------------------------------------------
// VySectionPropertiesKeywordContainerCnrObj :: VySectionPropertiesKeywordContainerCnrObj
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesKeywordContainerCnrObj::VySectionPropertiesKeywordContainerCnrObj(VyKeyword&))
VySectionPropertiesKeywordContainerCnrObj::VySectionPropertiesKeywordContainerCnrObj(VyKeyword& anObject)
 :IVBContainerObject(anObject.text(), ISystemPointerHandle(ISystemPointerHandle::warning)),
      ilistedString(anObject.listedString()), iexternalString(anObject.externalString()), pRealObject(anObject)
{
   enableDataUpdate();
   handleNotificationsFor(pRealObject);
}


//------------------------------------------------------------------------------
// VySectionPropertiesKeywordContainerCnrObj :: VySectionPropertiesKeywordContainerCnrObj
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesKeywordContainerCnrObj::VySectionPropertiesKeywordContainerCnrObj(VySectionPropertiesKeywordContainerCnrObj&))
VySectionPropertiesKeywordContainerCnrObj::VySectionPropertiesKeywordContainerCnrObj(VySectionPropertiesKeywordContainerCnrObj& anObject)
 :IVBContainerObject(anObject.iconText(), anObject.icon()),
      ilistedString(anObject.ilistedString), iexternalString(anObject.iexternalString), pRealObject(anObject.pRealObject)
{  }


//------------------------------------------------------------------------------
// VySectionPropertiesKeywordContainerCnrObj :: ~VySectionPropertiesKeywordContainerCnrObj
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesKeywordContainerCnrObj::~VySectionPropertiesKeywordContainerCnrObj())
VySectionPropertiesKeywordContainerCnrObj::~VySectionPropertiesKeywordContainerCnrObj()
{
   this->stopHandlingNotificationsFor(pRealObject);
}


//------------------------------------------------------------------------------
// VySectionPropertiesKeywordContainerCnrObj :: refreshFromObject
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesKeywordContainerCnrObj::refreshFromObject())
IVBContainerObject & VySectionPropertiesKeywordContainerCnrObj::refreshFromObject()
{
   setIconText(pRealObject.text());
   setIcon(ISystemPointerHandle(ISystemPointerHandle::warning));
   ilistedString = pRealObject.listedString();
   iexternalString = pRealObject.externalString();
   return *this;
}


//------------------------------------------------------------------------------
// VySectionPropertiesKeywordContainerCnrObj :: updateToObject
//------------------------------------------------------------------------------
IVBContainerObject & VySectionPropertiesKeywordContainerCnrObj::updateToObject()
{
   pRealObject.setText(iconText());
   return *this;
}


//------------------------------------------------------------------------------
// VySectionPropertiesKeywordContainerCnrObj :: operator=
//------------------------------------------------------------------------------
VySectionPropertiesKeywordContainerCnrObj& VySectionPropertiesKeywordContainerCnrObj::operator=(const VySectionPropertiesKeywordContainerCnrObj& anObject)
{
   if (this == &anObject) {
      return *this;
      }
   IVBContainerObject::operator=(anObject);
   ilistedString = anObject.ilistedString;
   iexternalString = anObject.iexternalString;
   return *this;
}



//------------------------------------------------------------------------------
// VySectionPropertiesLabelContainerCnrObj :: VySectionPropertiesLabelContainerCnrObj
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesLabelContainerCnrObj::VySectionPropertiesLabelContainerCnrObj(VyLabel&))
VySectionPropertiesLabelContainerCnrObj::VySectionPropertiesLabelContainerCnrObj(VyLabel& anObject)
 :IVBContainerObject(anObject.name(), ISystemPointerHandle(ISystemPointerHandle::warning)),
      iidString(anObject.idString()), iexternalString(anObject.externalString()), pRealObject(anObject)
{
   enableDataUpdate();
   handleNotificationsFor(pRealObject);
}


//------------------------------------------------------------------------------
// VySectionPropertiesLabelContainerCnrObj :: VySectionPropertiesLabelContainerCnrObj
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesLabelContainerCnrObj::VySectionPropertiesLabelContainerCnrObj(VySectionPropertiesLabelContainerCnrObj&))
VySectionPropertiesLabelContainerCnrObj::VySectionPropertiesLabelContainerCnrObj(VySectionPropertiesLabelContainerCnrObj& anObject)
 :IVBContainerObject(anObject.iconText(), anObject.icon()),
      iidString(anObject.iidString), iexternalString(anObject.iexternalString), pRealObject(anObject.pRealObject)
{  }


//------------------------------------------------------------------------------
// VySectionPropertiesLabelContainerCnrObj :: ~VySectionPropertiesLabelContainerCnrObj
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesLabelContainerCnrObj::~VySectionPropertiesLabelContainerCnrObj())
VySectionPropertiesLabelContainerCnrObj::~VySectionPropertiesLabelContainerCnrObj()
{
   this->stopHandlingNotificationsFor(pRealObject);
}


//------------------------------------------------------------------------------
// VySectionPropertiesLabelContainerCnrObj :: refreshFromObject
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesLabelContainerCnrObj::refreshFromObject())
IVBContainerObject & VySectionPropertiesLabelContainerCnrObj::refreshFromObject()
{
   setIconText(pRealObject.name());
   setIcon(ISystemPointerHandle(ISystemPointerHandle::warning));
   iidString = pRealObject.idString();
   iexternalString = pRealObject.externalString();
   return *this;
}


//------------------------------------------------------------------------------
// VySectionPropertiesLabelContainerCnrObj :: updateToObject
//------------------------------------------------------------------------------
IVBContainerObject & VySectionPropertiesLabelContainerCnrObj::updateToObject()
{
   pRealObject.setName(iconText());
   return *this;
}


//------------------------------------------------------------------------------
// VySectionPropertiesLabelContainerCnrObj :: operator=
//------------------------------------------------------------------------------
VySectionPropertiesLabelContainerCnrObj& VySectionPropertiesLabelContainerCnrObj::operator=(const VySectionPropertiesLabelContainerCnrObj& anObject)
{
   if (this == &anObject) {
      return *this;
      }
   IVBContainerObject::operator=(anObject);
   iidString = anObject.iidString;
   iexternalString = anObject.iexternalString;
   return *this;
}



const INotificationId VySectionPropertiesLabelFactoryFactory::newObjectCreatedId = "VySectionPropertiesLabelFactoryFactory::newObjectCreatedId";

//------------------------------------------------------------------------------
// VySectionPropertiesLabelFactoryFactory :: VySectionPropertiesLabelFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesLabelFactoryFactory::VySectionPropertiesLabelFactoryFactory())
VySectionPropertiesLabelFactoryFactory::VySectionPropertiesLabelFactoryFactory()
{
   enableNotification();
}

//------------------------------------------------------------------------------
// VySectionPropertiesLabelFactoryFactory :: ~VySectionPropertiesLabelFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesLabelFactoryFactory::~VySectionPropertiesLabelFactoryFactory())
VySectionPropertiesLabelFactoryFactory::~VySectionPropertiesLabelFactoryFactory()
{
   disableNotification();
}

//------------------------------------------------------------------------------
// VySectionPropertiesLabelFactoryFactory :: create
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesLabelFactoryFactory::create())
VyLabel * VySectionPropertiesLabelFactoryFactory::create()
{
   VyLabel *iLabelFactory = new VyLabel();
   iLabelFactory->enableNotification();
   notifyObservers(INotificationEvent(newObjectCreatedId, *this, true, IEventData((void *)iLabelFactory)));
   return(iLabelFactory);
}

const INotificationId VySectionPropertiesKeywordPropertiesFactoryFactory::newObjectCreatedId = "VySectionPropertiesKeywordPropertiesFactoryFactory::newObjectCreatedId";

#pragma export (VySectionPropertiesKeywordPropertiesFactoryFactory::id)
unsigned long VySectionPropertiesKeywordPropertiesFactoryFactory::id = 0;

//------------------------------------------------------------------------------
// VySectionPropertiesKeywordPropertiesFactoryFactory :: VySectionPropertiesKeywordPropertiesFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesKeywordPropertiesFactoryFactory::VySectionPropertiesKeywordPropertiesFactoryFactory(unsigned long))
VySectionPropertiesKeywordPropertiesFactoryFactory::VySectionPropertiesKeywordPropertiesFactoryFactory(unsigned long anId)
{
   enableNotification();
   id = (id) ? id : anId;
}

//------------------------------------------------------------------------------
// VySectionPropertiesKeywordPropertiesFactoryFactory :: ~VySectionPropertiesKeywordPropertiesFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesKeywordPropertiesFactoryFactory::~VySectionPropertiesKeywordPropertiesFactoryFactory())
VySectionPropertiesKeywordPropertiesFactoryFactory::~VySectionPropertiesKeywordPropertiesFactoryFactory()
{
   disableNotification();
}

//------------------------------------------------------------------------------
// VySectionPropertiesKeywordPropertiesFactoryFactory :: create
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesKeywordPropertiesFactoryFactory::create())
VyKeywordProperties * VySectionPropertiesKeywordPropertiesFactoryFactory::create()
{
   VyKeywordProperties *iKeywordPropertiesFactory = new VyKeywordProperties(
      id+WNDOFFSET_VySectionProperties_KeywordPropertiesFactory, 
      IWindow::desktopWindow(), 
      0, 
      VyKeywordProperties::defaultFramingSpec());
   iKeywordPropertiesFactory->enableChanged(false);
   iKeywordPropertiesFactory->enableNotification();
   iKeywordPropertiesFactory->initializePart();
   notifyObservers(INotificationEvent(newObjectCreatedId, *this, true, IEventData((void *)iKeywordPropertiesFactory)));
   return(iKeywordPropertiesFactory);
}

const INotificationId VySectionPropertiesKeywordFactoryFactory::newObjectCreatedId = "VySectionPropertiesKeywordFactoryFactory::newObjectCreatedId";

//------------------------------------------------------------------------------
// VySectionPropertiesKeywordFactoryFactory :: VySectionPropertiesKeywordFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesKeywordFactoryFactory::VySectionPropertiesKeywordFactoryFactory())
VySectionPropertiesKeywordFactoryFactory::VySectionPropertiesKeywordFactoryFactory()
{
   enableNotification();
}

//------------------------------------------------------------------------------
// VySectionPropertiesKeywordFactoryFactory :: ~VySectionPropertiesKeywordFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesKeywordFactoryFactory::~VySectionPropertiesKeywordFactoryFactory())
VySectionPropertiesKeywordFactoryFactory::~VySectionPropertiesKeywordFactoryFactory()
{
   disableNotification();
}

//------------------------------------------------------------------------------
// VySectionPropertiesKeywordFactoryFactory :: create
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesKeywordFactoryFactory::create())
VyKeyword * VySectionPropertiesKeywordFactoryFactory::create()
{
   VyKeyword *iKeywordFactory = new VyKeyword();
   iKeywordFactory->enableNotification();
   notifyObservers(INotificationEvent(newObjectCreatedId, *this, true, IEventData((void *)iKeywordFactory)));
   return(iKeywordFactory);
}

const INotificationId VySectionPropertiesLabelPropertiesFactoryFactory::newObjectCreatedId = "VySectionPropertiesLabelPropertiesFactoryFactory::newObjectCreatedId";

#pragma export (VySectionPropertiesLabelPropertiesFactoryFactory::id)
unsigned long VySectionPropertiesLabelPropertiesFactoryFactory::id = 0;

//------------------------------------------------------------------------------
// VySectionPropertiesLabelPropertiesFactoryFactory :: VySectionPropertiesLabelPropertiesFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesLabelPropertiesFactoryFactory::VySectionPropertiesLabelPropertiesFactoryFactory(unsigned long))
VySectionPropertiesLabelPropertiesFactoryFactory::VySectionPropertiesLabelPropertiesFactoryFactory(unsigned long anId)
{
   enableNotification();
   id = (id) ? id : anId;
}

//------------------------------------------------------------------------------
// VySectionPropertiesLabelPropertiesFactoryFactory :: ~VySectionPropertiesLabelPropertiesFactoryFactory
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesLabelPropertiesFactoryFactory::~VySectionPropertiesLabelPropertiesFactoryFactory())
VySectionPropertiesLabelPropertiesFactoryFactory::~VySectionPropertiesLabelPropertiesFactoryFactory()
{
   disableNotification();
}

//------------------------------------------------------------------------------
// VySectionPropertiesLabelPropertiesFactoryFactory :: create
//------------------------------------------------------------------------------
#pragma export (VySectionPropertiesLabelPropertiesFactoryFactory::create())
VyLabelProperties * VySectionPropertiesLabelPropertiesFactoryFactory::create()
{
   VyLabelProperties *iLabelPropertiesFactory = new VyLabelProperties(
      id+WNDOFFSET_VySectionProperties_LabelPropertiesFactory, 
      IWindow::desktopWindow(), 
      0, 
      VyLabelProperties::defaultFramingSpec());
   iLabelPropertiesFactory->enableChanged(false);
   iLabelPropertiesFactory->enableNotification();
   iLabelPropertiesFactory->initializePart();
   notifyObservers(INotificationEvent(newObjectCreatedId, *this, true, IEventData((void *)iLabelPropertiesFactory)));
   return(iLabelPropertiesFactory);
}

#pragma export (VySectionProperties::readyId)
const INotificationId VySectionProperties::readyId = "VySectionProperties::readyId";

#pragma export (VySectionProperties::section)
const INotificationId VySectionProperties::section = "VySectionProperties::section";

//------------------------------------------------------------------------------
// VySectionProperties :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (VySectionProperties::defaultFramingSpec())
const IRectangle VySectionProperties::defaultFramingSpec()
{
   return(IRectangle(IPoint(15, IWindow::desktopWindow()->size().height() - 41 - 512),ISize(474, 512)));
}


//------------------------------------------------------------------------------
// VySectionProperties :: defaultStyle
//------------------------------------------------------------------------------
#pragma export (VySectionProperties::defaultStyle())
const IFrameWindow::Style VySectionProperties::defaultStyle()
{
   return(IFrameWindow::defaultStyle() & ~IFrameWindow::windowList | IFrameWindow::dialogBorder);
}


//------------------------------------------------------------------------------
// VySectionProperties :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (VySectionProperties::defaultTitle())
IString VySectionProperties::defaultTitle()
{
   return("Section Properties");
}


//------------------------------------------------------------------------------
// VySectionProperties :: VySectionProperties
//------------------------------------------------------------------------------
#pragma export (VySectionProperties::VySectionProperties(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
VySectionProperties::VySectionProperties(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   iMultiCellCanvas = new IMultiCellCanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iTitleLabel = new IStaticText(
      id+WNDOFFSET_VySectionProperties_TitleLabel, 
      iMultiCellCanvas, 
      iMultiCellCanvas, 
      IRectangle(), 
      IStaticText::defaultStyle() | IStaticText::mnemonic | IControl::group);
   iTitle = new IEntryField(
      id+WNDOFFSET_VySectionProperties_Title, 
      iMultiCellCanvas, 
      iMultiCellCanvas, 
      IRectangle(), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iListed = new ICheckBox(
      id+WNDOFFSET_VySectionProperties_Listed, 
      iMultiCellCanvas, 
      iMultiCellCanvas, 
      IRectangle(), 
      ICheckBox::defaultStyle() | IControl::tabStop | IControl::group);
   iKeywordContainer = new IVBContainerControl< VyKeyword*, IVSequence<VyKeyword*>, VySectionPropertiesKeywordContainerCnrObj >(
      id+WNDOFFSET_VySectionProperties_KeywordContainer, 
      iMultiCellCanvas, 
      iMultiCellCanvas, 
      IRectangle ( ), 
      IContainerControl::defaultStyle() | IControl::group | IControl::tabStop);
   iKeywordName = new IContainerColumn(VySectionPropertiesKeywordContainerCnrObj::iconTextOffset(), IContainerColumn::defaultHeadingStyle ( ), (IContainerColumn::defaultDataStyle()) & ~IContainerColumn::icon | IContainerColumn::string);
   iKeywordListed = new IContainerColumn(offsetof(VySectionPropertiesKeywordContainerCnrObj, ilistedString), IContainerColumn::defaultHeadingStyle ( ), (IContainerColumn::defaultDataStyle ( )) & ~IContainerColumn::icon | IContainerColumn::string);
   iKeywordExternal = new IContainerColumn(offsetof(VySectionPropertiesKeywordContainerCnrObj, iexternalString), IContainerColumn::defaultHeadingStyle ( ), (IContainerColumn::defaultDataStyle ( )) & ~IContainerColumn::icon | IContainerColumn::string);
   iKeywordButtons = new ISetCanvas(
      id+WNDOFFSET_VySectionProperties_KeywordButtons, 
      iMultiCellCanvas, 
      iMultiCellCanvas, 
      IRectangle());
   iAddKeyword = new IPushButton(
      id+WNDOFFSET_VySectionProperties_AddKeyword, 
      iKeywordButtons, 
      iKeywordButtons, 
      IRectangle(), 
      IPushButton::defaultStyle() | IButton::noPointerFocus | IControl::group | IControl::tabStop);
   iModifyKeyword = new IPushButton(
      id+WNDOFFSET_VySectionProperties_ModifyKeyword, 
      iKeywordButtons, 
      iKeywordButtons, 
      IRectangle(), 
      IPushButton::defaultStyle() | IButton::noPointerFocus);
   iDeleteKeyword = new IPushButton(
      id+WNDOFFSET_VySectionProperties_DeleteKeyword, 
      iKeywordButtons, 
      iKeywordButtons, 
      IRectangle(), 
      IPushButton::defaultStyle() | IButton::noPointerFocus);
   iLabelContainer = new IVBContainerControl< VyLabel*, IVSequence<VyLabel*>, VySectionPropertiesLabelContainerCnrObj >(
      id+WNDOFFSET_VySectionProperties_LabelContainer, 
      iMultiCellCanvas, 
      iMultiCellCanvas, 
      IRectangle ( ), 
      IContainerControl::defaultStyle() | IControl::group | IControl::tabStop);
   iLabelName = new IContainerColumn(VySectionPropertiesLabelContainerCnrObj::iconTextOffset(), IContainerColumn::defaultHeadingStyle ( ), (IContainerColumn::defaultDataStyle ( )) & ~IContainerColumn::icon | IContainerColumn::string);
   iContainerColumn1 = new IContainerColumn(offsetof(VySectionPropertiesLabelContainerCnrObj, iidString), IContainerColumn::defaultHeadingStyle ( ), (IContainerColumn::defaultDataStyle() & ~IContainerColumn::verticalSeparator | IContainerColumn::number) & ~IContainerColumn::icon | IContainerColumn::string);
   iContainerColumn2 = new IContainerColumn(offsetof(VySectionPropertiesLabelContainerCnrObj, iexternalString), IContainerColumn::defaultHeadingStyle ( ), (IContainerColumn::defaultDataStyle ( )) & ~IContainerColumn::icon | IContainerColumn::string);
   iLabelButtons = new ISetCanvas(
      id+WNDOFFSET_VySectionProperties_LabelButtons, 
      iMultiCellCanvas, 
      iMultiCellCanvas, 
      IRectangle());
   iAddLabel = new IPushButton(
      id+WNDOFFSET_VySectionProperties_AddLabel, 
      iLabelButtons, 
      iLabelButtons, 
      IRectangle(), 
      IPushButton::defaultStyle() | IButton::noPointerFocus | IControl::group | IControl::tabStop);
   iModifyLabel = new IPushButton(
      id+WNDOFFSET_VySectionProperties_ModifyLabel, 
      iLabelButtons, 
      iLabelButtons, 
      IRectangle(), 
      IPushButton::defaultStyle() | IButton::noPointerFocus);
   iDeleteLabel = new IPushButton(
      id+WNDOFFSET_VySectionProperties_DeleteLabel, 
      iLabelButtons, 
      iLabelButtons, 
      IRectangle(), 
      IPushButton::defaultStyle() | IButton::noPointerFocus);
   iClose = new IPushButton(
      id+WNDOFFSET_VySectionProperties_Close, 
      iMultiCellCanvas, 
      iMultiCellCanvas, 
      IRectangle(), 
      IPushButton::defaultStyle() | IPushButton::defaultButton | IControl::tabStop | IControl::group);
   iSection = new IVBVariablePartPointer<VySection *>();
   iLabelFactory = new VySectionPropertiesLabelFactoryFactory();
   iKeywordPropertiesFactory = new VySectionPropertiesKeywordPropertiesFactoryFactory(id);
   iKeywordProperties = new IVBVariablePartPointer<VyKeywordProperties *>();
   iKeywordFactory = new VySectionPropertiesKeywordFactoryFactory();
   iLabelProperties = new IVBVariablePartPointer<VyLabelProperties *>();
   iLabelPropertiesFactory = new VySectionPropertiesLabelPropertiesFactoryFactory(id);
   iExceptionNotification = new ExceptionNotification();

   conn0 = new VySectionPropertiesConn0();
   conn1 = new VySectionPropertiesConn1();
   conn2 = new VySectionPropertiesConn2();
   conn3 = new VySectionPropertiesConn3();
   conn4 = new VySectionPropertiesConn4();
   conn5 = new VySectionPropertiesConn5();
   conn7 = new VySectionPropertiesConn7();
   conn8 = new VySectionPropertiesConn8();
   conn9 = new VySectionPropertiesConn9();
   conn10 = new VySectionPropertiesConn10();
   conn11 = new VySectionPropertiesConn11();
   conn12 = new VySectionPropertiesConn12();
   conn27 = new VySectionPropertiesConn27();
   conn14 = new VySectionPropertiesConn14();
   conn15 = new VySectionPropertiesConn15();
   conn16 = new VySectionPropertiesConn16();
   conn17 = new VySectionPropertiesConn17();
   conn18 = new VySectionPropertiesConn18();
   conn19 = new VySectionPropertiesConn19();
   conn20 = new VySectionPropertiesConn20();
   conn21 = new VySectionPropertiesConn21();
   conn24 = new VySectionPropertiesConn24();
   conn26 = new VySectionPropertiesConn26();
   conn29 = new VySectionPropertiesConn29();
   conn23 = new VySectionPropertiesConn23();
   conn31 = new VySectionPropertiesConn31();
   conn32 = new VySectionPropertiesConn32();
   conn33 = new VySectionPropertiesConn33();
   conn34 = new VySectionPropertiesConn34();
   conn35 = new VySectionPropertiesConn35();
   conn36 = new VySectionPropertiesConn36();
   conn37 = new VySectionPropertiesConn37();
   conn38 = new VySectionPropertiesConn38();
   conn39 = new VySectionPropertiesConn39();
   conn40 = new VySectionPropertiesConn40();
   conn41 = new VySectionPropertiesConn41();
   conn42 = new VySectionPropertiesConn42();
   conn43 = new VySectionPropertiesConn43();
   conn44 = new VySectionPropertiesConn44();
   conn45 = new VySectionPropertiesConn45();
   conn46 = new VySectionPropertiesConn46();

   this->enableLoaded(false);
   iMultiCellCanvas->addToCell(iTitle, 3, 2, 2, 1);
   iMultiCellCanvas->addToCell(iListed, 2, 3, 2, 1);
   iMultiCellCanvas->addToCell(iClose, 2, 7, 1, 1);
   iMultiCellCanvas->addToCell(iTitleLabel, 2, 2, 1, 1);
   iMultiCellCanvas->addToCell(iKeywordContainer, 2, 4, 2, 1);
   iMultiCellCanvas->addToCell(iLabelContainer, 2, 5, 2, 1);
   iMultiCellCanvas->addToCell(iKeywordButtons, 4, 4, 1, 1);
   iMultiCellCanvas->addToCell(iLabelButtons, 4, 5, 1, 1);
   iMultiCellCanvas->setColumnWidth(4, IMultiCellCanvas::defaultCell().width(), false);
   iMultiCellCanvas->setRowHeight(7, IMultiCellCanvas::defaultCell().height(), false);
   iTitleLabel->setText("~Title");
   iTitleLabel->setAlignment(IStaticText::centerLeft);
   iTitleLabel->setMinimumSize(ISize(89, 27));
   iTitle->setLimit(256);
   iTitle->setMinimumSize(ISize(357, 26));
   iListed->setText("List in table of ~contents");
   iKeywordContainer->showDetailsView();
   iKeywordContainer->setMinimumSize(ISize(351, 166));
   iKeywordContainer->showTitle(true);
   iKeywordContainer->setTitleAlignment(IContainerControl::left);
   iKeywordContainer->showTitleSeparator(true);
   iKeywordContainer->setTitle("Keywords");
   iKeywordContainer->addColumn(iKeywordName);
   iKeywordContainer->addColumn(iKeywordListed);
   iKeywordContainer->addColumn(iKeywordExternal);
   iKeywordName->setHeadingText("Name");
   iKeywordName->setDisplayWidth(0);
   iKeywordListed->setHeadingText("Index ");
   iKeywordListed->setDisplayWidth(0);
   iKeywordExternal->setHeadingText("Global");
   iKeywordExternal->setDisplayWidth(0);
   iKeywordButtons->setPad(ISize(8, 4));
   iKeywordButtons->setAlignment(ISetCanvas::bottomLeft);
   iKeywordButtons->setDeckOrientation(ISetCanvas::vertical);
   iKeywordButtons->setDeckCount(1);
   iKeywordButtons->setPackType(ISetCanvas::tight);
   iKeywordButtons->setMargin(ISize(8, 10));
   iAddKeyword->setText("~Add");
   iAddKeyword->setMinimumSize(ISize(78, 34));
   iModifyKeyword->setText("~Modify");
   iModifyKeyword->setMinimumSize(ISize(78, 34));
   iDeleteKeyword->setText("D~elete");
   iDeleteKeyword->setMinimumSize(ISize(78, 34));
   iLabelContainer->showDetailsView();
   iLabelContainer->setMinimumSize(ISize(329, 173));
   iLabelContainer->showTitle(true);
   iLabelContainer->setTitleAlignment(IContainerControl::left);
   iLabelContainer->showTitleSeparator(true);
   iLabelContainer->setTitle("Labels");
   iLabelContainer->addColumn(iLabelName);
   iLabelContainer->addColumn(iContainerColumn1);
   iLabelContainer->addColumn(iContainerColumn2);
   iLabelName->setHeadingText("Name");
   iLabelName->setDisplayWidth(0);
   iContainerColumn1->setHeadingText("Value");
   iContainerColumn1->setDisplayWidth(0);
   iContainerColumn2->setHeadingText("Global");
   iContainerColumn2->setDisplayWidth(0);
   iLabelButtons->setAlignment(ISetCanvas::bottomLeft);
   iLabelButtons->setDeckOrientation(ISetCanvas::vertical);
   iLabelButtons->setDeckCount(1);
   iLabelButtons->setPad(ISize(8, 4));
   iAddLabel->setText("A~dd");
   iAddLabel->setMinimumSize(ISize(78, 34));
   iModifyLabel->setText("M~odify");
   iModifyLabel->setMinimumSize(ISize(78, 34));
   iDeleteLabel->setText("De~lete");
   iDeleteLabel->setMinimumSize(ISize(78, 34));
   iClose->setText("Close");
   this->setFocus();
   this->setAutoDeleteObject(true);
   this->setClient(iMultiCellCanvas);
   construct();
}     //end constructor


//------------------------------------------------------------------------------
// VySectionProperties :: ~VySectionProperties
//------------------------------------------------------------------------------
#pragma export (VySectionProperties::~VySectionProperties())
VySectionProperties::~VySectionProperties()
{
   this->stopHandlingNotificationsFor(*iSection);
   conn0->stopHandlingNotificationsFor(*iSection);
   conn0->stopHandlingNotificationsFor(*iTitle);
   conn1->stopHandlingNotificationsFor(*iSection);
   conn1->stopHandlingNotificationsFor(*iListed);
   conn2->stopHandlingNotificationsFor(*iClose);
   conn3->stopHandlingNotificationsFor(*iSection);
   conn3->stopHandlingNotificationsFor(*iKeywordContainer);
   conn4->stopHandlingNotificationsFor(*iSection);
   conn4->stopHandlingNotificationsFor(*iLabelContainer);
   conn5->stopHandlingNotificationsFor(*iDeleteKeyword);
   conn7->stopHandlingNotificationsFor(*iModifyKeyword);
   conn8->stopHandlingNotificationsFor(*iKeywordPropertiesFactory);
   conn9->stopHandlingNotificationsFor(*iKeywordPropertiesFactory);
   conn10->stopHandlingNotificationsFor(*iKeywordContainer);
   conn10->stopHandlingNotificationsFor(*iKeywordProperties);
   conn11->stopHandlingNotificationsFor(*iAddKeyword);
   conn12->stopHandlingNotificationsFor(*iAddKeyword);
   conn27->stopHandlingNotificationsFor(*iAddKeyword);
   conn14->stopHandlingNotificationsFor(*iAddKeyword);
   conn15->stopHandlingNotificationsFor(*iKeywordContainer);
   conn16->stopHandlingNotificationsFor(*iLabelContainer);
   conn17->stopHandlingNotificationsFor(*iModifyLabel);
   conn18->stopHandlingNotificationsFor(*iLabelPropertiesFactory);
   conn19->stopHandlingNotificationsFor(*iLabelPropertiesFactory);
   conn20->stopHandlingNotificationsFor(*iAddLabel);
   conn21->stopHandlingNotificationsFor(*iAddLabel);
   conn24->stopHandlingNotificationsFor(*iDeleteLabel);
   conn26->stopHandlingNotificationsFor(*iLabelContainer);
   conn26->stopHandlingNotificationsFor(*iLabelProperties);
   conn29->stopHandlingNotificationsFor(*iAddLabel);
   conn23->stopHandlingNotificationsFor(*iAddLabel);
   conn31->stopHandlingNotificationsFor(*iSection);
   conn32->stopHandlingNotificationsFor(*conn31);
   conn32->stopHandlingNotificationsFor(*this);
   conn33->stopHandlingNotificationsFor(*this);
   conn34->stopHandlingNotificationsFor(*this);
   conn34->stopHandlingNotificationsFor(*iLabelProperties);
   conn35->stopHandlingNotificationsFor(*this);
   conn35->stopHandlingNotificationsFor(*iKeywordProperties);
   conn36->stopHandlingNotificationsFor(*this);
   conn36->stopHandlingNotificationsFor(*iExceptionNotification);
   conn37->stopHandlingNotificationsFor(*conn33);
   conn38->stopHandlingNotificationsFor(*conn19);
   conn39->stopHandlingNotificationsFor(*conn9);
   conn40->stopHandlingNotificationsFor(*conn12);
   conn41->stopHandlingNotificationsFor(*conn31);
   conn42->stopHandlingNotificationsFor(*conn5);
   conn43->stopHandlingNotificationsFor(*conn21);
   conn44->stopHandlingNotificationsFor(*conn24);
   conn45->stopHandlingNotificationsFor(*iLabelProperties);
   conn46->stopHandlingNotificationsFor(*iKeywordProperties);

   delete conn0;
   delete conn1;
   delete conn2;
   delete conn3;
   delete conn4;
   delete conn5;
   delete conn7;
   delete conn8;
   delete conn9;
   delete conn10;
   delete conn11;
   delete conn12;
   delete conn27;
   delete conn14;
   delete conn15;
   delete conn16;
   delete conn17;
   delete conn18;
   delete conn19;
   delete conn20;
   delete conn21;
   delete conn24;
   delete conn26;
   delete conn29;
   delete conn23;
   delete conn31;
   delete conn32;
   delete conn33;
   delete conn34;
   delete conn35;
   delete conn36;
   delete conn37;
   delete conn38;
   delete conn39;
   delete conn40;
   delete conn41;
   delete conn42;
   delete conn43;
   delete conn44;
   delete conn45;
   delete conn46;


   delete iMultiCellCanvas;
   delete iTitleLabel;
   delete iTitle;
   delete iListed;
   delete iKeywordContainer;
   delete iKeywordName;
   delete iKeywordListed;
   delete iKeywordExternal;
   delete iKeywordButtons;
   delete iAddKeyword;
   delete iModifyKeyword;
   delete iDeleteKeyword;
   delete iLabelContainer;
   delete iLabelName;
   delete iContainerColumn1;
   delete iContainerColumn2;
   delete iLabelButtons;
   delete iAddLabel;
   delete iModifyLabel;
   delete iDeleteLabel;
   delete iClose;
   delete iSection;
   delete iLabelFactory;
   delete iKeywordPropertiesFactory;
   delete iKeywordProperties;
   delete iKeywordFactory;
   delete iLabelProperties;
   delete iLabelPropertiesFactory;
   delete iExceptionNotification;
}

//------------------------------------------------------------------------------
// VySectionProperties :: initializePart
//------------------------------------------------------------------------------
#pragma export (VySectionProperties::initializePart())
VySectionProperties & VySectionProperties::initializePart()
{
   this->handleNotificationsFor(*iSection);
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// VySectionProperties :: makeConnections
//------------------------------------------------------------------------------
#pragma export (VySectionProperties::makeConnections())
Boolean VySectionProperties::makeConnections()
{
   this->enableNotification();
   iMultiCellCanvas->enableNotification();
   iTitleLabel->enableNotification();
   iTitle->enableNotification();
   iListed->enableNotification();
   iKeywordContainer->enableNotification();
   iKeywordButtons->enableNotification();
   iAddKeyword->enableNotification();
   iModifyKeyword->enableNotification();
   iDeleteKeyword->enableNotification();
   iLabelContainer->enableNotification();
   iLabelButtons->enableNotification();
   iAddLabel->enableNotification();
   iModifyLabel->enableNotification();
   iDeleteLabel->enableNotification();
   iClose->enableNotification();
   iSection->enableNotification();
   iLabelFactory->enableNotification();
   iKeywordPropertiesFactory->enableNotification();
   iKeywordProperties->enableNotification();
   iKeywordFactory->enableNotification();
   iLabelProperties->enableNotification();
   iLabelPropertiesFactory->enableNotification();
   iExceptionNotification->enableNotification();

   unsigned long id = this->id();
   conn0->initialize(iSection, iTitle);
   conn0->handleNotificationsFor(*iSection);
   conn0->handleNotificationsFor(*iTitle);
   conn1->initialize(iSection, iListed);
   conn1->handleNotificationsFor(*iSection);
   conn1->handleNotificationsFor(*iListed);
   conn2->initialize(iClose, this);
   conn2->handleNotificationsFor(*iClose);
   conn3->initialize(iSection, iKeywordContainer);
   conn3->handleNotificationsFor(*iSection);
   conn3->handleNotificationsFor(*iKeywordContainer);
   conn4->initialize(iSection, iLabelContainer);
   conn4->handleNotificationsFor(*iSection);
   conn4->handleNotificationsFor(*iLabelContainer);
   conn5->initialize(iDeleteKeyword, iSection);
   conn5->handleNotificationsFor(*iDeleteKeyword);
   conn5->setIPosition(iKeywordContainer);
   conn7->initialize(iModifyKeyword, iKeywordPropertiesFactory);
   conn7->handleNotificationsFor(*iModifyKeyword);
   conn8->initialize(iKeywordPropertiesFactory, iKeywordProperties);
   conn8->handleNotificationsFor(*iKeywordPropertiesFactory);
   conn9->initialize(iKeywordPropertiesFactory, iKeywordProperties);
   conn9->handleNotificationsFor(*iKeywordPropertiesFactory);
   conn10->initialize(iKeywordContainer, iKeywordProperties);
   conn10->handleNotificationsFor(*iKeywordContainer);
   conn10->handleNotificationsFor(*iKeywordProperties);
   conn11->initialize(iAddKeyword, iKeywordFactory);
   conn11->handleNotificationsFor(*iAddKeyword);
   conn12->initialize(iAddKeyword, iSection);
   conn12->handleNotificationsFor(*iAddKeyword);
   conn12->setKeyword(conn11);
   conn27->initialize(iAddKeyword, iKeywordContainer);
   conn27->handleNotificationsFor(*iAddKeyword);
   conn14->initialize(iAddKeyword, iKeywordPropertiesFactory);
   conn14->handleNotificationsFor(*iAddKeyword);
   conn15->initialize(iKeywordContainer, iKeywordPropertiesFactory);
   conn15->handleNotificationsFor(*iKeywordContainer);
   conn16->initialize(iLabelContainer, iLabelPropertiesFactory);
   conn16->handleNotificationsFor(*iLabelContainer);
   conn17->initialize(iModifyLabel, iLabelPropertiesFactory);
   conn17->handleNotificationsFor(*iModifyLabel);
   conn18->initialize(iLabelPropertiesFactory, iLabelProperties);
   conn18->handleNotificationsFor(*iLabelPropertiesFactory);
   conn19->initialize(iLabelPropertiesFactory, iLabelProperties);
   conn19->handleNotificationsFor(*iLabelPropertiesFactory);
   conn20->initialize(iAddLabel, iLabelFactory);
   conn20->handleNotificationsFor(*iAddLabel);
   conn21->initialize(iAddLabel, iSection);
   conn21->handleNotificationsFor(*iAddLabel);
   conn21->setLabel(conn20);
   conn24->initialize(iDeleteLabel, iSection);
   conn24->handleNotificationsFor(*iDeleteLabel);
   conn24->setIPosition(iLabelContainer);
   conn26->initialize(iLabelContainer, iLabelProperties);
   conn26->handleNotificationsFor(*iLabelContainer);
   conn26->handleNotificationsFor(*iLabelProperties);
   conn27->setCollectionPosition(iKeywordContainer);
   conn29->initialize(iAddLabel, iLabelContainer);
   conn29->handleNotificationsFor(*iAddLabel);
   conn23->initialize(iAddLabel, iLabelPropertiesFactory);
   conn23->handleNotificationsFor(*iAddLabel);
   conn29->setCollectionPosition(iLabelContainer);
   conn31->initialize(iSection, iSection);
   conn31->handleNotificationsFor(*iSection);
   conn32->initialize(conn31, this);
   conn32->handleNotificationsFor(*conn31);
   conn32->handleNotificationsFor(*this);
   conn33->initialize(this, this);
   conn33->handleNotificationsFor(*this);
   conn34->initialize(this, iLabelProperties);
   conn34->handleNotificationsFor(*this);
   conn34->handleNotificationsFor(*iLabelProperties);
   conn35->initialize(this, iKeywordProperties);
   conn35->handleNotificationsFor(*this);
   conn35->handleNotificationsFor(*iKeywordProperties);
   conn36->initialize(this, iExceptionNotification);
   conn36->handleNotificationsFor(*this);
   conn36->handleNotificationsFor(*iExceptionNotification);
   conn37->initialize(conn33, iExceptionNotification);
   conn37->handleNotificationsFor(*conn33);
   conn38->initialize(conn19, iExceptionNotification);
   conn38->handleNotificationsFor(*conn19);
   conn39->initialize(conn9, iExceptionNotification);
   conn39->handleNotificationsFor(*conn9);
   conn40->initialize(conn12, iExceptionNotification);
   conn40->handleNotificationsFor(*conn12);
   conn41->initialize(conn31, iExceptionNotification);
   conn41->handleNotificationsFor(*conn31);
   conn42->initialize(conn5, iExceptionNotification);
   conn42->handleNotificationsFor(*conn5);
   conn43->initialize(conn21, iExceptionNotification);
   conn43->handleNotificationsFor(*conn21);
   conn44->initialize(conn24, iExceptionNotification);
   conn44->handleNotificationsFor(*conn24);
   conn45->initialize(iLabelProperties, iSection);
   conn45->handleNotificationsFor(*iLabelProperties);
   conn46->initialize(iKeywordProperties, iSection);
   conn46->handleNotificationsFor(*iKeywordProperties);

   conn0->setTarget();
   conn1->setTarget();
   conn3->setTarget();
   conn4->setTarget();
   conn10->setTarget();
   conn26->setTarget();
   conn34->setTarget();
   conn35->setTarget();
   conn36->setTarget();
   return true;
}


//------------------------------------------------------------------------------
// VySectionProperties :: dispatchNotificationEvent
//------------------------------------------------------------------------------
#pragma export (VySectionProperties::dispatchNotificationEvent(const INotificationEvent &))
IObserver & VySectionProperties::dispatchNotificationEvent(const INotificationEvent & anEvent)
{
   if ((anEvent.notificationId() == IVBVariablePartPointer<VySection *>::targetId) && (iSection == &anEvent.notifier()))
       notifyObservers(INotificationEvent(section, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   return *this;
}



#include "VySectionProperties.cpv"
