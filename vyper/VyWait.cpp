/*******************************************************************************
* FILE NAME: VyWait.cpp                                                        *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     VyWait- Progress and status indicator                                    *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _ISETCV_
#include <isetcv.hpp>
#endif

#ifndef _IFONT_
#include <ifont.hpp>
#endif

#ifndef _ICOLOR_
#include <icolor.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _VYWAIT_
#include "VyWait.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for VyWaitConn0
//*****************************************************************************
class VyWaitConn0 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyWaitConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : OK(buttonClickEvent) to FrameWindow(close))");
         try {target->close();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IFrameWindow * target;


};   //VyWaitConn0


#pragma export (VyWait::readyId)
const INotificationId VyWait::readyId = "VyWait::readyId";

#pragma export (VyWait::taskText)
const INotificationId VyWait::taskText = "VyWait::taskText";

#pragma export (VyWait::statusText)
const INotificationId VyWait::statusText = "VyWait::statusText";

#pragma export (VyWait::progressIndicatorArmTickOffset)
const INotificationId VyWait::progressIndicatorArmTickOffset = "VyWait::progressIndicatorArmTickOffset";

#pragma export (VyWait::oKEnabled)
const INotificationId VyWait::oKEnabled = "VyWait::oKEnabled";

//------------------------------------------------------------------------------
// VyWait :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (VyWait::defaultFramingSpec())
const IRectangle VyWait::defaultFramingSpec()
{
   return(IRectangle(IPoint(30, IWindow::desktopWindow()->size().height() - 30 - 364),ISize(746, 364)));
}


//------------------------------------------------------------------------------
// VyWait :: defaultStyle
//------------------------------------------------------------------------------
#pragma export (VyWait::defaultStyle())
const IFrameWindow::Style VyWait::defaultStyle()
{
   return(IFrameWindow::defaultStyle() & ~IFrameWindow::hideButton & ~IFrameWindow::maximizeButton & ~IFrameWindow::minimizeButton & ~IFrameWindow::systemMenu & ~IFrameWindow::windowList | IFrameWindow::dialogBorder);
}


//------------------------------------------------------------------------------
// VyWait :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (VyWait::defaultTitle())
IString VyWait::defaultTitle()
{
   return("Working...");
}


//------------------------------------------------------------------------------
// VyWait :: VyWait
//------------------------------------------------------------------------------
#pragma export (VyWait::VyWait(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
VyWait::VyWait(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   iSetCanvas1 = new ISetCanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iTask = new IStaticText(
      id+WNDOFFSET_VyWait_Task, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle());
   iStatus = new IStaticText(
      id+WNDOFFSET_VyWait_Status, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle());
   iProgressIndicator = new IProgressIndicator(
      id+WNDOFFSET_VyWait_ProgressIndicator, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle(), 
      101, 
      0, 
      IProgressIndicator::defaultStyle() | IProgressIndicator::horizontal | IProgressIndicator::snapToTickMark | IProgressIndicator::ribbonStrip);
   iErrorList = new IMultiLineEdit(
      id+WNDOFFSET_VyWait_ErrorList, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle(), 
      IMultiLineEdit::defaultStyle() & ~IMultiLineEdit::wordWrap | IMultiLineEdit::readOnly | IMultiLineEdit::ignoreTab);
   iOK = new IPushButton(
      id+WNDOFFSET_VyWait_OK, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle(), 
      IPushButton::defaultStyle() | IPushButton::defaultButton | IControl::group | IControl::tabStop);

   conn0 = new VyWaitConn0();

   iSetCanvas1->setAlignment(ISetCanvas::centerCenter);
   iSetCanvas1->setDeckCount(5);
   iSetCanvas1->setPackType(ISetCanvas::even);
   iTask->setAlignment(IStaticText::centerCenter);
   iTask->setFont(IFont("System Proportional", 10).setBold(true).setItalic(false).setUnderscore(false).setStrikeout(false).setOutline(false));
   iTask->setText("VyperHelp");
   iStatus->setAlignment(IStaticText::centerCenter);
   iStatus->setText("Initializing");
   iProgressIndicator->setBackgroundColor(IColor(IColor::white));
   iProgressIndicator->setMinimumSize(ISize(694, 89));
   iProgressIndicator->moveArmToTick(0);
   iErrorList->setFont(IFont("System VIO", 10, true).setBold(false).setItalic(false).setUnderscore(false).setStrikeout(false).setOutline(false));
   iErrorList->setMinimumSize(ISize(721, 100));
   iOK->setText("OK");
   iOK->enable(true);
   this->setFocus();
   this->setClient(iSetCanvas1);
   this->setAutoDeleteObject(true);
   construct();
}     //end constructor


//------------------------------------------------------------------------------
// VyWait :: ~VyWait
//------------------------------------------------------------------------------
#pragma export (VyWait::~VyWait())
VyWait::~VyWait()
{
   destruct();
   this->stopHandlingNotificationsFor(*iTask);
   this->stopHandlingNotificationsFor(*iStatus);
   this->stopHandlingNotificationsFor(*iProgressIndicator);
   this->stopHandlingNotificationsFor(*iOK);
   conn0->stopHandlingNotificationsFor(*iOK);

   delete conn0;


   delete iSetCanvas1;
   delete iTask;
   delete iStatus;
   delete iProgressIndicator;
   delete iErrorList;
   delete iOK;
}

//------------------------------------------------------------------------------
// VyWait :: initializePart
//------------------------------------------------------------------------------
#pragma export (VyWait::initializePart())
VyWait & VyWait::initializePart()
{
   this->handleNotificationsFor(*iTask);
   this->handleNotificationsFor(*iStatus);
   this->handleNotificationsFor(*iProgressIndicator);
   this->handleNotificationsFor(*iOK);
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// VyWait :: makeConnections
//------------------------------------------------------------------------------
#pragma export (VyWait::makeConnections())
Boolean VyWait::makeConnections()
{
   this->enableNotification();
   iSetCanvas1->enableNotification();
   iTask->enableNotification();
   iStatus->enableNotification();
   iProgressIndicator->enableNotification();
   iErrorList->enableNotification();
   iOK->enableNotification();

   unsigned long id = this->id();
   conn0->initialize(iOK, this);
   conn0->handleNotificationsFor(*iOK);

   return true;
}


//------------------------------------------------------------------------------
// VyWait :: dispatchNotificationEvent
//------------------------------------------------------------------------------
#pragma export (VyWait::dispatchNotificationEvent(const INotificationEvent &))
IObserver & VyWait::dispatchNotificationEvent(const INotificationEvent & anEvent)
{
   if ((anEvent.notificationId() == IStaticText::textId) && (iTask == &anEvent.notifier()))
       notifyObservers(INotificationEvent(taskText, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   else
   if ((anEvent.notificationId() == IStaticText::textId) && (iStatus == &anEvent.notifier()))
       notifyObservers(INotificationEvent(statusText, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   else
   if ((anEvent.notificationId() == IProgressIndicator::armChangeId) && (iProgressIndicator == &anEvent.notifier()))
       notifyObservers(INotificationEvent(progressIndicatorArmTickOffset, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   else
   if ((anEvent.notificationId() == IPushButton::enableId) && (iOK == &anEvent.notifier()))
       notifyObservers(INotificationEvent(oKEnabled, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   return *this;
}







#include "VyWait.cpv"
