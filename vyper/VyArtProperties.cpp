/*******************************************************************************
* FILE NAME: VyArtProperties.cpp                                               *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     VyArtProperties- Dialog to select art                                    *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _IMCELCV_
#include <imcelcv.hpp>
#endif

#ifndef _ILISTCVW_
#include <ilistcvw.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _IPUSHBUT_
#include <ipushbut.hpp>
#endif

#ifndef _IBMPCTL_
#include <ibmpctl.hpp>
#endif

#ifndef _VYDOC_
#include "VyDoc.hpp"
#endif

#ifndef _VYART_
#include "VyArt.hpp"
#endif

#ifndef _EXCEPTIONNOTIFICATION_
#include "ExceptionNotification.hpp"
#endif

#ifndef _IVBFILED_
#include <ivbfiled.hpp>
#endif

#ifndef _VYSETTINGS_
#include "VySettings.hpp"
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _VYARTPROPERTIES_
#include "VyArtProperties.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for VyArtPropertiesConn0
//*****************************************************************************
class VyArtPropertiesConn0 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyArtPropertiesConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Close(buttonClickEvent) to FrameWindow(close))");
         try {target->close();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IFrameWindow * target;


};   //VyArtPropertiesConn0


//*****************************************************************************
// Class definition for VyArtPropertiesConn2
//*****************************************************************************
class VyArtPropertiesConn2 : public IObserver {
public:
   virtual  ~VyArtPropertiesConn2(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyDoc *> * aSource, ICollectionViewListBox< VyArt*, IVSequence< VyArt* > > * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Document(arts) to ArtList(items))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItems(source->target()->getArts());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::arts) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == ICollectionViewListBox< VyArt*, IVSequence< VyArt* > >::itemsId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyDoc *> * source;
   ICollectionViewListBox< VyArt*, IVSequence< VyArt* > > * target;
   Boolean aligning;


};   //VyArtPropertiesConn2


//*****************************************************************************
// Class definition for VyArtPropertiesConn3
//*****************************************************************************
class VyArtPropertiesConn3 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyArtPropertiesConn3(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Add(buttonClickEvent) to FileDialog(showModally))");
         try {target->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IVBFileDialog * target;


};   //VyArtPropertiesConn3


//*****************************************************************************
// Class definition for VyArtPropertiesConn4
//*****************************************************************************
class VyArtPropertiesConn4 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyArtPropertiesConn4(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, VyArtProperties * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Delete(buttonClickEvent) to (deleteArt))");
         try {target->deleteArt();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   VyArtProperties * target;


};   //VyArtPropertiesConn4

const INotificationId VyArtPropertiesConn4::exceptionId = "VyArtPropertiesConn4::exceptionId";

//*****************************************************************************
// Class definition for VyArtPropertiesConn22
//*****************************************************************************
class VyArtPropertiesConn22 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyArtPropertiesConn22(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(ICollectionViewListBox< VyArt*, IVSequence< VyArt* > > * aSource, VyArtProperties * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == ICollectionViewListBox< VyArt*, IVSequence< VyArt* > >::selectId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ArtList(selectedElement) to (setPreview))");
         try {target->setPreview();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   ICollectionViewListBox< VyArt*, IVSequence< VyArt* > > * source;
   VyArtProperties * target;


};   //VyArtPropertiesConn22


//*****************************************************************************
// Class definition for VyArtPropertiesConn5
//*****************************************************************************
class VyArtPropertiesConn5 : public IObserver {
public:
   virtual  ~VyArtPropertiesConn5(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(ICollectionViewListBox< VyArt*, IVSequence< VyArt* > > * aSource, IVBVariablePartPointer<VyArt *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (!target) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ArtList(selectedElement) to Art(this))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setTarget(source->selectedElement());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == ICollectionViewListBox< VyArt*, IVSequence< VyArt* > >::selectId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBVariablePartPointer<VyArt *>::targetId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   ICollectionViewListBox< VyArt*, IVSequence< VyArt* > > * source;
   IVBVariablePartPointer<VyArt *> * target;
   Boolean aligning;


};   //VyArtPropertiesConn5


//*****************************************************************************
// Class definition for VyArtPropertiesConn6
//*****************************************************************************
class VyArtPropertiesConn6 : public IObserver {
public:
   virtual  ~VyArtPropertiesConn6(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FrameWindow(this) to ExceptionNotification(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == ExceptionNotification::ownerId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   ExceptionNotification * target;
   Boolean aligning;


};   //VyArtPropertiesConn6


//*****************************************************************************
// Class definition for VyArtPropertiesConn8
//*****************************************************************************
class VyArtPropertiesConn8 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyArtPropertiesConn8(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyArtPropertiesConn4 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyArtPropertiesConn4::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn4(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyArtPropertiesConn4 * source;
   ExceptionNotification * target;


};   //VyArtPropertiesConn8


//*****************************************************************************
// Class definition for VyArtPropertiesConn13
//*****************************************************************************
class VyArtPropertiesConn13 : public IObserver {
public:
   virtual  ~VyArtPropertiesConn13(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VySettings *> * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(graphicMask) to FileDialog(fileName))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->target()->setGraphicMask(target->fileName());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Settings(graphicMask) to FileDialog(fileName))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFileName(source->target()->graphicMask());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VySettings::graphicMaskId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBFileDialog::pressedOkId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VySettings *> * source;
   IVBFileDialog * target;
   Boolean aligning;


};   //VyArtPropertiesConn13


//*****************************************************************************
// Class definition for VyArtPropertiesConn18
//*****************************************************************************
class VyArtPropertiesConn18 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyArtPropertiesConn18(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, VyArtProperties * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyArtPropertiesConn18 & setFilename(IVBFileDialog * aSelf) {iFilename = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FileDialog(pressedOkEvent) to (addArt))");
         try {target->addArt(iFilename->fileName());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   VyArtProperties * target;
   IVBFileDialog * iFilename;


};   //VyArtPropertiesConn18

const INotificationId VyArtPropertiesConn18::exceptionId = "VyArtPropertiesConn18::exceptionId";

//*****************************************************************************
// Class definition for VyArtPropertiesConn10
//*****************************************************************************
class VyArtPropertiesConn10 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyArtPropertiesConn10(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyArtPropertiesConn18 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyArtPropertiesConn18::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn18(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyArtPropertiesConn18 * source;
   ExceptionNotification * target;


};   //VyArtPropertiesConn10


//*****************************************************************************
// Class definition for VyArtPropertiesConn11
//*****************************************************************************
class VyArtPropertiesConn11 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyArtPropertiesConn11(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, VyArtProperties * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::closeId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FrameWindow(closeEvent) to (finish))");
         try {target->finish();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   VyArtProperties * target;


};   //VyArtPropertiesConn11

const INotificationId VyArtPropertiesConn11::exceptionId = "VyArtPropertiesConn11::exceptionId";

//*****************************************************************************
// Class definition for VyArtPropertiesConn12
//*****************************************************************************
class VyArtPropertiesConn12 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyArtPropertiesConn12(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyArtPropertiesConn11 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyArtPropertiesConn11::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn11(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyArtPropertiesConn11 * source;
   ExceptionNotification * target;


};   //VyArtPropertiesConn12


//*****************************************************************************
// Class definition for VyArtPropertiesConn15
//*****************************************************************************
class VyArtPropertiesConn15 : public IObserver {
public:
   virtual  ~VyArtPropertiesConn15(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyDoc *> * aSource, IVBVariablePartPointer<VySettings *> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (!source->target()) return;
      if (!target) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Document(settings) to Settings(this))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->target()->setSettings(target->target());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (!source->target()) return;
      if (!target) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Document(settings) to Settings(this))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setTarget(source->target()->settings());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (!target) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::settingsId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBVariablePartPointer<VySettings *>::targetId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyDoc *> * source;
   IVBVariablePartPointer<VySettings *> * target;
   Boolean aligning;


};   //VyArtPropertiesConn15


#pragma export (VyArtProperties::readyId)
const INotificationId VyArtProperties::readyId = "VyArtProperties::readyId";

#pragma export (VyArtProperties::document)
const INotificationId VyArtProperties::document = "VyArtProperties::document";

#pragma export (VyArtProperties::artName)
const INotificationId VyArtProperties::artName = "VyArtProperties::artName";

//------------------------------------------------------------------------------
// VyArtProperties :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (VyArtProperties::defaultFramingSpec())
const IRectangle VyArtProperties::defaultFramingSpec()
{
   return(IRectangle(IPoint(148, IWindow::desktopWindow()->size().height() - 35 - 351),ISize(454, 351)));
}


//------------------------------------------------------------------------------
// VyArtProperties :: defaultStyle
//------------------------------------------------------------------------------
#pragma export (VyArtProperties::defaultStyle())
const IFrameWindow::Style VyArtProperties::defaultStyle()
{
   return(IFrameWindow::defaultStyle() & ~IFrameWindow::hideButton & ~IFrameWindow::maximizeButton & ~IFrameWindow::minimizeButton & ~IFrameWindow::sizingBorder & ~IFrameWindow::windowList | IFrameWindow::dialogBorder);
}


//------------------------------------------------------------------------------
// VyArtProperties :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (VyArtProperties::defaultTitle())
IString VyArtProperties::defaultTitle()
{
   return("Select art");
}


//------------------------------------------------------------------------------
// VyArtProperties :: VyArtProperties
//------------------------------------------------------------------------------
#pragma export (VyArtProperties::VyArtProperties(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
VyArtProperties::VyArtProperties(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   iMultiCellCanvas1 = new IMultiCellCanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iArtList = new ICollectionViewListBox< VyArt*, IVSequence< VyArt* > >(
      id+WNDOFFSET_VyArtProperties_ArtList, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle ( ), 
      IBaseListBox::defaultStyle() | IControl::tabStop);
   iAdd = new IPushButton(
      id+WNDOFFSET_VyArtProperties_Add, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IPushButton::defaultStyle() | IControl::tabStop);
   iDelete = new IPushButton(
      id+WNDOFFSET_VyArtProperties_Delete, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IPushButton::defaultStyle() | IControl::tabStop);
   iPreview = new IBitmapControl(
      id+WNDOFFSET_VyArtProperties_Preview, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IBitmapHandle ( ), 
      IRectangle ( ), 
      IBitmapControl::defaultStyle() & ~IBitmapControl::sizeToBitmap);
   iClose = new IPushButton(
      id+WNDOFFSET_VyArtProperties_Close, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IPushButton::defaultStyle() | IPushButton::defaultButton | IControl::tabStop);
   iDocument = new IVBVariablePartPointer<VyDoc *>();
   iArt = new IVBVariablePartPointer<VyArt *>();
   iExceptionNotification = new ExceptionNotification();
   iFileDialog = new IVBFileDialog(this);
   iSettings = new IVBVariablePartPointer<VySettings *>();

   conn0 = new VyArtPropertiesConn0();
   conn2 = new VyArtPropertiesConn2();
   conn3 = new VyArtPropertiesConn3();
   conn4 = new VyArtPropertiesConn4();
   conn22 = new VyArtPropertiesConn22();
   conn5 = new VyArtPropertiesConn5();
   conn6 = new VyArtPropertiesConn6();
   conn8 = new VyArtPropertiesConn8();
   conn13 = new VyArtPropertiesConn13();
   conn18 = new VyArtPropertiesConn18();
   conn10 = new VyArtPropertiesConn10();
   conn11 = new VyArtPropertiesConn11();
   conn12 = new VyArtPropertiesConn12();
   conn15 = new VyArtPropertiesConn15();

   iMultiCellCanvas1->addToCell(iArtList, 2, 2, 2, 5);
   iMultiCellCanvas1->addToCell(iClose, 2, 8, 1, 1);
   iMultiCellCanvas1->addToCell(iAdd, 5, 2, 1, 1);
   iMultiCellCanvas1->addToCell(iDelete, 5, 4, 1, 1);
   iMultiCellCanvas1->addToCell(iPreview, 5, 6, 1, 1);
   iMultiCellCanvas1->setColumnWidth(3, 100, false);
   iMultiCellCanvas1->setColumnWidth(5, IMultiCellCanvas::defaultCell().width(), false);
   iMultiCellCanvas1->setRowHeight(8, IMultiCellCanvas::defaultCell().height(), false);
   iArtList->setMinimumSize(ISize(222, 258));
   iAdd->setText("~Add...");
   iDelete->setText("~Delete");
   iPreview->setAlignment(IStaticText::centerCenter);
   iPreview->setMinimumSize(ISize(183, 170));
   iClose->setText("Close");
   iClose->setMinimumSize(ISize(112, 36));
   this->setFocus();
   this->setAutoDeleteObject(true);
   this->setClient(iMultiCellCanvas1);
   iFileDialog->setFileName("*.bmp;*.gif;*.pcx;*.tif;*.tga;*.iff;*.xbm;*.pse");
   iFileDialog->setTitle("Open bitmap file");
   construct();
}     //end constructor


//------------------------------------------------------------------------------
// VyArtProperties :: ~VyArtProperties
//------------------------------------------------------------------------------
#pragma export (VyArtProperties::~VyArtProperties())
VyArtProperties::~VyArtProperties()
{
   this->stopHandlingNotificationsFor(*iDocument);
   this->stopHandlingNotificationsFor(*iArt);
   conn0->stopHandlingNotificationsFor(*iClose);
   conn2->stopHandlingNotificationsFor(*iDocument);
   conn2->stopHandlingNotificationsFor(*iArtList);
   conn3->stopHandlingNotificationsFor(*iAdd);
   conn4->stopHandlingNotificationsFor(*iDelete);
   conn22->stopHandlingNotificationsFor(*iArtList);
   conn5->stopHandlingNotificationsFor(*iArtList);
   conn5->stopHandlingNotificationsFor(*iArt);
   conn6->stopHandlingNotificationsFor(*this);
   conn6->stopHandlingNotificationsFor(*iExceptionNotification);
   conn8->stopHandlingNotificationsFor(*conn4);
   conn13->stopHandlingNotificationsFor(*iSettings);
   conn13->stopHandlingNotificationsFor(*iFileDialog);
   conn18->stopHandlingNotificationsFor(*iFileDialog);
   conn10->stopHandlingNotificationsFor(*conn18);
   conn11->stopHandlingNotificationsFor(*this);
   conn12->stopHandlingNotificationsFor(*conn11);
   conn15->stopHandlingNotificationsFor(*iDocument);
   conn15->stopHandlingNotificationsFor(*iSettings);

   delete conn0;
   delete conn2;
   delete conn3;
   delete conn4;
   delete conn22;
   delete conn5;
   delete conn6;
   delete conn8;
   delete conn13;
   delete conn18;
   delete conn10;
   delete conn11;
   delete conn12;
   delete conn15;


   delete iMultiCellCanvas1;
   delete iArtList;
   delete iAdd;
   delete iDelete;
   delete iPreview;
   delete iClose;
   delete iDocument;
   delete iArt;
   delete iExceptionNotification;
   delete iFileDialog;
   delete iSettings;
}

//------------------------------------------------------------------------------
// VyArtProperties :: initializePart
//------------------------------------------------------------------------------
#pragma export (VyArtProperties::initializePart())
VyArtProperties & VyArtProperties::initializePart()
{
   this->handleNotificationsFor(*iDocument);
   this->handleNotificationsFor(*iArt);
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// VyArtProperties :: makeConnections
//------------------------------------------------------------------------------
#pragma export (VyArtProperties::makeConnections())
Boolean VyArtProperties::makeConnections()
{
   this->enableNotification();
   iMultiCellCanvas1->enableNotification();
   iArtList->enableNotification();
   iAdd->enableNotification();
   iDelete->enableNotification();
   iPreview->enableNotification();
   iClose->enableNotification();
   iDocument->enableNotification();
   iArt->enableNotification();
   iExceptionNotification->enableNotification();
   iFileDialog->enableNotification();
   iSettings->enableNotification();

   unsigned long id = this->id();
   conn0->initialize(iClose, this);
   conn0->handleNotificationsFor(*iClose);
   conn2->initialize(iDocument, iArtList);
   conn2->handleNotificationsFor(*iDocument);
   conn2->handleNotificationsFor(*iArtList);
   conn3->initialize(iAdd, iFileDialog);
   conn3->handleNotificationsFor(*iAdd);
   conn4->initialize(iDelete, this);
   conn4->handleNotificationsFor(*iDelete);
   conn22->initialize(iArtList, this);
   conn22->handleNotificationsFor(*iArtList);
   conn5->initialize(iArtList, iArt);
   conn5->handleNotificationsFor(*iArtList);
   conn5->handleNotificationsFor(*iArt);
   conn6->initialize(this, iExceptionNotification);
   conn6->handleNotificationsFor(*this);
   conn6->handleNotificationsFor(*iExceptionNotification);
   conn8->initialize(conn4, iExceptionNotification);
   conn8->handleNotificationsFor(*conn4);
   conn13->initialize(iSettings, iFileDialog);
   conn13->handleNotificationsFor(*iSettings);
   conn13->handleNotificationsFor(*iFileDialog);
   conn18->initialize(iFileDialog, this);
   conn18->handleNotificationsFor(*iFileDialog);
   conn18->setFilename(iFileDialog);
   conn10->initialize(conn18, iExceptionNotification);
   conn10->handleNotificationsFor(*conn18);
   conn11->initialize(this, this);
   conn11->handleNotificationsFor(*this);
   conn12->initialize(conn11, iExceptionNotification);
   conn12->handleNotificationsFor(*conn11);
   conn15->initialize(iDocument, iSettings);
   conn15->handleNotificationsFor(*iDocument);
   conn15->handleNotificationsFor(*iSettings);

   conn2->setTarget();
   conn5->setTarget();
   conn6->setTarget();
   conn13->setTarget();
   conn15->setTarget();
   return true;
}


//------------------------------------------------------------------------------
// VyArtProperties :: dispatchNotificationEvent
//------------------------------------------------------------------------------
#pragma export (VyArtProperties::dispatchNotificationEvent(const INotificationEvent &))
IObserver & VyArtProperties::dispatchNotificationEvent(const INotificationEvent & anEvent)
{
   if ((anEvent.notificationId() == IVBVariablePartPointer<VyDoc *>::targetId) && (iDocument == &anEvent.notifier()))
       notifyObservers(INotificationEvent(document, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   else
   if ((anEvent.notificationId() == VyArt::nameId) && (iArt->target() == &anEvent.notifier()))
       notifyObservers(INotificationEvent(artName, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   return *this;
}




#include "VyArtProperties.cpv"
