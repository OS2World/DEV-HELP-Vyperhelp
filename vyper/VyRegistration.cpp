/*******************************************************************************
* FILE NAME: VyRegistration.cpp                                                *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     VyRegistration- Registration dialog                                      *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _IMCELCV_
#include <imcelcv.hpp>
#endif

#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _IENTRYFD_
#include <ientryfd.hpp>
#endif

#ifndef _IPUSHBUT_
#include <ipushbut.hpp>
#endif

#ifndef _EXCEPTIONNOTIFICATION_
#include "ExceptionNotification.hpp"
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _VYREGISTRATION_
#include "VyRegistration.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for VyRegistrationConn0
//*****************************************************************************
class VyRegistrationConn0 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyRegistrationConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Cancel(buttonClickEvent) to FrameWindow(close))");
         try {target->close();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IFrameWindow * target;


};   //VyRegistrationConn0


//*****************************************************************************
// Class definition for VyRegistrationConn1
//*****************************************************************************
class VyRegistrationConn1 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyRegistrationConn1(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, VyRegistration * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyRegistrationConn1 & setUserName(IEntryField * aSelf) {iUserName = aSelf; return *this;};
   VyRegistrationConn1 & setKeyName(IEntryField * aSelf) {iKeyName = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Register(buttonClickEvent) to (registerIt))");
         try {target->registerIt(iUserName->text(), iKeyName->text());}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   VyRegistration * target;
   IEntryField * iUserName;
   IEntryField * iKeyName;


};   //VyRegistrationConn1

const INotificationId VyRegistrationConn1::exceptionId = "VyRegistrationConn1::exceptionId";

//*****************************************************************************
// Class definition for VyRegistrationConn4
//*****************************************************************************
class VyRegistrationConn4 : public IObserver {
public:
   virtual  ~VyRegistrationConn4(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FrameWindow(this) to ExceptionNotification(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == ExceptionNotification::ownerId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   ExceptionNotification * target;
   Boolean aligning;


};   //VyRegistrationConn4


//*****************************************************************************
// Class definition for VyRegistrationConn5
//*****************************************************************************
class VyRegistrationConn5 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyRegistrationConn5(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyRegistrationConn1 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyRegistrationConn1::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn1(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyRegistrationConn1 * source;
   ExceptionNotification * target;


};   //VyRegistrationConn5


#pragma export (VyRegistration::readyId)
const INotificationId VyRegistration::readyId = "VyRegistration::readyId";

//------------------------------------------------------------------------------
// VyRegistration :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (VyRegistration::defaultFramingSpec())
const IRectangle VyRegistration::defaultFramingSpec()
{
   return(IRectangle(IPoint(17, IWindow::desktopWindow()->size().height() - 49 - 193),ISize(437, 193)));
}


//------------------------------------------------------------------------------
// VyRegistration :: defaultStyle
//------------------------------------------------------------------------------
#pragma export (VyRegistration::defaultStyle())
const IFrameWindow::Style VyRegistration::defaultStyle()
{
   return(IFrameWindow::defaultStyle() & ~IFrameWindow::hideButton & ~IFrameWindow::maximizeButton & ~IFrameWindow::minimizeButton & ~IFrameWindow::sizingBorder & ~IFrameWindow::windowList | IFrameWindow::dialogBorder);
}


//------------------------------------------------------------------------------
// VyRegistration :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (VyRegistration::defaultTitle())
IString VyRegistration::defaultTitle()
{
   return("Registration");
}


//------------------------------------------------------------------------------
// VyRegistration :: VyRegistration
//------------------------------------------------------------------------------
#pragma export (VyRegistration::VyRegistration(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
VyRegistration::VyRegistration(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   iMultiCellCanvas1 = new IMultiCellCanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iUserLabel = new IStaticText(
      id+WNDOFFSET_VyRegistration_UserLabel, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IStaticText::defaultStyle() | IStaticText::mnemonic);
   iUser = new IEntryField(
      id+WNDOFFSET_VyRegistration_User, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iKeyLabel = new IStaticText(
      id+WNDOFFSET_VyRegistration_KeyLabel, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IStaticText::defaultStyle() | IStaticText::mnemonic);
   iKey = new IEntryField(
      id+WNDOFFSET_VyRegistration_Key, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iNotice = new IStaticText(
      id+WNDOFFSET_VyRegistration_Notice, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   iRegister = new IPushButton(
      id+WNDOFFSET_VyRegistration_Register, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IPushButton::defaultStyle() | IPushButton::defaultButton | IControl::group | IControl::tabStop);
   iCancel = new IPushButton(
      id+WNDOFFSET_VyRegistration_Cancel, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   iExceptionNotification = new ExceptionNotification();

   conn0 = new VyRegistrationConn0();
   conn1 = new VyRegistrationConn1();
   conn4 = new VyRegistrationConn4();
   conn5 = new VyRegistrationConn5();

   iMultiCellCanvas1->addToCell(iUserLabel, 2, 2, 1, 1);
   iMultiCellCanvas1->addToCell(iUser, 4, 2, 2, 1);
   iMultiCellCanvas1->addToCell(iKeyLabel, 2, 4, 1, 1);
   iMultiCellCanvas1->addToCell(iKey, 4, 4, 2, 1);
   iMultiCellCanvas1->addToCell(iRegister, 2, 8, 1, 1);
   iMultiCellCanvas1->addToCell(iCancel, 4, 8, 1, 1);
   iMultiCellCanvas1->addToCell(iNotice, 2, 6, 4, 1);
   iMultiCellCanvas1->setColumnWidth(5, 200, false);
   iMultiCellCanvas1->setRowHeight(8, IMultiCellCanvas::defaultCell().height(), false);
   iUserLabel->setAlignment(IStaticText::topLeft);
   iUserLabel->setText("~User name");
   iUserLabel->setMinimumSize(ISize(100, 25));
   iUser->setLimit(USER_NAME_LIMIT - 1);
   iUser->setMinimumSize(ISize(283, 25));
   iKeyLabel->setText("~Key");
   iKeyLabel->setMinimumSize(ISize(100, 25));
   iKey->setLimit(18);
   iKey->setMinimumSize(ISize(283, 25));
   iRegister->setText("~Register!");
   iCancel->setText("Cancel");
   iCancel->setMinimumSize(ISize(102, 34));
   this->setFocus();
   this->setAutoDeleteObject(true);
   this->setClient(iMultiCellCanvas1);
   construct();
}     //end constructor


//------------------------------------------------------------------------------
// VyRegistration :: ~VyRegistration
//------------------------------------------------------------------------------
#pragma export (VyRegistration::~VyRegistration())
VyRegistration::~VyRegistration()
{
   conn0->stopHandlingNotificationsFor(*iCancel);
   conn1->stopHandlingNotificationsFor(*iRegister);
   conn4->stopHandlingNotificationsFor(*this);
   conn4->stopHandlingNotificationsFor(*iExceptionNotification);
   conn5->stopHandlingNotificationsFor(*conn1);

   delete conn0;
   delete conn1;
   delete conn4;
   delete conn5;


   delete iMultiCellCanvas1;
   delete iUserLabel;
   delete iUser;
   delete iKeyLabel;
   delete iKey;
   delete iNotice;
   delete iRegister;
   delete iCancel;
   delete iExceptionNotification;
}

//------------------------------------------------------------------------------
// VyRegistration :: initializePart
//------------------------------------------------------------------------------
#pragma export (VyRegistration::initializePart())
VyRegistration & VyRegistration::initializePart()
{
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// VyRegistration :: makeConnections
//------------------------------------------------------------------------------
#pragma export (VyRegistration::makeConnections())
Boolean VyRegistration::makeConnections()
{
   this->enableNotification();
   iMultiCellCanvas1->enableNotification();
   iUserLabel->enableNotification();
   iUser->enableNotification();
   iKeyLabel->enableNotification();
   iKey->enableNotification();
   iNotice->enableNotification();
   iRegister->enableNotification();
   iCancel->enableNotification();
   iExceptionNotification->enableNotification();

   unsigned long id = this->id();
   conn0->initialize(iCancel, this);
   conn0->handleNotificationsFor(*iCancel);
   conn1->initialize(iRegister, this);
   conn1->handleNotificationsFor(*iRegister);
   conn1->setUserName(iUser);
   conn1->setKeyName(iKey);
   conn4->initialize(this, iExceptionNotification);
   conn4->handleNotificationsFor(*this);
   conn4->handleNotificationsFor(*iExceptionNotification);
   conn5->initialize(conn1, iExceptionNotification);
   conn5->handleNotificationsFor(*conn1);

   conn4->setTarget();
   return true;
}



#include "VyRegistration.cpv"
