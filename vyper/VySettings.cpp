/*******************************************************************************
* FILE NAME: VySettings.cpp                                                    *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     VySettings- Settings stored in the INI                                   *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IPROFILE_
#include <iprofile.hpp>
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _VYSETTINGS_
#include "VySettings.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for VySettingsConn0
//*****************************************************************************
class VySettingsConn0 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySettingsConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, VySettings * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySettings::framePositionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (framePosition) to (saveFramePosition))");
         try {target->saveFramePosition();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   VySettings * target;


};   //VySettingsConn0


//*****************************************************************************
// Class definition for VySettingsConn1
//*****************************************************************************
class VySettingsConn1 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySettingsConn1(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, VySettings * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySettings::frameSizeId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (frameSize) to (saveFrameSize))");
         try {target->saveFrameSize();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   VySettings * target;


};   //VySettingsConn1


//*****************************************************************************
// Class definition for VySettingsConn2
//*****************************************************************************
class VySettingsConn2 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySettingsConn2(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, VySettings * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySettings::frameSplitId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (frameSplit) to (saveFrameSplit))");
         try {target->saveFrameSplit();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   VySettings * target;


};   //VySettingsConn2


//*****************************************************************************
// Class definition for VySettingsConn3
//*****************************************************************************
class VySettingsConn3 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySettingsConn3(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, VySettings * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySettings::saveMaskId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (saveMask) to (saveSaveMask))");
         try {target->saveSaveMask();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   VySettings * target;


};   //VySettingsConn3


//*****************************************************************************
// Class definition for VySettingsConn4
//*****************************************************************************
class VySettingsConn4 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySettingsConn4(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, VySettings * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySettings::openMaskId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (openMask) to (saveOpenMask))");
         try {target->saveOpenMask();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   VySettings * target;


};   //VySettingsConn4


//*****************************************************************************
// Class definition for VySettingsConn5
//*****************************************************************************
class VySettingsConn5 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySettingsConn5(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, VySettings * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySettings::importIpfMaskId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (importIpfMask) to (saveImportIpfMask))");
         try {target->saveImportIpfMask();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   VySettings * target;


};   //VySettingsConn5


//*****************************************************************************
// Class definition for VySettingsConn6
//*****************************************************************************
class VySettingsConn6 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySettingsConn6(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, VySettings * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySettings::importWinHelpMaskId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (importWinHelpMask) to (saveImportWinHelpMask))");
         try {target->saveImportWinHelpMask();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   VySettings * target;


};   //VySettingsConn6


//*****************************************************************************
// Class definition for VySettingsConn7
//*****************************************************************************
class VySettingsConn7 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySettingsConn7(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, VySettings * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySettings::importTextMaskId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (importTextMask) to (saveImportTextMask))");
         try {target->saveImportTextMask();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   VySettings * target;


};   //VySettingsConn7


//*****************************************************************************
// Class definition for VySettingsConn8
//*****************************************************************************
class VySettingsConn8 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySettingsConn8(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, VySettings * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySettings::exportIpfMaskId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (exportIpfMask) to (saveExportIpfMask))");
         try {target->saveExportIpfMask();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   VySettings * target;


};   //VySettingsConn8


//*****************************************************************************
// Class definition for VySettingsConn9
//*****************************************************************************
class VySettingsConn9 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySettingsConn9(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, VySettings * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySettings::exportHtmlSingleMaskId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (exportHtmlSingleMask) to (saveExportHtmlSingleMask))");
         try {target->saveExportHtmlSingleMask();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   VySettings * target;


};   //VySettingsConn9


//*****************************************************************************
// Class definition for VySettingsConn10
//*****************************************************************************
class VySettingsConn10 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySettingsConn10(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, VySettings * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySettings::exportHtmlFrameMaskId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (exportHtmlFrameMask) to (saveExportHtmlFrameMask))");
         try {target->saveExportHtmlFrameMask();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   VySettings * target;


};   //VySettingsConn10


//*****************************************************************************
// Class definition for VySettingsConn11
//*****************************************************************************
class VySettingsConn11 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySettingsConn11(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, VySettings * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySettings::exportHtmlHelpMaskId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (exportHtmlHelpMask) to (saveExportHtmlHelpMask))");
         try {target->saveExportHtmlHelpMask();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   VySettings * target;


};   //VySettingsConn11


//*****************************************************************************
// Class definition for VySettingsConn12
//*****************************************************************************
class VySettingsConn12 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySettingsConn12(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, VySettings * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySettings::exportWinHelpMaskId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (exportWinHelpMask) to (saveExportWinHelpMask))");
         try {target->saveExportWinHelpMask();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   VySettings * target;


};   //VySettingsConn12


//*****************************************************************************
// Class definition for VySettingsConn13
//*****************************************************************************
class VySettingsConn13 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySettingsConn13(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, VySettings * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySettings::exportRtfMaskId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (exportRtfMask) to (saveExportRtfMask))");
         try {target->saveExportRtfMask();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   VySettings * target;


};   //VySettingsConn13


//*****************************************************************************
// Class definition for VySettingsConn14
//*****************************************************************************
class VySettingsConn14 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySettingsConn14(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, VySettings * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySettings::exportHeaderMaskId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (exportHeaderMask) to (saveExportHeaderMask))");
         try {target->saveExportHeaderMask();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   VySettings * target;


};   //VySettingsConn14


//*****************************************************************************
// Class definition for VySettingsConn15
//*****************************************************************************
class VySettingsConn15 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySettingsConn15(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, VySettings * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySettings::exportTextMaskId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (exportTextMask) to (saveExportTextMask))");
         try {target->saveExportTextMask();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   VySettings * target;


};   //VySettingsConn15


//*****************************************************************************
// Class definition for VySettingsConn16
//*****************************************************************************
class VySettingsConn16 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VySettingsConn16(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VySettings * aSource, VySettings * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VySettings::graphicMaskId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (graphicMask) to (saveGraphicMask))");
         try {target->saveGraphicMask();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VySettings * source;
   VySettings * target;


};   //VySettingsConn16


#pragma export (VySettings::readyId)
const INotificationId VySettings::readyId = "VySettings::readyId";

//------------------------------------------------------------------------------
// VySettings :: VySettings
//------------------------------------------------------------------------------
#pragma export (VySettings::VySettings())
VySettings::VySettings()
{
   iProfile = new IProfile("vyper.ini");

   conn0 = new VySettingsConn0();
   conn1 = new VySettingsConn1();
   conn2 = new VySettingsConn2();
   conn3 = new VySettingsConn3();
   conn4 = new VySettingsConn4();
   conn5 = new VySettingsConn5();
   conn6 = new VySettingsConn6();
   conn7 = new VySettingsConn7();
   conn8 = new VySettingsConn8();
   conn9 = new VySettingsConn9();
   conn10 = new VySettingsConn10();
   conn11 = new VySettingsConn11();
   conn12 = new VySettingsConn12();
   conn13 = new VySettingsConn13();
   conn14 = new VySettingsConn14();
   conn15 = new VySettingsConn15();
   conn16 = new VySettingsConn16();

   iProfile->setDefaultApplicationName("VyperHelp");
   construct();
}     //end constructor


//------------------------------------------------------------------------------
// VySettings :: ~VySettings
//------------------------------------------------------------------------------
#pragma export (VySettings::~VySettings())
VySettings::~VySettings()
{
   conn0->stopHandlingNotificationsFor(*this);
   conn1->stopHandlingNotificationsFor(*this);
   conn2->stopHandlingNotificationsFor(*this);
   conn3->stopHandlingNotificationsFor(*this);
   conn4->stopHandlingNotificationsFor(*this);
   conn5->stopHandlingNotificationsFor(*this);
   conn6->stopHandlingNotificationsFor(*this);
   conn7->stopHandlingNotificationsFor(*this);
   conn8->stopHandlingNotificationsFor(*this);
   conn9->stopHandlingNotificationsFor(*this);
   conn10->stopHandlingNotificationsFor(*this);
   conn11->stopHandlingNotificationsFor(*this);
   conn12->stopHandlingNotificationsFor(*this);
   conn13->stopHandlingNotificationsFor(*this);
   conn14->stopHandlingNotificationsFor(*this);
   conn15->stopHandlingNotificationsFor(*this);
   conn16->stopHandlingNotificationsFor(*this);

   delete conn0;
   delete conn1;
   delete conn2;
   delete conn3;
   delete conn4;
   delete conn5;
   delete conn6;
   delete conn7;
   delete conn8;
   delete conn9;
   delete conn10;
   delete conn11;
   delete conn12;
   delete conn13;
   delete conn14;
   delete conn15;
   delete conn16;


   delete iProfile;
}

//------------------------------------------------------------------------------
// VySettings :: initializePart
//------------------------------------------------------------------------------
#pragma export (VySettings::initializePart())
VySettings & VySettings::initializePart()
{
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// VySettings :: makeConnections
//------------------------------------------------------------------------------
#pragma export (VySettings::makeConnections())
Boolean VySettings::makeConnections()
{
   this->enableNotification();

   conn0->initialize(this, this);
   conn0->handleNotificationsFor(*this);
   conn1->initialize(this, this);
   conn1->handleNotificationsFor(*this);
   conn2->initialize(this, this);
   conn2->handleNotificationsFor(*this);
   conn3->initialize(this, this);
   conn3->handleNotificationsFor(*this);
   conn4->initialize(this, this);
   conn4->handleNotificationsFor(*this);
   conn5->initialize(this, this);
   conn5->handleNotificationsFor(*this);
   conn6->initialize(this, this);
   conn6->handleNotificationsFor(*this);
   conn7->initialize(this, this);
   conn7->handleNotificationsFor(*this);
   conn8->initialize(this, this);
   conn8->handleNotificationsFor(*this);
   conn9->initialize(this, this);
   conn9->handleNotificationsFor(*this);
   conn10->initialize(this, this);
   conn10->handleNotificationsFor(*this);
   conn11->initialize(this, this);
   conn11->handleNotificationsFor(*this);
   conn12->initialize(this, this);
   conn12->handleNotificationsFor(*this);
   conn13->initialize(this, this);
   conn13->handleNotificationsFor(*this);
   conn14->initialize(this, this);
   conn14->handleNotificationsFor(*this);
   conn15->initialize(this, this);
   conn15->handleNotificationsFor(*this);
   conn16->initialize(this, this);
   conn16->handleNotificationsFor(*this);

   return true;
}


#include "VySettings.cpv"
