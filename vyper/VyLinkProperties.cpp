/*******************************************************************************
* FILE NAME: VyLinkProperties.cpp                                              *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     VyLinkProperties- Dialog for editing links                               *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _IMCELCV_
#include <imcelcv.hpp>
#endif

#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _ICOMBOBX_
#include <icombobx.hpp>
#endif

#ifndef _ICHECKBX_
#include <icheckbx.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _IENTRYFD_
#include <ientryfd.hpp>
#endif

#ifndef _IPUSHBUT_
#include <ipushbut.hpp>
#endif

#ifndef _VYDOC_
#include "VyDoc.hpp"
#endif

#ifndef _EXCEPTIONNOTIFICATION_
#include "ExceptionNotification.hpp"
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _VYLINKPROPERTIES_
#include "VyLinkProperties.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for VyLinkPropertiesConn0
//*****************************************************************************
class VyLinkPropertiesConn0 : public IObserver {
public:
   virtual  ~VyLinkPropertiesConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(ICheckBox * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : External(selected) to File(enabled))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->select(target->isEnabled());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : External(selected) to File(enabled))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->enable(source->isSelected());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == ICheckBox::selectId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::enableId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   ICheckBox * source;
   IEntryField * target;
   Boolean aligning;


};   //VyLinkPropertiesConn0


//*****************************************************************************
// Class definition for VyLinkPropertiesConn1
//*****************************************************************************
class VyLinkPropertiesConn1 : public IObserver {
public:
   virtual  ~VyLinkPropertiesConn1(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyLink * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Link(file) to File(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setFile(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Link(file) to File(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->file());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyLink::fileId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyLink * source;
   IEntryField * target;
   Boolean aligning;


};   //VyLinkPropertiesConn1


//*****************************************************************************
// Class definition for VyLinkPropertiesConn2
//*****************************************************************************
class VyLinkPropertiesConn2 : public IObserver {
public:
   virtual  ~VyLinkPropertiesConn2(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyLink * aSource, ICheckBox * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Link(external) to External(selected))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->enableExternal(target->isSelected());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Link(external) to External(selected))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->select(source->isExternal());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyLink::externalId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == ICheckBox::selectId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyLink * source;
   ICheckBox * target;
   Boolean aligning;


};   //VyLinkPropertiesConn2


//*****************************************************************************
// Class definition for VyLinkPropertiesConn3
//*****************************************************************************
class VyLinkPropertiesConn3 : public IObserver {
public:
   virtual  ~VyLinkPropertiesConn3(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyLink * aSource, IComboBox * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Link(target) to Target(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setTarget(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Link(target) to Target(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->target());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyLink::targetId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IComboBox::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyLink * source;
   IComboBox * target;
   Boolean aligning;


};   //VyLinkPropertiesConn3


//*****************************************************************************
// Class definition for VyLinkPropertiesConn5
//*****************************************************************************
class VyLinkPropertiesConn5 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyLinkPropertiesConn5(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Close(buttonClickEvent) to FrameWindow(close))");
         try {target->close();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IFrameWindow * target;


};   //VyLinkPropertiesConn5


//*****************************************************************************
// Class definition for VyLinkPropertiesConn7
//*****************************************************************************
class VyLinkPropertiesConn7 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyLinkPropertiesConn7(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyDoc *> * aSource, IVBVariablePartPointer<VyDoc *> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   VyLinkPropertiesConn7 & setLabels(IComboBox * aSelf) {iLabels = aSelf; return *this;};

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!target->target()) return(*this);
      if (anEvent.notificationId() == IVBVariablePartPointer<VyDoc *>::targetId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Document(targetPtr) to Document(enumerateLabels))");
         try {target->target()->enumerateLabels(iLabels);}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyDoc *> * source;
   IVBVariablePartPointer<VyDoc *> * target;
   IComboBox * iLabels;


};   //VyLinkPropertiesConn7

const INotificationId VyLinkPropertiesConn7::exceptionId = "VyLinkPropertiesConn7::exceptionId";

//*****************************************************************************
// Class definition for VyLinkPropertiesConn6
//*****************************************************************************
class VyLinkPropertiesConn6 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyLinkPropertiesConn6(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyLinkProperties * aSource, IComboBox * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyLinkProperties::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to Target(setFocus))");
         try {target->setFocus();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyLinkProperties * source;
   IComboBox * target;


};   //VyLinkPropertiesConn6


//*****************************************************************************
// Class definition for VyLinkPropertiesConn18
//*****************************************************************************
class VyLinkPropertiesConn18 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyLinkPropertiesConn18(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, VyLinkProperties * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::closeId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FrameWindow(closeEvent) to (finish))");
         try {target->finish();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   VyLinkProperties * target;


};   //VyLinkPropertiesConn18

const INotificationId VyLinkPropertiesConn18::exceptionId = "VyLinkPropertiesConn18::exceptionId";

//*****************************************************************************
// Class definition for VyLinkPropertiesConn9
//*****************************************************************************
class VyLinkPropertiesConn9 : public IObserver {
public:
   virtual  ~VyLinkPropertiesConn9(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyLink * aSource, VyLinkProperties * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Link(link) to (linkItem))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setLink(target->linkItem());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Link(link) to (linkItem))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setLinkItem(source->link());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyLink::linkId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == VyLinkProperties::linkItemId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyLink * source;
   VyLinkProperties * target;
   Boolean aligning;


};   //VyLinkPropertiesConn9


//*****************************************************************************
// Class definition for VyLinkPropertiesConn10
//*****************************************************************************
class VyLinkPropertiesConn10 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyLinkPropertiesConn10(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyLinkPropertiesConn18 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyLinkPropertiesConn18::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn18(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyLinkPropertiesConn18 * source;
   ExceptionNotification * target;


};   //VyLinkPropertiesConn10


//*****************************************************************************
// Class definition for VyLinkPropertiesConn11
//*****************************************************************************
class VyLinkPropertiesConn11 : public IObserver {
public:
   virtual  ~VyLinkPropertiesConn11(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FrameWindow(this) to ExceptionNotification(owner))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setOwner(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == ExceptionNotification::ownerId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   ExceptionNotification * target;
   Boolean aligning;


};   //VyLinkPropertiesConn11


//*****************************************************************************
// Class definition for VyLinkPropertiesConn12
//*****************************************************************************
class VyLinkPropertiesConn12 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyLinkPropertiesConn12(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(VyLinkPropertiesConn7 * aSource, ExceptionNotification * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VyLinkPropertiesConn7::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn7(exceptionOccurred) to ExceptionNotification(show))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   VyLinkPropertiesConn7 * source;
   ExceptionNotification * target;


};   //VyLinkPropertiesConn12


#pragma export (VyLinkProperties::readyId)
const INotificationId VyLinkProperties::readyId = "VyLinkProperties::readyId";

#pragma export (VyLinkProperties::linkGin)
const INotificationId VyLinkProperties::linkGin = "VyLinkProperties::linkGin";

#pragma export (VyLinkProperties::document)
const INotificationId VyLinkProperties::document = "VyLinkProperties::document";

//------------------------------------------------------------------------------
// VyLinkProperties :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (VyLinkProperties::defaultFramingSpec())
const IRectangle VyLinkProperties::defaultFramingSpec()
{
   return(IRectangle(IPoint(30, IWindow::desktopWindow()->size().height() - 30 - 229),ISize(449, 229)));
}


//------------------------------------------------------------------------------
// VyLinkProperties :: defaultStyle
//------------------------------------------------------------------------------
#pragma export (VyLinkProperties::defaultStyle())
const IFrameWindow::Style VyLinkProperties::defaultStyle()
{
   return(IFrameWindow::defaultStyle() & ~IFrameWindow::windowList | IFrameWindow::animated | IWindow::visible);
}


//------------------------------------------------------------------------------
// VyLinkProperties :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (VyLinkProperties::defaultTitle())
IString VyLinkProperties::defaultTitle()
{
   return("Select link");
}


//------------------------------------------------------------------------------
// VyLinkProperties :: VyLinkProperties
//------------------------------------------------------------------------------
#pragma export (VyLinkProperties::VyLinkProperties(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
VyLinkProperties::VyLinkProperties(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   iMultiCellCanvas1 = new IMultiCellCanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iTargetLabel = new IStaticText(
      id+WNDOFFSET_VyLinkProperties_TargetLabel, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IStaticText::defaultStyle() & ~IControl::tabStop | IControl::group);
   iTarget = new IComboBox(
      id+WNDOFFSET_VyLinkProperties_Target, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IComboBox::defaultStyle() | IControl::tabStop);
   iExternal = new ICheckBox(
      id+WNDOFFSET_VyLinkProperties_External, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      ICheckBox::defaultStyle() | IControl::group | IControl::tabStop);
   iFile = new IEntryField(
      id+WNDOFFSET_VyLinkProperties_File, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iClose = new IPushButton(
      id+WNDOFFSET_VyLinkProperties_Close, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle(), 
      IPushButton::defaultStyle() | IPushButton::defaultButton | IControl::group | IControl::tabStop);
   iLink = new VyLink();
   iDocument = new IVBVariablePartPointer<VyDoc *>();
   iExceptionNotification = new ExceptionNotification();

   conn0 = new VyLinkPropertiesConn0();
   conn1 = new VyLinkPropertiesConn1();
   conn2 = new VyLinkPropertiesConn2();
   conn3 = new VyLinkPropertiesConn3();
   conn5 = new VyLinkPropertiesConn5();
   conn7 = new VyLinkPropertiesConn7();
   conn6 = new VyLinkPropertiesConn6();
   conn18 = new VyLinkPropertiesConn18();
   conn9 = new VyLinkPropertiesConn9();
   conn10 = new VyLinkPropertiesConn10();
   conn11 = new VyLinkPropertiesConn11();
   conn12 = new VyLinkPropertiesConn12();

   iMultiCellCanvas1->addToCell(iTargetLabel, 2, 2, 2, 1);
   iMultiCellCanvas1->addToCell(iFile, 4, 3, 1, 1);
   iMultiCellCanvas1->addToCell(iExternal, 2, 3, 2, 1);
   iMultiCellCanvas1->addToCell(iClose, 2, 5, 1, 1);
   iMultiCellCanvas1->addToCell(iTarget, 4, 2, 1, 1);
   iMultiCellCanvas1->setColumnWidth(4, IMultiCellCanvas::defaultCell().width(), false);
   iMultiCellCanvas1->setRowHeight(5, IMultiCellCanvas::defaultCell().height(), false);
   iTargetLabel->setText("Target");
   iExternal->setText("External file");
   iExternal->setMinimumSize(ISize(135, 28));
   iClose->setText("Close");
   iClose->setMinimumSize(ISize(98, 33));
   this->setFocus();
   this->setAutoDeleteObject(true);
   this->setClient(iMultiCellCanvas1);
   construct();
}     //end constructor


//------------------------------------------------------------------------------
// VyLinkProperties :: ~VyLinkProperties
//------------------------------------------------------------------------------
#pragma export (VyLinkProperties::~VyLinkProperties())
VyLinkProperties::~VyLinkProperties()
{
   this->stopHandlingNotificationsFor(*iLink);
   this->stopHandlingNotificationsFor(*iDocument);
   conn0->stopHandlingNotificationsFor(*iExternal);
   conn0->stopHandlingNotificationsFor(*iFile);
   conn1->stopHandlingNotificationsFor(*iLink);
   conn1->stopHandlingNotificationsFor(*iFile);
   conn2->stopHandlingNotificationsFor(*iLink);
   conn2->stopHandlingNotificationsFor(*iExternal);
   conn3->stopHandlingNotificationsFor(*iLink);
   conn3->stopHandlingNotificationsFor(*iTarget);
   conn5->stopHandlingNotificationsFor(*iClose);
   conn7->stopHandlingNotificationsFor(*iDocument);
   conn6->stopHandlingNotificationsFor(*this);
   conn18->stopHandlingNotificationsFor(*this);
   conn9->stopHandlingNotificationsFor(*iLink);
   conn9->stopHandlingNotificationsFor(*this);
   conn10->stopHandlingNotificationsFor(*conn18);
   conn11->stopHandlingNotificationsFor(*this);
   conn11->stopHandlingNotificationsFor(*iExceptionNotification);
   conn12->stopHandlingNotificationsFor(*conn7);

   delete conn0;
   delete conn1;
   delete conn2;
   delete conn3;
   delete conn5;
   delete conn7;
   delete conn6;
   delete conn18;
   delete conn9;
   delete conn10;
   delete conn11;
   delete conn12;


   delete iMultiCellCanvas1;
   delete iTargetLabel;
   delete iTarget;
   delete iExternal;
   delete iFile;
   delete iClose;
   delete iLink;
   delete iDocument;
   delete iExceptionNotification;
}

//------------------------------------------------------------------------------
// VyLinkProperties :: initializePart
//------------------------------------------------------------------------------
#pragma export (VyLinkProperties::initializePart())
VyLinkProperties & VyLinkProperties::initializePart()
{
   this->handleNotificationsFor(*iLink);
   this->handleNotificationsFor(*iDocument);
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// VyLinkProperties :: makeConnections
//------------------------------------------------------------------------------
#pragma export (VyLinkProperties::makeConnections())
Boolean VyLinkProperties::makeConnections()
{
   this->enableNotification();
   iMultiCellCanvas1->enableNotification();
   iTargetLabel->enableNotification();
   iTarget->enableNotification();
   iExternal->enableNotification();
   iFile->enableNotification();
   iClose->enableNotification();
   iLink->enableNotification();
   iDocument->enableNotification();
   iExceptionNotification->enableNotification();

   unsigned long id = this->id();
   conn0->initialize(iExternal, iFile);
   conn0->handleNotificationsFor(*iExternal);
   conn0->handleNotificationsFor(*iFile);
   conn1->initialize(iLink, iFile);
   conn1->handleNotificationsFor(*iLink);
   conn1->handleNotificationsFor(*iFile);
   conn2->initialize(iLink, iExternal);
   conn2->handleNotificationsFor(*iLink);
   conn2->handleNotificationsFor(*iExternal);
   conn3->initialize(iLink, iTarget);
   conn3->handleNotificationsFor(*iLink);
   conn3->handleNotificationsFor(*iTarget);
   conn5->initialize(iClose, this);
   conn5->handleNotificationsFor(*iClose);
   conn7->initialize(iDocument, iDocument);
   conn7->handleNotificationsFor(*iDocument);
   conn6->initialize(this, iTarget);
   conn6->handleNotificationsFor(*this);
   conn7->setLabels(iTarget);
   conn18->initialize(this, this);
   conn18->handleNotificationsFor(*this);
   conn9->initialize(iLink, this);
   conn9->handleNotificationsFor(*iLink);
   conn9->handleNotificationsFor(*this);
   conn10->initialize(conn18, iExceptionNotification);
   conn10->handleNotificationsFor(*conn18);
   conn11->initialize(this, iExceptionNotification);
   conn11->handleNotificationsFor(*this);
   conn11->handleNotificationsFor(*iExceptionNotification);
   conn12->initialize(conn7, iExceptionNotification);
   conn12->handleNotificationsFor(*conn7);

   conn0->setTarget();
   conn1->setTarget();
   conn2->setTarget();
   conn3->setTarget();
   conn9->setTarget();
   conn11->setTarget();
   return true;
}


//------------------------------------------------------------------------------
// VyLinkProperties :: dispatchNotificationEvent
//------------------------------------------------------------------------------
#pragma export (VyLinkProperties::dispatchNotificationEvent(const INotificationEvent &))
IObserver & VyLinkProperties::dispatchNotificationEvent(const INotificationEvent & anEvent)
{

   if ((anEvent.notificationId() == IVBVariablePartPointer<VyDoc *>::targetId) && (iDocument == &anEvent.notifier()))
       notifyObservers(INotificationEvent(document, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   return *this;
}




#include "VyLinkProperties.cpv"
