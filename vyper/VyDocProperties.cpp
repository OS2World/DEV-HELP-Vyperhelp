/*******************************************************************************
* FILE NAME: VyDocProperties.cpp                                               *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     VyDocProperties- Properties dialog for Vyper document                    *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _ISETCV_
#include <isetcv.hpp>
#endif

#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _IENTRYFD_
#include <ientryfd.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _IPUSHBUT_
#include <ipushbut.hpp>
#endif

#ifndef _VYDOC_
#include "VyDoc.hpp"
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _VYDOCPROPERTIES_
#include "VyDocProperties.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for VyDocPropertiesConn0
//*****************************************************************************
class VyDocPropertiesConn0 : public IObserver {
public:
   virtual  ~VyDocPropertiesConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyDoc *> * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Document(title) to Title(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->target()->setTitle(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Document(title) to Title(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->target()->title());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::titleId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyDoc *> * source;
   IEntryField * target;
   Boolean aligning;


};   //VyDocPropertiesConn0


//*****************************************************************************
// Class definition for VyDocPropertiesConn1
//*****************************************************************************
class VyDocPropertiesConn1 : public IObserver {
public:
   virtual  ~VyDocPropertiesConn1(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyDoc *> * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Document(subject) to Subject(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->target()->setSubject(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Document(subject) to Subject(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->target()->subject());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::subjectId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyDoc *> * source;
   IEntryField * target;
   Boolean aligning;


};   //VyDocPropertiesConn1


//*****************************************************************************
// Class definition for VyDocPropertiesConn2
//*****************************************************************************
class VyDocPropertiesConn2 : public IObserver {
public:
   virtual  ~VyDocPropertiesConn2(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyDoc *> * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Document(version) to Version(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->target()->setVersion(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Document(version) to Version(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->target()->version());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::versionId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyDoc *> * source;
   IEntryField * target;
   Boolean aligning;


};   //VyDocPropertiesConn2


//*****************************************************************************
// Class definition for VyDocPropertiesConn3
//*****************************************************************************
class VyDocPropertiesConn3 : public IObserver {
public:
   virtual  ~VyDocPropertiesConn3(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyDoc *> * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Document(copyright) to Copyright(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->target()->setCopyright(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Document(copyright) to Copyright(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->target()->copyright());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::copyrightId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyDoc *> * source;
   IEntryField * target;
   Boolean aligning;


};   //VyDocPropertiesConn3


//*****************************************************************************
// Class definition for VyDocPropertiesConn4
//*****************************************************************************
class VyDocPropertiesConn4 : public IObserver {
public:
   virtual  ~VyDocPropertiesConn4(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariablePartPointer<VyDoc *> * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Document(author) to Author(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->target()->setAuthor(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (!source->target()) return;
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Document(author) to Author(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->target()->author());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (!source->target()) return(*this);
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == VyDoc::authorId) && (source->target() == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariablePartPointer<VyDoc *> * source;
   IEntryField * target;
   Boolean aligning;


};   //VyDocPropertiesConn4


//*****************************************************************************
// Class definition for VyDocPropertiesConn5
//*****************************************************************************
class VyDocPropertiesConn5 : public IObserver, public IStandardNotifier {
public:
   virtual  ~VyDocPropertiesConn5(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Close(buttonClickEvent) to FrameWindow(close))");
         try {target->close();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IFrameWindow * target;


};   //VyDocPropertiesConn5


#pragma export (VyDocProperties::readyId)
const INotificationId VyDocProperties::readyId = "VyDocProperties::readyId";

#pragma export (VyDocProperties::document)
const INotificationId VyDocProperties::document = "VyDocProperties::document";

//------------------------------------------------------------------------------
// VyDocProperties :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (VyDocProperties::defaultFramingSpec())
const IRectangle VyDocProperties::defaultFramingSpec()
{
   return(IRectangle(IPoint(10, IWindow::desktopWindow()->size().height() - 45 - 275),ISize(486, 275)));
}


//------------------------------------------------------------------------------
// VyDocProperties :: defaultStyle
//------------------------------------------------------------------------------
#pragma export (VyDocProperties::defaultStyle())
const IFrameWindow::Style VyDocProperties::defaultStyle()
{
   return(IFrameWindow::defaultStyle() & ~IFrameWindow::maximizeButton & ~IFrameWindow::menuBar & ~IFrameWindow::minimizeButton & ~IFrameWindow::windowList & ~IWindow::visible | IFrameWindow::dialogBorder);
}


//------------------------------------------------------------------------------
// VyDocProperties :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (VyDocProperties::defaultTitle())
IString VyDocProperties::defaultTitle()
{
   return("File Properties");
}


//------------------------------------------------------------------------------
// VyDocProperties :: VyDocProperties
//------------------------------------------------------------------------------
#pragma export (VyDocProperties::VyDocProperties(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
VyDocProperties::VyDocProperties(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   iSetCanvas1 = new ISetCanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iTitleLabel = new IStaticText(
      id+WNDOFFSET_VyDocProperties_TitleLabel, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle());
   iTitle = new IEntryField(
      id+WNDOFFSET_VyDocProperties_Title, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle(), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iSubjectLabel = new IStaticText(
      id+WNDOFFSET_VyDocProperties_SubjectLabel, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle());
   iSubject = new IEntryField(
      id+WNDOFFSET_VyDocProperties_Subject, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle(), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iVersionLabel = new IStaticText(
      id+WNDOFFSET_VyDocProperties_VersionLabel, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle());
   iVersion = new IEntryField(
      id+WNDOFFSET_VyDocProperties_Version, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle(), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iCopyrightLabel = new IStaticText(
      id+WNDOFFSET_VyDocProperties_CopyrightLabel, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle());
   iCopyright = new IEntryField(
      id+WNDOFFSET_VyDocProperties_Copyright, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle(), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iAuthorLabel = new IStaticText(
      id+WNDOFFSET_VyDocProperties_AuthorLabel, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle());
   iAuthor = new IEntryField(
      id+WNDOFFSET_VyDocProperties_Author, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle(), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iClose = new IPushButton(
      id+WNDOFFSET_VyDocProperties_Close, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle(), 
      IPushButton::defaultStyle() | IPushButton::defaultButton | IControl::tabStop);
   iDocument = new IVBVariablePartPointer<VyDoc *>();

   conn0 = new VyDocPropertiesConn0();
   conn1 = new VyDocPropertiesConn1();
   conn2 = new VyDocPropertiesConn2();
   conn3 = new VyDocPropertiesConn3();
   conn4 = new VyDocPropertiesConn4();
   conn5 = new VyDocPropertiesConn5();

   iSetCanvas1->setDeckCount(6);
   iSetCanvas1->setPackType(ISetCanvas::even);
   iTitleLabel->setText("Title");
   iTitle->setLimit(256);
   iTitle->setMinimumSize(ISize(344, 26));
   iSubjectLabel->setText("Subject");
   iSubject->setLimit(256);
   iSubject->setMinimumSize(ISize(344, 26));
   iVersionLabel->setText("Version");
   iVersion->setLimit(256);
   iVersion->setMinimumSize(ISize(344, 26));
   iCopyrightLabel->setText("Copyright");
   iCopyright->setLimit(256);
   iCopyright->setMinimumSize(ISize(344, 26));
   iAuthorLabel->setText("Author");
   iAuthor->setLimit(256);
   iAuthor->setMinimumSize(ISize(344, 26));
   iClose->setText("Close");
   iClose->setMinimumSize(ISize(69, 34));
   this->setFocus();
   this->setAutoDeleteObject(true);
   this->setClient(iSetCanvas1);
}     //end constructor


//------------------------------------------------------------------------------
// VyDocProperties :: ~VyDocProperties
//------------------------------------------------------------------------------
#pragma export (VyDocProperties::~VyDocProperties())
VyDocProperties::~VyDocProperties()
{
   this->stopHandlingNotificationsFor(*iDocument);
   conn0->stopHandlingNotificationsFor(*iDocument);
   conn0->stopHandlingNotificationsFor(*iTitle);
   conn1->stopHandlingNotificationsFor(*iDocument);
   conn1->stopHandlingNotificationsFor(*iSubject);
   conn2->stopHandlingNotificationsFor(*iDocument);
   conn2->stopHandlingNotificationsFor(*iVersion);
   conn3->stopHandlingNotificationsFor(*iDocument);
   conn3->stopHandlingNotificationsFor(*iCopyright);
   conn4->stopHandlingNotificationsFor(*iDocument);
   conn4->stopHandlingNotificationsFor(*iAuthor);
   conn5->stopHandlingNotificationsFor(*iClose);

   delete conn0;
   delete conn1;
   delete conn2;
   delete conn3;
   delete conn4;
   delete conn5;


   delete iSetCanvas1;
   delete iTitleLabel;
   delete iTitle;
   delete iSubjectLabel;
   delete iSubject;
   delete iVersionLabel;
   delete iVersion;
   delete iCopyrightLabel;
   delete iCopyright;
   delete iAuthorLabel;
   delete iAuthor;
   delete iClose;
   delete iDocument;
}

//------------------------------------------------------------------------------
// VyDocProperties :: initializePart
//------------------------------------------------------------------------------
#pragma export (VyDocProperties::initializePart())
VyDocProperties & VyDocProperties::initializePart()
{
   this->handleNotificationsFor(*iDocument);
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// VyDocProperties :: makeConnections
//------------------------------------------------------------------------------
#pragma export (VyDocProperties::makeConnections())
Boolean VyDocProperties::makeConnections()
{
   this->enableNotification();
   iSetCanvas1->enableNotification();
   iTitleLabel->enableNotification();
   iTitle->enableNotification();
   iSubjectLabel->enableNotification();
   iSubject->enableNotification();
   iVersionLabel->enableNotification();
   iVersion->enableNotification();
   iCopyrightLabel->enableNotification();
   iCopyright->enableNotification();
   iAuthorLabel->enableNotification();
   iAuthor->enableNotification();
   iClose->enableNotification();
   iDocument->enableNotification();

   unsigned long id = this->id();
   conn0->initialize(iDocument, iTitle);
   conn0->handleNotificationsFor(*iDocument);
   conn0->handleNotificationsFor(*iTitle);
   conn1->initialize(iDocument, iSubject);
   conn1->handleNotificationsFor(*iDocument);
   conn1->handleNotificationsFor(*iSubject);
   conn2->initialize(iDocument, iVersion);
   conn2->handleNotificationsFor(*iDocument);
   conn2->handleNotificationsFor(*iVersion);
   conn3->initialize(iDocument, iCopyright);
   conn3->handleNotificationsFor(*iDocument);
   conn3->handleNotificationsFor(*iCopyright);
   conn4->initialize(iDocument, iAuthor);
   conn4->handleNotificationsFor(*iDocument);
   conn4->handleNotificationsFor(*iAuthor);
   conn5->initialize(iClose, this);
   conn5->handleNotificationsFor(*iClose);

   conn0->setTarget();
   conn1->setTarget();
   conn2->setTarget();
   conn3->setTarget();
   conn4->setTarget();
   return true;
}


//------------------------------------------------------------------------------
// VyDocProperties :: dispatchNotificationEvent
//------------------------------------------------------------------------------
#pragma export (VyDocProperties::dispatchNotificationEvent(const INotificationEvent &))
IObserver & VyDocProperties::dispatchNotificationEvent(const INotificationEvent & anEvent)
{
   if ((anEvent.notificationId() == IVBVariablePartPointer<VyDoc *>::targetId) && (iDocument == &anEvent.notifier()))
       notifyObservers(INotificationEvent(document, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   return *this;
}



